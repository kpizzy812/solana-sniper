#!/usr/bin/env python3
"""
üí∞ MORI Sniper Bot - –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å—ã –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PATH
sys.path.append(str(Path(__file__).parent))

from loguru import logger
from solana.rpc.async_api import AsyncClient
from solana.rpc.commitment import Confirmed

from config.multi_wallet import MultiWalletConfig


class WalletChecker:
    """–ü—Ä–æ–≤–µ—Ä—è–ª—å—â–∏–∫ –±–∞–ª–∞–Ω—Å–æ–≤ –∫–æ—à–µ–ª—å–∫–æ–≤"""

    def __init__(self):
        self.config = MultiWalletConfig()
        self.solana_client = None

    async def start(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Solana"""
        try:
            from config.settings import settings
            self.solana_client = AsyncClient(
                endpoint=settings.solana.rpc_url,
                commitment=Confirmed
            )
            logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Solana: {settings.solana.rpc_url}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Solana: {e}")
            return False

    async def stop(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if self.solana_client:
            await self.solana_client.close()

    async def check_all_wallets(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤"""
        if not self.config.is_enabled():
            logger.warning("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            logger.info("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ USE_MULTI_WALLET=true –≤ .env –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è")
            return

        if not self.config.wallets:
            logger.error("‚ùå –ö–æ—à–µ–ª—å–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            logger.info("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ MULTI_WALLET_PRIVATE_KEYS –≤ .env")
            return

        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ {len(self.config.wallets)} –∫–æ—à–µ–ª—å–∫–æ–≤...")
        print("=" * 80)

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        balance_tasks = []
        for wallet in self.config.wallets:
            task = asyncio.create_task(self._get_balance_with_info(wallet))
            balance_tasks.append(task)

        results = await asyncio.gather(*balance_tasks, return_exceptions=True)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        total_balance = 0.0
        total_available = 0.0
        ready_wallets = 0

        for i, (wallet, result) in enumerate(zip(self.config.wallets, results)):
            if isinstance(result, Exception):
                logger.error(f"‚ùå –ö–æ—à–µ–ª–µ–∫ {i + 1}: –û—à–∏–±–∫–∞ - {result}")
                continue

            balance, status_emoji, status_text = result
            wallet.update_balance(balance)

            total_balance += balance
            total_available += wallet.available_balance

            if wallet.available_balance >= self.config.min_balance:
                ready_wallets += 1

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥
            print(f"{status_emoji} –ö–æ—à–µ–ª–µ–∫ {wallet.index}:")
            print(f"   –ê–¥—Ä–µ—Å: {wallet.address}")
            print(f"   –ë–∞–ª–∞–Ω—Å: {balance:.6f} SOL")
            print(f"   –î–æ—Å—Ç—É–ø–Ω–æ: {wallet.available_balance:.6f} SOL ({status_text})")
            print(f"   –†–µ–∑–µ—Ä–≤ –≥–∞–∑–∞: {wallet.reserved_gas:.6f} SOL")
            print()

        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self._print_summary(total_balance, total_available, ready_wallets)

    async def _get_balance_with_info(self, wallet):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        try:
            response = await self.solana_client.get_balance(wallet.keypair.pubkey())
            balance = response.value / 1e9 if response.value else 0.0

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            if balance < self.config.min_balance:
                return balance, "üî¥", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"
            elif balance < self.config.min_balance * 2:
                return balance, "üü°", "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å"
            else:
                return balance, "üü¢", "–ì–æ—Ç–æ–≤ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ"

        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")

    def _print_summary(self, total_balance: float, total_available: float, ready_wallets: int):
        """–ü–µ—á–∞—Ç—å –∏—Ç–æ–≥–æ–≤–æ–π —Å–≤–æ–¥–∫–∏"""
        print("=" * 80)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print("=" * 80)

        print(f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance:.6f} SOL (~${total_balance * 150:.0f})")
        print(f"üíé –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: {total_available:.6f} SOL")
        print(f"üé≠ –ì–æ—Ç–æ–≤—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤: {ready_wallets}/{len(self.config.wallets)}")
        print(f"‚öôÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {self.config.min_balance:.6f} SOL")
        print(f"‚õΩ –†–µ–∑–µ—Ä–≤ –≥–∞–∑–∞: {self.config.gas_reserve:.6f} SOL –Ω–∞ –∫–æ—à–µ–ª–µ–∫")
        print()

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")

        if ready_wallets == 0:
            print("‚ùå –ù–ï–¢ –ö–û–®–ï–õ–¨–ö–û–í –ì–û–¢–û–í–´–• –ö –¢–û–†–ì–û–í–õ–ï!")
            print("   - –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –∫–æ—à–µ–ª—å–∫–∏ —Å CEX –±–∏—Ä–∂")
            print("   - –ú–∏–Ω–∏–º—É–º –Ω–∞ –∫–∞–∂–¥—ã–π –∫–æ—à–µ–ª–µ–∫: 0.05+ SOL")
        elif ready_wallets < len(self.config.wallets) // 2:
            print("‚ö†Ô∏è –ú–∞–ª–æ –≥–æ—Ç–æ–≤—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–Ω–∞–π–ø–∏–Ω–≥–∞")
            print("   - –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏")
            print("   - –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 80%+ –∫–æ—à–µ–ª—å–∫–æ–≤ –≥–æ—Ç–æ–≤—ã—Ö")
        else:
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Å–Ω–∞–π–ø–∏–Ω–≥—É!")
            print(f"   - –ú–æ–∂–Ω–æ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –Ω–∞ —Å—É–º–º—É –¥–æ {total_available:.4f} SOL")
            print("   - –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")

        print()
        print("üîß –ù–ê–°–¢–†–û–ô–ö–ò:")
        print(f"   –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {self.config.distribution_strategy}")
        print(f"   –†–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—è: {self.config.randomize_amounts}")
        print(f"   –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {self.config.initial_delay_seconds}s")
        print(f"   –ú–∞–∫—Å–∏–º—É–º —Å–¥–µ–ª–æ–∫ –Ω–∞ –∫–æ—à–µ–ª–µ–∫: {self.config.max_trades_per_wallet}")

    async def quick_balance_check(self):
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞"""
        if not self.config.is_enabled():
            print("‚ö†Ô∏è –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
            return

        logger.info("‚ö° –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤...")

        total_balance = 0.0
        ready_count = 0

        for wallet in self.config.wallets:
            try:
                response = await self.solana_client.get_balance(wallet.keypair.pubkey())
                balance = response.value / 1e9 if response.value else 0.0
                total_balance += balance

                if balance >= self.config.min_balance:
                    ready_count += 1

            except Exception:
                continue

        print(f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance:.4f} SOL")
        print(f"‚úÖ –ì–æ—Ç–æ–≤—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤: {ready_count}/{len(self.config.wallets)}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤")
    print("=" * 60)

    checker = WalletChecker()

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        if not await checker.start():
            sys.exit(1)

        # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
        mode = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (1 - –ø–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, 2 - –±—ã—Å—Ç—Ä–∞—è): ").strip()

        if mode == "2":
            await checker.quick_balance_check()
        else:
            await checker.check_all_wallets()

    except KeyboardInterrupt:
        print("\n‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
    finally:
        await checker.stop()


if __name__ == "__main__":
    asyncio.run(main())