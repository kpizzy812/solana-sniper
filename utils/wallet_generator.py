#!/usr/bin/env python3
"""
üí∞ MORI Sniper Bot - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
–°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∏—Å–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –±–ª—ç–∫–ª–∏—Å—Ç
"""

import os
import json
import secrets
from pathlib import Path
from typing import List, Dict
from dataclasses import dataclass

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫
try:
    from solders.keypair import Keypair
    from mnemonic import Mnemonic
    import base58

    CRYPTO_LIBS_AVAILABLE = True
except ImportError:
    CRYPTO_LIBS_AVAILABLE = False
    print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: pip install solders mnemonic")


@dataclass
class WalletInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–µ"""
    index: int
    address: str
    private_key: str
    seed_phrase: str
    balance_sol: float = 0.0
    reserved_gas: float = 0.02  # –†–µ–∑–µ—Ä–≤ –Ω–∞ –≥–∞–∑
    available_balance: float = 0.0

    def update_balance(self, new_balance: float):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å —É—á–µ—Ç–æ–º —Ä–µ–∑–µ—Ä–≤–∞"""
        self.balance_sol = new_balance
        self.available_balance = max(0, new_balance - self.reserved_gas)


class MultiWalletGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏ –º–µ–Ω–µ–¥–∂–µ—Ä –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤"""

    def __init__(self, wallets_dir: str = "wallets"):
        self.wallets_dir = Path(wallets_dir)
        self.wallets_dir.mkdir(exist_ok=True)

        # –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.wallets_file = self.wallets_dir / "generated_wallets.json"
        self.addresses_file = self.wallets_dir / "addresses_for_deposit.txt"

        # –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏
        self.wallets: List[WalletInfo] = []

        if not CRYPTO_LIBS_AVAILABLE:
            raise ImportError("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install solders mnemonic")

    def generate_wallets(self, count: int) -> List[WalletInfo]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ—à–µ–ª—å–∫–æ–≤

        Args:
            count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

        Returns:
            List[WalletInfo]: –°–ø–∏—Å–æ–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
        """
        print(f"üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {count} –Ω–æ–≤—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤...")

        mnemo = Mnemonic("english")
        generated_wallets = []

        for i in range(count):
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é —ç–Ω—Ç—Ä–æ–ø–∏—é
                entropy = secrets.token_bytes(16)  # 128 –±–∏—Ç —ç–Ω—Ç—Ä–æ–ø–∏–∏

                # –°–æ–∑–¥–∞–µ–º seed phrase
                seed_phrase = mnemo.to_mnemonic(entropy)

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º keypair –∏–∑ seed
                seed = mnemo.to_seed(seed_phrase)
                keypair = Keypair.from_seed(seed[:32])

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∞
                address = str(keypair.pubkey())
                private_key = base58.b58encode(bytes(keypair)).decode('utf-8')

                wallet = WalletInfo(
                    index=i + 1,
                    address=address,
                    private_key=private_key,
                    seed_phrase=seed_phrase
                )

                generated_wallets.append(wallet)
                print(f"‚úÖ –ö–æ—à–µ–ª–µ–∫ {i + 1}: {address}")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–∞ {i + 1}: {e}")
                continue

        print(f"üéâ –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(generated_wallets)} –∫–æ—à–µ–ª—å–∫–æ–≤")
        return generated_wallets

    def save_wallets(self, wallets: List[WalletInfo]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–æ–≤ –≤ —Ñ–∞–π–ª—ã"""
        print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–æ–≤...")

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è JSON
        wallets_data = []
        addresses_for_deposit = []

        for wallet in wallets:
            wallets_data.append({
                "index": wallet.index,
                "address": wallet.address,
                "private_key": wallet.private_key,
                "seed_phrase": wallet.seed_phrase,
                "balance_sol": wallet.balance_sol,
                "reserved_gas": wallet.reserved_gas
            })

            addresses_for_deposit.append(f"{wallet.index}. {wallet.address}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–û–°–¢–û–†–û–ñ–ù–û - —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏!)
        try:
            with open(self.wallets_file, 'w', encoding='utf-8') as f:
                json.dump(wallets_data, f, indent=2, ensure_ascii=False)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            os.chmod(self.wallets_file, 0o600)  # –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å/–ø–∏—Å–∞—Ç—å
            print(f"‚úÖ –ö–æ—à–µ–ª—å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {self.wallets_file}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤: {e}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        try:
            with open(self.addresses_file, 'w', encoding='utf-8') as f:
                f.write("# –ê–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å CEX –±–∏—Ä–∂\n")
                f.write("# –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω—è—Ç—å —Ä–∞–∑–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏ –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏\n\n")
                for addr in addresses_for_deposit:
                    f.write(f"{addr}\n")

            print(f"‚úÖ –ê–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {self.addresses_file}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤: {e}")

    def load_wallets(self) -> List[WalletInfo]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤"""
        if not self.wallets_file.exists():
            print("‚ö†Ô∏è –§–∞–π–ª –∫–æ—à–µ–ª—å–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return []

        try:
            with open(self.wallets_file, 'r', encoding='utf-8') as f:
                wallets_data = json.load(f)

            wallets = []
            for data in wallets_data:
                wallet = WalletInfo(
                    index=data["index"],
                    address=data["address"],
                    private_key=data["private_key"],
                    seed_phrase=data["seed_phrase"],
                    balance_sol=data.get("balance_sol", 0.0),
                    reserved_gas=data.get("reserved_gas", 0.02)
                )
                wallet.update_balance(wallet.balance_sol)
                wallets.append(wallet)

            self.wallets = wallets
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(wallets)} –∫–æ—à–µ–ª—å–∫–æ–≤")
            return wallets

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—à–µ–ª—å–∫–æ–≤: {e}")
            return []

    def generate_wallet_config(self, wallets: List[WalletInfo]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ

        Returns:
            str: –°—Ç—Ä–æ–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ .env —Ñ–∞–π–ª
        """
        if not wallets:
            return ""

        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π
        private_keys = [wallet.private_key for wallet in wallets]
        addresses = [wallet.address for wallet in wallets]

        config_lines = [
            "# ================================",
            "# –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ï –ö–û–®–ï–õ–¨–ö–ò –î–õ–Ø –°–ù–ê–ô–ü–ò–ù–ì–ê",
            "# ================================",
            "",
            "# –í–∫–ª—é—á–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤",
            "USE_MULTI_WALLET=true",
            "",
            "# –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –∫–æ—à–µ–ª—å–∫–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)",
            f"MULTI_WALLET_PRIVATE_KEYS={','.join(private_keys)}",
            "",
            "# –ê–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–æ–≤ (–¥–ª—è —Å–ø—Ä–∞–≤–∫–∏)",
            f"MULTI_WALLET_ADDRESSES={','.join(addresses)}",
            "",
            "# –†–µ–∑–µ—Ä–≤ –≥–∞–∑–∞ –Ω–∞ –∫–∞–∂–¥–æ–º –∫–æ—à–µ–ª—å–∫–µ (SOL)",
            "WALLET_GAS_RESERVE=0.02",
            "",
            "# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞",
            "MIN_WALLET_BALANCE=0.05",
            ""
        ]

        return "\n".join(config_lines)

    def create_deposit_instructions(self, wallets: List[WalletInfo], total_budget: float = 20.0):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤"""
        if not wallets:
            return

        instructions_file = self.wallets_dir / "deposit_instructions.md"

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å—É–º–º—ã (—Å —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–µ–π)
        import random

        # –ë–∞–∑–æ–≤–∞—è —Å—É–º–º–∞ –Ω–∞ –∫–æ—à–µ–ª–µ–∫
        base_amount = total_budget / len(wallets)

        # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—É–º–º—ã (80%-120% –æ—Ç –±–∞–∑–æ–≤–æ–π)
        amounts = []
        total_allocated = 0

        for i, wallet in enumerate(wallets[:-1]):  # –í—Å–µ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
            # –°–ª—É—á–∞–π–Ω–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è –æ—Ç –±–∞–∑–æ–≤–æ–π —Å—É–º–º—ã
            variation = random.uniform(0.8, 1.2)
            amount = round(base_amount * variation, 3)
            amounts.append(amount)
            total_allocated += amount

        # –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ—à–µ–ª–µ–∫ –ø–æ–ª—É—á–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫
        last_amount = round(total_budget - total_allocated, 3)
        amounts.append(last_amount)

        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        instructions = [
            "# üí∞ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é –∫–æ—à–µ–ª—å–∫–æ–≤",
            "",
            f"**–û–±—â–∏–π –±—é–¥–∂–µ—Ç:** {total_budget} SOL (~${total_budget * 150:.0f})",
            f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—à–µ–ª—å–∫–æ–≤:** {len(wallets)}",
            "",
            "## üè¶ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é:",
            "",
            "1. **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ CEX –±–∏—Ä–∂–∏** –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤",
            "2. **–ü–æ–ø–æ–ª–Ω—è–π—Ç–µ –≤ —Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è** (–∏–Ω—Ç–µ—Ä–≤–∞–ª—ã 10-30 –º–∏–Ω—É—Ç)",
            "3. **–°—É–º–º—ã –≤–∞—Ä—å–∏—Ä—É—é—Ç—Å—è** –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è",
            "4. **–ù–µ –∫—Ä—É–≥–ª—ã–µ —á–∏—Å–ª–∞** –≤—ã–≥–ª—è–¥—è—Ç –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ",
            "",
            "## üìã –ê–¥—Ä–µ—Å–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å—É–º–º—ã:",
            "",
        ]

        for i, (wallet, amount) in enumerate(zip(wallets, amounts)):
            instructions.extend([
                f"### –ö–æ—à–µ–ª–µ–∫ {i + 1}:",
                f"- **–ê–¥—Ä–µ—Å:** `{wallet.address}`",
                f"- **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—É–º–º–∞:** {amount} SOL",
                f"- **–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏:** ~{amount - 0.02:.3f} SOL (—Å —É—á–µ—Ç–æ–º –≥–∞–∑–∞)",
                ""
            ])

        instructions.extend([
            "## ‚ö° –ü–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
            "",
            "1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–ª–∞–Ω—Å–æ–≤: `python check_wallets.py`",
            "2. –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞",
            "3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—É: `python test_multi_wallet.py`",
            "",
            "## ‚ö†Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:",
            "",
            "- –§–∞–π–ª `generated_wallets.json` —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏!",
            "- –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –µ–≥–æ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º",
            "- –°–¥–µ–ª–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ",
        ])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        try:
            with open(instructions_file, 'w', encoding='utf-8') as f:
                f.write("\n".join(instructions))

            print(f"‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {instructions_file}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: {e}")

    def print_summary(self, wallets: List[WalletInfo]):
        """–ü–µ—á–∞—Ç—å —Å–≤–æ–¥–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤"""
        print("\n" + "=" * 60)
        print("üìä –°–í–û–î–ö–ê –°–û–ó–î–ê–ù–ù–´–• –ö–û–®–ï–õ–¨–ö–û–í")
        print("=" * 60)
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—à–µ–ª—å–∫–æ–≤: {len(wallets)}")
        print(f"–§–∞–π–ª —Å –∫–æ—à–µ–ª—å–∫–∞–º–∏: {self.wallets_file}")
        print(f"–ê–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {self.addresses_file}")
        print()

        print("üîê –ü–ï–†–í–´–ï 3 –ö–û–®–ï–õ–¨–ö–ê (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏):")
        for wallet in wallets[:3]:
            print(f"  {wallet.index}. {wallet.address}")

        if len(wallets) > 3:
            print(f"  ... –∏ –µ—â–µ {len(wallets) - 3} –∫–æ—à–µ–ª—å–∫–æ–≤")

        print()
        print("‚ö†Ô∏è  –í–ê–ñ–ù–û:")
        print("1. –°–¥–µ–ª–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞ generated_wallets.json")
        print("2. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –∫–æ—à–µ–ª—å–∫–∏ —Å —Ä–∞–∑–Ω—ã—Ö CEX –±–∏—Ä–∂")
        print("3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Å—É–º–º—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞")
        print("4. –ù–µ –ø–æ–ø–æ–ª–Ω—è–π—Ç–µ –≤—Å–µ –∫–æ—à–µ–ª—å–∫–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–æ–≤"""
    print("üí∞ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è MORI Sniper")
    print("=" * 60)

    try:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—à–µ–ª—å–∫–æ–≤
        while True:
            try:
                count = int(input("–°–∫–æ–ª—å–∫–æ –∫–æ—à–µ–ª—å–∫–æ–≤ —Å–æ–∑–¥–∞—Ç—å? (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 5-10): "))
                if 1 <= count <= 50:
                    break
                else:
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 50")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±—â–∏–π –±—é–¥–∂–µ—Ç
        while True:
            try:
                budget = float(input("–û–±—â–∏–π –±—é–¥–∂–µ—Ç –≤ SOL? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20): "))
                if budget > 0:
                    break
                else:
                    print("‚ùå –ë—é–¥–∂–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        generator = MultiWalletGenerator()

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—à–µ–ª—å–∫–∏
        wallets = generator.generate_wallets(count)

        if wallets:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            generator.save_wallets(wallets)

            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é
            generator.create_deposit_instructions(wallets, budget)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config = generator.generate_wallet_config(wallets)
            config_file = generator.wallets_dir / "multi_wallet_config.env"
            with open(config_file, 'w', encoding='utf-8') as f:
                f.write(config)
            print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {config_file}")

            # –ü–µ—á–∞—Ç–∞–µ–º —Å–≤–æ–¥–∫—É
            generator.print_summary(wallets)

        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ—à–µ–ª—å–∫–∏")

    except KeyboardInterrupt:
        print("\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()