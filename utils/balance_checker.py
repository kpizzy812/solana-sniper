#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üí∞ MORI Balance Checker - –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å—ã –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é
"""

import os
import sys
import asyncio
from typing import List, Dict, Optional
from decimal import Decimal

from solana.rpc.async_api import AsyncClient
from solana.rpc.commitment import Confirmed
from solders.pubkey import Pubkey
from solders.keypair import Keypair

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ utils
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
from utils.logger import setup_logger
from utils.config import load_config


class QuickBalanceChecker:
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –∫–æ—à–µ–ª—å–∫–æ–≤"""

    def __init__(self):
        self.config = load_config()
        self.logger = setup_logger(__name__)
        self.client = AsyncClient(self.config.SOLANA_RPC_URL)
        self.main_keypair = self._load_main_keypair()
        self.multi_wallets = self._load_multi_wallets()

    def _load_main_keypair(self) -> Optional[Keypair]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ—à–µ–ª–µ–∫"""
        try:
            if hasattr(self.config, 'SOLANA_PRIVATE_KEY') and self.config.SOLANA_PRIVATE_KEY:
                private_key_bytes = bytes(self.config.SOLANA_PRIVATE_KEY)[:32]
                return Keypair.from_bytes(private_key_bytes)
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞: {e}")
        return None

    def _load_multi_wallets(self) -> List[Keypair]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏"""
        wallets = []
        if hasattr(self.config, 'MULTI_WALLET_PRIVATE_KEYS') and self.config.MULTI_WALLET_PRIVATE_KEYS:
            keys = self.config.MULTI_WALLET_PRIVATE_KEYS.split(',')
            for i, key in enumerate(keys):
                key = key.strip()
                if key:
                    try:
                        private_key_bytes = bytes(key)[:32]
                        wallet = Keypair.from_bytes(private_key_bytes)
                        wallets.append(wallet)
                    except Exception as e:
                        self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—à–µ–ª—å–∫–∞ {i + 1}: {e}")
        return wallets

    async def get_sol_balance(self, pubkey: Pubkey) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å SOL –∫–æ—à–µ–ª—å–∫–∞"""
        try:
            response = await self.client.get_balance(pubkey, commitment=Confirmed)
            return response.value / 1e9
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            return 0.0

    async def get_token_balance(self, wallet_pubkey: Pubkey, token_mint: str) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞ –∫–æ—à–µ–ª—å–∫–∞"""
        try:
            token_mint_pubkey = Pubkey.from_string(token_mint)
            response = await self.client.get_token_accounts_by_owner(
                wallet_pubkey,
                {"mint": token_mint_pubkey},
                commitment=Confirmed
            )

            if not response.value:
                return 0.0

            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–æ–≤
            return 1.0 if response.value else 0.0

        except Exception:
            return 0.0

    async def check_all_balances(self, token_contract: Optional[str] = None):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å—ã –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤"""
        print("üí∞ MORI Balance Checker")
        print("=" * 60)

        total_sol = 0.0
        total_token = 0.0

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ—à–µ–ª–µ–∫
        if self.main_keypair:
            sol_balance = await self.get_sol_balance(self.main_keypair.pubkey())
            total_sol += sol_balance

            address = str(self.main_keypair.pubkey())
            print(f"üîë –û—Å–Ω–æ–≤–Ω–æ–π: {address[:8]}...{address[-8:]} | {sol_balance:.4f} SOL")

            if token_contract:
                token_balance = await self.get_token_balance(self.main_keypair.pubkey(), token_contract)
                total_token += token_balance
                print(f"   üíé –¢–æ–∫–µ–Ω–æ–≤: {token_balance:.6f}")

        print("-" * 60)

        # –ú—É–ª—å—Ç–∏-–∫–æ—à–µ–ª—å–∫–∏
        for i, wallet in enumerate(self.multi_wallets):
            sol_balance = await self.get_sol_balance(wallet.pubkey())
            total_sol += sol_balance

            address = str(wallet.pubkey())
            print(f"üí≥ –ö–æ—à–µ–ª–µ–∫ {i + 1}: {address[:8]}...{address[-8:]} | {sol_balance:.4f} SOL")

            if token_contract:
                token_balance = await self.get_token_balance(wallet.pubkey(), token_contract)
                total_token += token_balance
                print(f"   üíé –¢–æ–∫–µ–Ω–æ–≤: {token_balance:.6f}")

        print("=" * 60)
        print(f"üìä –ò–¢–û–ì–û: {total_sol:.4f} SOL")

        if token_contract:
            print(f"üíé –ò–¢–û–ì–û —Ç–æ–∫–µ–Ω–æ–≤: {total_token:.6f}")

        # –†–µ–∑–µ—Ä–≤ –Ω–∞ –≥–∞–∑
        gas_reserve = getattr(self.config, 'WALLET_GAS_RESERVE', 0.01)
        num_wallets = len(self.multi_wallets) + (1 if self.main_keypair else 0)
        total_gas_reserve = gas_reserve * num_wallets

        available_for_trading = total_sol - total_gas_reserve
        print(f"‚õΩ –†–µ–∑–µ—Ä–≤ –Ω–∞ –≥–∞–∑: {total_gas_reserve:.4f} SOL")
        print(f"üíπ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: {available_for_trading:.4f} SOL")

        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        if total_sol < 0.1:
            print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù–∏–∑–∫–∏–π –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å SOL!")

        if available_for_trading < 0.01:
            print("üö® –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏!")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse

    parser = argparse.ArgumentParser(description='–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –∫–æ—à–µ–ª—å–∫–æ–≤ MORI')
    parser.add_argument('--token', '-t', help='–ö–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞')
    parser.add_argument('--watch', '-w', action='store_true', help='–†–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫)')
    parser.add_argument('--interval', '-i', type=int, default=30, help='–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö')

    args = parser.parse_args()

    checker = QuickBalanceChecker()

    if args.watch:
        print(f"üëÄ –†–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ {args.interval} —Å–µ–∫)")
        print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞\n")

        try:
            while True:
                await checker.check_all_balances(args.token)
                print(f"\n‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {args.interval} —Å–µ–∫...\n")
                await asyncio.sleep(args.interval)
        except KeyboardInterrupt:
            print("\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    else:
        await checker.check_all_balances(args.token)


if __name__ == "__main__":
    asyncio.run(main())