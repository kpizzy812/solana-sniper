"""
‚ö° Rate Limiter –¥–ª—è Solana RPC –∏ Jupiter API
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è 59 –∫–æ—à–µ–ª—å–∫–æ–≤ + –ø–ª–∞—Ç–Ω—ã–µ API
"""

import asyncio
import time
from typing import Dict, Optional
from dataclasses import dataclass
from loguru import logger


@dataclass
class RateLimit:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    requests_per_second: float
    max_burst: int = 10  # –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ burst —Ä–µ–∂–∏–º–µ

    def __post_init__(self):
        self.interval = 1.0 / self.requests_per_second
        self.tokens = self.max_burst
        self.last_update = time.time()


class AsyncRateLimiter:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π rate limiter —Å token bucket –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º"""

    def __init__(self, rate_limit: RateLimit):
        self.rate_limit = rate_limit
        self.tokens = rate_limit.max_burst
        self.last_update = time.time()
        self._lock = asyncio.Lock()

    async def acquire(self) -> None:
        """–û–∂–∏–¥–∞–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞"""
        async with self._lock:
            now = time.time()

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—à–µ–¥—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            elapsed = now - self.last_update
            self.tokens = min(
                self.rate_limit.max_burst,
                self.tokens + elapsed / self.rate_limit.interval
            )
            self.last_update = now

            if self.tokens >= 1:
                self.tokens -= 1
                return

            # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            wait_time = self.rate_limit.interval
            logger.debug(f"‚è≥ Rate limit: –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time:.3f}s")
            await asyncio.sleep(wait_time)
            self.tokens = 0


class GlobalRateLimitManager:
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä rate limit–æ–≤ –¥–ª—è –≤—Å–µ—Ö API"""

    def __init__(self):
        self.limiters: Dict[str, AsyncRateLimiter] = {}
        self._setup_limiters()

    def _setup_limiters(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∏–º–∏—Ç–µ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        from config.settings import settings

        # Solana RPC Rate Limiter
        solana_rps = getattr(settings.solana, 'max_rpc_requests_per_second', 45)
        self.limiters['solana_rpc'] = AsyncRateLimiter(
            RateLimit(requests_per_second=solana_rps, max_burst=15)
        )
        logger.info(f"üîÑ Solana RPC Rate Limiter: {solana_rps} req/s")

        # Jupiter API Rate Limiter (—Ç–æ–ª—å–∫–æ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ)
        if not settings.jupiter.api_key or settings.jupiter.use_lite_api:
            self.limiters['jupiter_api'] = AsyncRateLimiter(
                RateLimit(requests_per_second=1.0, max_burst=3)  # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π = 60/min
            )
            logger.info("üîÑ Jupiter API Rate Limiter: 1 req/s (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)")
        else:
            logger.info("üöÄ Jupiter API: –ø–ª–∞—Ç–Ω—ã–π —Ä–µ–∂–∏–º (–±–µ–∑ –ª–∏–º–∏—Ç–æ–≤)")

    async def acquire(self, service: str) -> None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–∏—Å—É"""
        if service in self.limiters:
            await self.limiters[service].acquire()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
rate_limit_manager = GlobalRateLimitManager()


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è rate limiting
def rate_limited(service: str):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è rate limiting –∫ —Ñ—É–Ω–∫—Ü–∏—è–º"""

    def decorator(func):
        async def wrapper(*args, **kwargs):
            await rate_limit_manager.acquire(service)
            return await func(*args, **kwargs)

        return wrapper

    return decorator