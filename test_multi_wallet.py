#!/usr/bin/env python3
"""
üß™ MORI Sniper Bot - –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
"""

import asyncio
import sys
from pathlib import Path

sys.path.append(str(Path(__file__).parent))

from loguru import logger
from config.settings import settings
from config.multi_wallet import MultiWalletConfig
from trading.jupiter import jupiter_trader


class MultiWalletTester:
    def __init__(self):
        self.test_results = {}

    async def run_all_tests(self):
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤")
        logger.info("=" * 60)

        await self.test_multi_wallet_config()
        await self.test_jupiter_integration()
        await self.test_balance_checks()
        await self.test_distribution_logic()

        self.print_summary()

    async def test_multi_wallet_config(self):
        logger.info("‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")

        try:
            config = MultiWalletConfig()

            if not config.is_enabled():
                logger.warning("‚ö†Ô∏è –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
                self.test_results['config'] = False
                return

            if not config.wallets:
                logger.error("‚ùå –ö–æ—à–µ–ª—å–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                self.test_results['config'] = False
                return

            logger.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(config.wallets)} –∫–æ—à–µ–ª—å–∫–æ–≤")
            self.test_results['config'] = True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            self.test_results['config'] = False

    async def test_jupiter_integration(self):
        logger.info("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Jupiter...")

        try:
            success = await jupiter_trader.start()

            if success:
                logger.success("‚úÖ Jupiter —Ç–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")

                health = await jupiter_trader.health_check()
                multi_wallet_status = health.get('components', {}).get('multi_wallet', 'not_found')

                if multi_wallet_status == 'healthy':
                    logger.success("‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞")
                    self.test_results['jupiter_integration'] = True
                elif multi_wallet_status == 'not_found':
                    logger.info("üì± –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏")
                    self.test_results['jupiter_integration'] = True
                else:
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∫–æ—à–µ–ª—å–∫–∞–º–∏: {multi_wallet_status}")
                    self.test_results['jupiter_integration'] = False

                await jupiter_trader.stop()
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Jupiter")
                self.test_results['jupiter_integration'] = False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Jupiter: {e}")
            self.test_results['jupiter_integration'] = False

    async def test_balance_checks(self):
        logger.info("üí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤...")

        try:
            config = MultiWalletConfig()

            if not config.is_enabled():
                self.test_results['balance_checks'] = None
                return

            await jupiter_trader.start()

            if jupiter_trader.multi_wallet_manager:
                await jupiter_trader.multi_wallet_manager.update_all_balances()

                total_balance = config.get_total_available_balance()
                available_wallets = len(config.get_available_wallets())

                logger.info(f"üíé –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance:.4f} SOL")
                logger.info(f"‚úÖ –ì–æ—Ç–æ–≤—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤: {available_wallets}/{len(config.wallets)}")

                self.test_results['balance_checks'] = available_wallets > 0
            else:
                self.test_results['balance_checks'] = False

            await jupiter_trader.stop()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: {e}")
            self.test_results['balance_checks'] = False

    async def test_distribution_logic(self):
        logger.info("üé≤ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è...")

        try:
            config = MultiWalletConfig()

            if not config.is_enabled():
                self.test_results['distribution_logic'] = None
                return

            test_amount = 0.1

            for i in range(3):
                wallet = config.select_wallet_for_trade(test_amount)
                if wallet:
                    logger.info(f"üéØ –¢–µ—Å—Ç {i + 1}: –í—ã–±—Ä–∞–Ω –∫–æ—à–µ–ª–µ–∫ {wallet.index}")
                else:
                    logger.warning(f"‚ö†Ô∏è –¢–µ—Å—Ç {i + 1}: –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ—à–µ–ª–µ–∫")

            # –¢–µ—Å—Ç —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏
            base_amount = 0.1
            for i in range(3):
                randomized = config.randomize_trade_amount(base_amount)
                variation = ((randomized - base_amount) / base_amount) * 100
                logger.info(f"üí∞ {base_amount} SOL ‚Üí {randomized:.4f} SOL ({variation:+.1f}%)")

            logger.success("‚úÖ –õ–æ–≥–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
            self.test_results['distribution_logic'] = True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {e}")
            self.test_results['distribution_logic'] = False

    def print_summary(self):
        logger.info("\n" + "=" * 60)
        logger.info("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        logger.info("=" * 60)

        total_tests = 0
        passed_tests = 0

        for test_name, result in self.test_results.items():
            if result is None:
                status = "‚è≠Ô∏è –ü–†–û–ü–£–©–ï–ù"
            elif result:
                status = "‚úÖ –ü–†–û–ô–î–ï–ù"
                passed_tests += 1
                total_tests += 1
            else:
                status = "‚ùå –ü–†–û–í–ê–õ–ï–ù"
                total_tests += 1

            logger.info(f"{test_name.replace('_', ' ').title():<25} {status}")

        if passed_tests == total_tests and total_tests > 0:
            logger.success(f"üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ ({passed_tests}/{total_tests})")
        elif total_tests == 0:
            logger.warning("‚ö†Ô∏è –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã - —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
        else:
            logger.warning(f"‚ö†Ô∏è –¢–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —á–∞—Å—Ç–∏—á–Ω–æ ({passed_tests}/{total_tests})")


async def main():
    tester = MultiWalletTester()
    await tester.run_all_tests()


if __name__ == "__main__":
    asyncio.run(main())