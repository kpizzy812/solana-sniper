#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∞–π—Ç–∞ MORICO.IN
–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ö–æ–¥–∞ Cloudflare –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏
"""

import asyncio
import sys
import time
from pathlib import Path

sys.path.append(str(Path(__file__).parent))

from loguru import logger
from monitors.morico_monitor import morico_monitor
from monitors.cloudflare_bypass import cloudflare_bypass


class MoricoMonitorTester:
    """–¢–µ—Å—Ç–µ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ MORICO"""

    def __init__(self):
        self.test_results = {}
        self.received_signals = []

    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ MORICO –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ MORICO.IN")
        logger.info("=" * 60)

        # –¢–µ—Å—Ç Cloudflare bypass
        await self.test_cloudflare_bypass()

        # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∞–π—Ç—É
        await self.test_site_access()

        # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–Ω–æ–ø–∫–∏
        await self.test_button_analysis()

        # –¢–µ—Å—Ç –∂–∏–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if self.test_results.get('site_access', False):
            await self.test_live_monitoring()

        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.print_summary()

    async def test_cloudflare_bypass(self):
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ–±—Ö–æ–¥–∞ Cloudflare"""
        logger.info("üõ°Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Cloudflare bypass...")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã
            logger.info("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–±—Ö–æ–¥–∞:")

            try:
                import cloudscraper
                logger.info("   ‚úÖ CloudScraper –¥–æ—Å—Ç—É–ø–µ–Ω")
            except ImportError:
                logger.warning("   ‚ö†Ô∏è CloudScraper –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install cloudscraper)")

            try:
                from playwright.async_api import async_playwright
                logger.info("   ‚úÖ Playwright –¥–æ—Å—Ç—É–ø–µ–Ω")
            except ImportError:
                logger.warning("   ‚ö†Ô∏è Playwright –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install playwright)")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º bypass
            await cloudflare_bypass.start()
            logger.info(f"üîß –í—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥: {cloudflare_bypass.method}")

            self.test_results['cloudflare_bypass'] = True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Cloudflare bypass: {e}")
            self.test_results['cloudflare_bypass'] = False

    async def test_site_access(self):
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∞–π—Ç—É MORICO"""
        logger.info("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ MORICO.IN...")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º health check
            health = await cloudflare_bypass.health_check("https://morico.in/")

            logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:")
            logger.info(f"   –°—Ç–∞—Ç—É—Å: {health['status']}")
            logger.info(f"   –ú–µ—Ç–æ–¥: {health['method']}")
            logger.info(f"   –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {health.get('response_time_ms', 0):.0f}ms")
            logger.info(f"   –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {health.get('content_size', 0)} —Å–∏–º–≤–æ–ª–æ–≤")

            if health['status'] == 'working':
                logger.success("‚úÖ –î–æ—Å—Ç—É–ø –∫ MORICO.IN –ø–æ–ª—É—á–µ–Ω")
                self.test_results['site_access'] = True
            elif health['status'] == 'blocked':
                logger.warning("‚ö†Ô∏è Cloudflare –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞")
                self.test_results['site_access'] = False
            else:
                logger.error("‚ùå –î–æ—Å—Ç—É–ø –∫ MORICO.IN –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                self.test_results['site_access'] = False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞: {e}")
            self.test_results['site_access'] = False

    async def test_button_analysis(self):
        """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏"""
        logger.info("üîò –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–Ω–æ–ø–∫–∏...")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å–∞–π—Ç–∞
            content = await cloudflare_bypass.get_page_content("https://morico.in/")

            if not content:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                self.test_results['button_analysis'] = False
                return

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
            button_state = morico_monitor.analyze_button_state(content)

            logger.info(f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏:")
            logger.info(f"   –ê–∫—Ç–∏–≤–Ω–∞: {button_state.is_active}")
            logger.info(f"   –¢–µ–∫—Å—Ç: '{button_state.button_text}'")
            logger.info(f"   URL: {button_state.button_url}")
            logger.info(f"   –°–µ–ª–µ–∫—Ç–æ—Ä: {button_state.button_selector}")
            logger.info(f"   –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã: {button_state.contracts_found}")

            if button_state.button_text:
                logger.success("‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞")
                if button_state.is_active:
                    logger.critical("üö® –ö–ù–û–ü–ö–ê –£–ñ–ï –ê–ö–¢–ò–í–ù–ê!")
                    if button_state.contracts_found:
                        logger.critical(f"üéØ –ö–û–ù–¢–†–ê–ö–¢–´ –£–ñ–ï –î–û–°–¢–£–ü–ù–´: {button_state.contracts_found}")
                else:
                    logger.info("‚è∏Ô∏è –ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ (–æ–∂–∏–¥–∞–µ–º–æ)")

                self.test_results['button_analysis'] = True
            else:
                logger.warning("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")
                self.test_results['button_analysis'] = False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∫–Ω–æ–ø–∫–∏: {e}")
            self.test_results['button_analysis'] = False

    async def test_live_monitoring(self):
        """–¢–µ—Å—Ç –∂–∏–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("üëÅÔ∏è –¢–µ—Å—Ç –∂–∏–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")

        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π callback
            original_callback = morico_monitor.trading_callback
            morico_monitor.trading_callback = self.test_trading_callback

            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä
            if await morico_monitor.start():
                logger.success("‚úÖ MORICO –º–æ–Ω–∏—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω")

                logger.critical("üö® –ú–û–ù–ò–¢–û–†–ò–ù–ì –ê–ö–¢–ò–í–ï–ù!")
                logger.info("‚è±Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞ 30 —Å–µ–∫—É–Ω–¥...")
                logger.info("üí° –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞, —Å–∏–≥–Ω–∞–ª –ø—Ä–∏–¥–µ—Ç —Å—Ä–∞–∑—É")

                start_time = time.time()
                monitoring_duration = 30

                while time.time() - start_time < monitoring_duration:
                    await asyncio.sleep(1)

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    elapsed = int(time.time() - start_time)
                    if elapsed % 10 == 0 and elapsed > 0:
                        remaining = monitoring_duration - elapsed
                        stats = morico_monitor.get_stats()
                        logger.info(
                            f"‚è±Ô∏è –û—Å—Ç–∞–ª–æ—Å—å {remaining}s | –ø—Ä–æ–≤–µ—Ä–æ–∫: {stats['checks_performed']} | —Å–∏–≥–Ω–∞–ª–æ–≤: {len(self.received_signals)}")

                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä
                await morico_monitor.stop()

                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback
                morico_monitor.trading_callback = original_callback

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if self.received_signals:
                    logger.critical(f"üö® –ü–û–õ–£–ß–ï–ù–û {len(self.received_signals)} –¢–û–†–ì–û–í–´–• –°–ò–ì–ù–ê–õ–û–í!")
                    for i, signal in enumerate(self.received_signals):
                        logger.info(f"   –°–∏–≥–Ω–∞–ª {i + 1}: {signal.get('contracts', [])}")
                    self.test_results['live_monitoring'] = True
                else:
                    logger.info("üìÑ –¢–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ (–∫–Ω–æ–ø–∫–∞ –µ—â–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞)")
                    self.test_results['live_monitoring'] = None  # –ù–µ –ø—Ä–æ–≤–∞–ª

            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å MORICO –º–æ–Ω–∏—Ç–æ—Ä")
                self.test_results['live_monitoring'] = False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∂–∏–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            self.test_results['live_monitoring'] = False

    async def test_trading_callback(self, signal_data: dict):
        """–¢–µ—Å—Ç–æ–≤—ã–π callback –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            logger.critical("üö® –ü–û–õ–£–ß–ï–ù –¢–û–†–ì–û–í–´–ô –°–ò–ì–ù–ê–õ –û–¢ MORICO!")
            logger.info(f"üéØ –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã: {signal_data.get('contracts', [])}")
            logger.info(f"üì± –ò—Å—Ç–æ—á–Ω–∏–∫: {signal_data.get('source', 'unknown')}")
            logger.info(f"üîò –ö–Ω–æ–ø–∫–∞: {signal_data.get('button_info', {}).get('text', 'unknown')}")

            self.received_signals.append(signal_data)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º callback: {e}")

    def print_summary(self):
        """–ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
        logger.info("\n" + "=" * 60)
        logger.info("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø MORICO –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
        logger.info("=" * 60)

        total_tests = 0
        passed_tests = 0

        for test_name, result in self.test_results.items():
            if result is None:
                status = "‚è≠Ô∏è –ü–†–û–ü–£–©–ï–ù"
            elif result:
                status = "‚úÖ –ü–†–û–ô–î–ï–ù"
                passed_tests += 1
                total_tests += 1
            else:
                status = "‚ùå –ü–†–û–í–ê–õ–ï–ù"
                total_tests += 1

            logger.info(f"{test_name.replace('_', ' ').title():<25} {status}")

        logger.info("=" * 60)

        if passed_tests == total_tests and total_tests > 0:
            logger.success(f"üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ ({passed_tests}/{total_tests})")
            logger.success("üöÄ MORICO –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        elif total_tests == 0:
            logger.warning("‚ö†Ô∏è –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã")
        else:
            logger.warning(f"‚ö†Ô∏è –¢–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —á–∞—Å—Ç–∏—á–Ω–æ ({passed_tests}/{total_tests})")

        logger.info("\nüí° –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        logger.info("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: pip install cloudscraper playwright")
        logger.info("2. –î–æ–±–∞–≤—å—Ç–µ –≤ main.py –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é MORICO –º–æ–Ω–∏—Ç–æ—Ä–∞")
        logger.info("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω—ã–π –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏")

        if self.received_signals:
            logger.critical(f"\nüö® –í–ê–ñ–ù–û: –ü–æ–ª—É—á–µ–Ω–æ {len(self.received_signals)} —Å–∏–≥–Ω–∞–ª–æ–≤!")
            logger.critical("–í–æ–∑–º–æ–∂–Ω–æ –∫–Ω–æ–ø–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞!")

    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            await cloudflare_bypass.stop()
        except:
            pass


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ MORICO.IN")
    print("=" * 50)

    tester = MoricoMonitorTester()

    try:
        await tester.run_all_tests()
    except KeyboardInterrupt:
        logger.info("‚ùå –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    finally:
        await tester.cleanup()


if __name__ == "__main__":
    asyncio.run(main())