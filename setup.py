#!/usr/bin/env python3
"""
üéØ MORI Sniper Bot Setup Script
–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É
"""

import subprocess
import sys
import os
import shutil
from pathlib import Path


def print_header():
    """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    print("üéØ MORI Token Sniper Bot - –£—Å—Ç–∞–Ω–æ–≤–∫–∞")
    print("=" * 50)
    print()


def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    print("üêç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python...")

    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        print(f"   –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {version.major}.{version.minor}.{version.micro}")
        return False

    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} –ø–æ–¥—Ö–æ–¥–∏—Ç")
    return True


def install_package(package, description=""):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–∞"""
    try:
        print(f"üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º {package}...")
        if description:
            print(f"   {description}")

        subprocess.check_call([
            sys.executable, "-m", "pip", "install", package, "--upgrade"
        ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

        print(f"‚úÖ {package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True
    except subprocess.CalledProcessError:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package}")
        return False


def create_directories():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    print("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")

    directories = ['logs', 'data', 'sessions']

    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
        print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {directory} —Å–æ–∑–¥–∞–Ω–∞")


def setup_env_file():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ .env —Ñ–∞–π–ª–∞"""
    print("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")

    if not Path('.env').exists():
        if Path('.env.example').exists():
            shutil.copy('.env.example', '.env')
            print("‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω –∏–∑ .env.example")
            print("‚ö†Ô∏è –í–ê–ñ–ù–û: –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
        else:
            print("‚ùå –§–∞–π–ª .env.example –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    else:
        print("‚úÖ –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    return True


def install_dependencies():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    print()

    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
    core_packages = [
        ("wheel", "–û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"),
        ("setuptools", "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å–±–æ—Ä–∫–∏"),
        ("pip>=23.0", "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–∫–µ—Ç–æ–≤"),
    ]

    print("1Ô∏è‚É£ –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:")
    for package, desc in core_packages:
        install_package(package, desc)
    print()

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏
    async_packages = [
        ("aiohttp>=3.8.0", "HTTP –∫–ª–∏–µ–Ω—Ç/—Å–µ—Ä–≤–µ—Ä"),
        ("aiofiles>=23.0.0", "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏"),
        ("asyncio", "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"),
    ]

    print("2Ô∏è‚É£ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:")
    for package, desc in async_packages:
        install_package(package, desc)
    print()

    # Solana –∏ –±–ª–æ–∫—á–µ–π–Ω
    blockchain_packages = [
        ("solana>=0.30.0", "Solana Python SDK"),
        ("base58>=2.1.0", "Base58 –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ"),
        ("solders>=0.20.0", "Rust-based Solana tools"),
    ]

    print("3Ô∏è‚É£ Solana –±–ª–æ–∫—á–µ–π–Ω:")
    for package, desc in blockchain_packages:
        install_package(package, desc)
    print()

    # Telegram API
    telegram_packages = [
        ("telethon>=1.34.0", "Telegram User Bot (–†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø)"),
        ("python-telegram-bot>=20.0", "Telegram Bot API (—Ä–µ–∑–µ—Ä–≤)"),
    ]

    print("4Ô∏è‚É£ Telegram API:")
    for package, desc in telegram_packages:
        install_package(package, desc)
    print()

    # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
    social_packages = [
        ("tweepy>=4.12.0", "Twitter API"),
        ("beautifulsoup4>=4.11.0", "–ü–∞—Ä—Å–∏–Ω–≥ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü"),
        ("lxml>=4.9.0", "XML/HTML –ø–∞—Ä—Å–µ—Ä"),
    ]

    print("5Ô∏è‚É£ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –∏ –≤–µ–±:")
    for package, desc in social_packages:
        install_package(package, desc)
    print()

    # –£—Ç–∏–ª–∏—Ç—ã
    utility_packages = [
        ("python-dotenv>=1.0.0", "–ó–∞–≥—Ä—É–∑–∫–∞ .env —Ñ–∞–π–ª–æ–≤"),
        ("loguru>=0.7.0", "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"),
        ("requests>=2.28.0", "HTTP –∑–∞–ø—Ä–æ—Å—ã"),
        ("psutil>=5.9.0", "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã"),
    ]

    print("6Ô∏è‚É£ –£—Ç–∏–ª–∏—Ç—ã:")
    for package, desc in utility_packages:
        install_package(package, desc)
    print()

    # –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    crypto_packages = [
        ("mnemonic>=0.20", "–†–∞–±–æ—Ç–∞ —Å seed phrases"),
        ("cryptography>=3.4.0", "–ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"),
    ]

    print("7Ô∏è‚É£ –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è:")
    for package, desc in crypto_packages:
        install_package(package, desc)
    print()

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ AI –ø–∞–∫–µ—Ç—ã
    print("8Ô∏è‚É£ AI –∞–Ω–∞–ª–∏–∑ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):")
    ai_packages = [
        ("openai>=1.3.0", "OpenAI GPT API"),
    ]

    for package, desc in ai_packages:
        response = input(f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {package} ({desc})? [y/N]: ").lower()
        if response in ['y', 'yes', '–¥–∞']:
            install_package(package, desc)
        else:
            print(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {package}")
    print()

    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (Linux/Mac)
    if sys.platform in ['linux', 'darwin']:
        print("9Ô∏è‚É£ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
        perf_packages = [
            ("uvloop>=0.19.0", "–ë—ã—Å—Ç—Ä—ã–π event loop"),
        ]

        for package, desc in perf_packages:
            install_package(package, desc)
    print()


def run_tests():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...")

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
        result = subprocess.run([
            sys.executable, "-c",
            "import config.settings; import ai.analyzer; import trading.jupiter; print('‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è')"
        ], capture_output=True, text=True)

        if result.returncode == 0:
            print("‚úÖ –ë–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤:")
            print(result.stderr)
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

    return True


def print_next_steps():
    """–ü–µ—á–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤"""
    print()
    print("üéâ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("=" * 50)
    print()
    print("üìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print()
    print("1Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ .env —Ñ–∞–π–ª:")
    print("   nano .env")
    print()
    print("2Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ Telegram API –∫–ª—é—á–∏:")
    print("   https://my.telegram.org/apps")
    print()
    print("3Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Solana –∫–æ—à–µ–ª–µ–∫:")
    print("   - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ Phantom")
    print("   - –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ seed phrase")
    print()
    print("4Ô∏è‚É£ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—É:")
    print("   python test_telegram_user.py")
    print("   python test_sniper.py")
    print()
    print("5Ô∏è‚É£ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞:")
    print("   python main.py")
    print()
    print("üìö –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø:")
    print("   - README.md - –ø–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ")
    print("   - config_examples.md - –ø—Ä–∏–º–µ—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    print()
    print("‚ö†Ô∏è –í–ê–ñ–ù–´–ï –ó–ê–ú–ï–ß–ê–ù–ò–Ø:")
    print("   - –ù–∞—á–Ω–∏—Ç–µ —Å devnet –¥–ª—è —Ç–µ—Å—Ç–æ–≤")
    print("   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞–ª—ã–µ —Å—É–º–º—ã —Å–Ω–∞—á–∞–ª–∞")
    print("   - User Bot –±—ã—Å—Ç—Ä–µ–µ Bot API")
    print("   - –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ª–æ–≥–∏")
    print()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print_header()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
    if not check_python_version():
        sys.exit(1)
    print()

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    create_directories()
    print()

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    install_dependencies()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    setup_env_file()
    print()

    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if run_tests():
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    print()

    # –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
    print_next_steps()


if __name__ == "__main__":
    main()