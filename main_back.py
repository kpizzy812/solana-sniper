#!/usr/bin/env python3
"""
üéØ MORI Token Sniper Bot
Ultra-fast social media monitoring and trading system

Features:
- 1-second monitoring of Telegram, Twitter, websites
- Instant regex + optional AI analysis
- Concurrent Jupiter trading (10 purchases simultaneously)
- Security checks and risk management
"""

import asyncio
import signal
import sys
import time
import os
from typing import Dict, List, Set
from datetime import datetime

# Setup faster event loop on Linux/Mac
try:
    import uvloop
    uvloop.install()
except ImportError:
    pass

from loguru import logger
from config.settings import settings
from ai.analyzer import analyzer

# ================================
# –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ò–ú–ü–û–†–¢–´ –ú–û–ù–ò–¢–û–†–û–í
# ================================
from monitors.telegram import telegram_monitor, TELEGRAM_BOT_AVAILABLE
from monitors.telegram_user import telegram_user_monitor, TELETHON_AVAILABLE
from monitors.twitter import twitter_monitor
from monitors.website import website_monitor
from trading.jupiter import jupiter_trader

# ================================
# –°–ò–°–¢–ï–ú–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø
# ================================
try:
    from optimizer import run_system_optimization
except ImportError:
    # Fallback if optimizer module is not available
    async def run_system_optimization():
        return True


class MoriSniperBot:
    """Main sniper bot orchestrator"""

    def __init__(self):
        self.running = False
        self.start_time = None
        self.monitors = {}
        self.stats = {
            'posts_analyzed': 0,
            'contracts_detected': 0,
            'trades_executed': 0,
            'total_sol_spent': 0,
            'uptime_seconds': 0
        }

        # Setup logging
        self.setup_logging()

        # Setup signal handlers for graceful shutdown
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)

    def setup_logging(self):
        """Configure logging system"""
        logger.remove()  # Remove default handler

        # Console logging with colors
        logger.add(
            sys.stdout,
            level=settings.logging.level,
            format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan> | {message}",
            colorize=True
        )

        # File logging
        logger.add(
            settings.logging.file_path,
            level="DEBUG",
            format=settings.logging.format,
            rotation=settings.logging.max_size,
            retention=settings.logging.retention,
            compression="zip"
        )

    async def start(self):
        """Start the sniper bot"""
        logger.info("üéØ Starting MORI Sniper Bot...")
        logger.info(f"Network: {settings.solana.network}")
        logger.info(f"Trade settings: {settings.trading.num_purchases}x {settings.trading.trade_amount_sol} SOL")
        logger.info(
            f"Total investment per signal: {settings.trading.num_purchases * settings.trading.trade_amount_sol} SOL")

        try:
            # Validate configuration
            settings.validate()
            logger.success("‚úÖ Configuration validated")

            # Initialize components
            await self.initialize_components()

            # Start monitoring
            await self.start_monitoring()

            # Set running state
            self.running = True
            self.start_time = time.time()

            logger.critical("üö® SNIPER BOT ACTIVE - Monitoring for contracts...")
            logger.info("Press Ctrl+C to stop")

            # Main loop
            await self.main_loop()

        except Exception as e:
            logger.error(f"Failed to start sniper bot: {e}")
            await self.stop()

    async def initialize_components(self):
        """Initialize all bot components"""
        logger.info("Initializing components...")

        # Initialize AI analyzer
        if await analyzer.health_check():
            logger.success("‚úÖ AI Analyzer ready")
        else:
            logger.warning("‚ö†Ô∏è AI Analyzer issues detected")

        # Initialize trading system
        if await jupiter_trader.start():
            logger.success("‚úÖ Jupiter Trader ready")
        else:
            logger.error("‚ùå Jupiter Trader failed to start")
            raise Exception("Trading system initialization failed")

        # ================================
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê TELEGRAM –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê
        # ================================
        await self.initialize_telegram_monitors()

        # Initialize Twitter monitor
        if settings.monitoring.twitter_bearer_token:
            twitter_monitor.trading_callback = self.handle_trading_signal
            if await twitter_monitor.start():
                logger.success("‚úÖ Twitter Monitor ready")
                self.monitors['twitter'] = twitter_monitor
            else:
                logger.warning("‚ö†Ô∏è Twitter Monitor not available")
        else:
            logger.info("‚è≠Ô∏è Twitter token not configured, skipping Twitter monitor")

        # Initialize Website monitor
        if settings.monitoring.website_urls and any(settings.monitoring.website_urls):
            website_monitor.trading_callback = self.handle_trading_signal
            if await website_monitor.start():
                logger.success("‚úÖ Website Monitor ready")
                self.monitors['website'] = website_monitor
            else:
                logger.warning("‚ö†Ô∏è Website Monitor not available")
        else:
            logger.info("‚è≠Ô∏è Website URLs not configured, skipping Website monitor")

        logger.success(f"‚úÖ {len(self.monitors)} monitors initialized")

    async def initialize_telegram_monitors(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –º–æ–Ω–∏—Ç–æ—Ä–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –≤—ã–±–æ—Ä–∞"""
        logger.critical("üîç –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø TELEGRAM –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê...")

        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        logger.info(f"üì± USE_TELEGRAM_USER_BOT: {settings.monitoring.use_user_bot}")
        logger.info(f"ü§ñ USE_TELEGRAM_BOT_API: {settings.monitoring.use_bot_api}")
        logger.info(f"üìö Telethon –¥–æ—Å—Ç—É–ø–µ–Ω: {TELETHON_AVAILABLE}")
        logger.info(f"üîß Bot API –¥–æ—Å—Ç—É–ø–µ–Ω: {TELEGRAM_BOT_AVAILABLE}")

        telegram_monitor_started = False

        # ================================
        # 1. –ü–†–ò–û–†–ò–¢–ï–¢: USER BOT (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        # ================================
        if settings.monitoring.use_user_bot:
            logger.critical("üéØ –ü–û–ü–´–¢–ö–ê –ó–ê–ü–£–°–ö–ê USER BOT...")

            if not TELETHON_AVAILABLE:
                logger.error("‚ùå Telethon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! User Bot –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                logger.error("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install telethon")
            elif not telegram_user_monitor:
                logger.error("‚ùå User Bot –º–æ–Ω–∏—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            elif not settings.monitoring.telegram_api_id or not settings.monitoring.telegram_api_hash:
                logger.error("‚ùå User Bot –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –ø–æ–ª–Ω—ã–µ (–Ω–µ—Ç API_ID/API_HASH)")
            else:
                # –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å User Bot
                telegram_user_monitor.trading_callback = self.handle_trading_signal

                try:
                    if await telegram_user_monitor.start():
                        logger.critical("üéâ USER BOT –ó–ê–ü–£–©–ï–ù –£–°–ü–ï–®–ù–û!")
                        self.monitors['telegram_user'] = telegram_user_monitor
                        telegram_monitor_started = True
                    else:
                        logger.error("‚ùå User Bot –Ω–µ —Å–º–æ–≥ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ User Bot: {e}")

        # ================================
        # 2. –†–ï–ó–ï–†–í: BOT API (–µ—Å–ª–∏ User Bot –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ Bot API –≤–∫–ª—é—á–µ–Ω)
        # ================================
        if not telegram_monitor_started and settings.monitoring.use_bot_api:
            logger.warning("üîÑ User Bot –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º Bot API...")

            if not TELEGRAM_BOT_AVAILABLE:
                logger.error("‚ùå python-telegram-bot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! Bot API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                logger.error("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-telegram-bot")
            elif not telegram_monitor:
                logger.error("‚ùå Bot API –º–æ–Ω–∏—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            elif not settings.monitoring.telegram_bot_token:
                logger.error("‚ùå Bot API —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            else:
                # –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å Bot API
                telegram_monitor.trading_callback = self.handle_trading_signal

                try:
                    if await telegram_monitor.start():
                        logger.warning("‚ö†Ô∏è BOT API –ó–ê–ü–£–©–ï–ù (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ä–µ–∂–∏–º)")
                        logger.warning("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: Bot API –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≥–¥–µ –±–æ—Ç —É–ø–æ–º—è–Ω—É—Ç!")
                        self.monitors['telegram_bot'] = telegram_monitor
                        telegram_monitor_started = True
                    else:
                        logger.error("‚ùå Bot API –Ω–µ —Å–º–æ–≥ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Bot API: {e}")

        # ================================
        # –†–ï–ó–£–õ–¨–¢–ê–¢ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò TELEGRAM
        # ================================
        if telegram_monitor_started:
            if 'telegram_user' in self.monitors:
                logger.critical("‚úÖ TELEGRAM USER BOT –ê–ö–¢–ò–í–ï–ù - –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º!")
            elif 'telegram_bot' in self.monitors:
                logger.warning("‚ö†Ô∏è TELEGRAM BOT API –ê–ö–¢–ò–í–ï–ù - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º")
        else:
            logger.error("‚ùå –ù–ò –û–î–ò–ù TELEGRAM –ú–û–ù–ò–¢–û–† –ù–ï –ó–ê–ü–£–©–ï–ù!")
            logger.error("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏")

    async def start_monitoring(self):
        """Start all monitoring systems"""
        logger.info("Starting monitoring systems...")

        # Monitors are already started in initialize_components
        # This method can be used for additional monitoring setup

        logger.success("üîç All monitors active")

    async def main_loop(self):
        """Main event loop"""
        while self.running:
            try:
                # Update uptime
                self.stats['uptime_seconds'] = int(time.time() - self.start_time)

                # Health checks every minute
                if self.stats['uptime_seconds'] % 60 == 0:
                    await self.health_check()

                # Status update every 5 minutes
                if self.stats['uptime_seconds'] % 300 == 0:
                    self.log_status()

                await asyncio.sleep(1)

            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"Error in main loop: {e}")
                await asyncio.sleep(5)

    async def handle_trading_signal(self, signal_data: Dict):
        """Handle trading signal from monitors - –û–ë–ù–û–í–õ–ï–ù –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤"""
        try:
            logger.critical("üö® TRADING SIGNAL RECEIVED")
            logger.info(f"Platform: {signal_data['platform']}")
            logger.info(f"Source: {signal_data['source']}")
            logger.info(f"Contracts: {signal_data['contracts']}")
            logger.info(f"Confidence: {signal_data['confidence']:.2f}")

            # Update stats
            self.stats['contracts_detected'] += 1

            # Execute trades for each detected contract
            for contract_address in signal_data['contracts']:
                logger.critical(f"üéØ EXECUTING SNIPER TRADES FOR: {contract_address}")

                # –û–ë–ù–û–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏ (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π)
                if (hasattr(jupiter_trader, 'multi_wallet_manager') and
                        jupiter_trader.multi_wallet_manager and
                        hasattr(jupiter_trader, 'multi_wallet_config') and
                        jupiter_trader.multi_wallet_config.is_enabled()):

                    logger.critical("üé≠ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ï –ö–û–®–ï–õ–¨–ö–ò")

                    # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç MultiWalletTradeResult
                    multi_result = await jupiter_trader.multi_wallet_manager.execute_multi_wallet_trades(
                        token_address=contract_address,
                        base_trade_amount=settings.trading.trade_amount_sol,
                        num_trades=settings.trading.num_purchases,
                        source_info=signal_data
                    )

                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    trade_results = []
                    for wallet_address, trade_result in multi_result.wallet_results:
                        trade_results.append(trade_result)

                    successful_trades = multi_result.successful_trades
                    total_sol_spent = multi_result.total_sol_spent

                else:
                    logger.info("üì± –ò–°–ü–û–õ–¨–ó–£–ï–ú –°–¢–ê–ù–î–ê–†–¢–ù–´–ô –ö–û–®–ï–õ–ï–ö")

                    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è
                    trade_results = await jupiter_trader.execute_sniper_trades(
                        token_address=contract_address,
                        source_info=signal_data
                    )

                    successful_trades = sum(1 for result in trade_results if result.success)
                    total_sol_spent = successful_trades * settings.trading.trade_amount_sol

                # Update stats
                self.stats['trades_executed'] += len(trade_results)
                self.stats['total_sol_spent'] += total_sol_spent

                # Log results summary
                self.log_trade_results(contract_address, trade_results, signal_data)

        except Exception as e:
            logger.error(f"Error handling trading signal: {e}")

    def log_trade_results(self, contract_address: str, results: List, signal_data: Dict):
        """Log detailed trading results"""
        successful = [r for r in results if r.success]
        failed = [r for r in results if not r.success]

        logger.critical("üìä TRADE RESULTS SUMMARY:")
        logger.info(f"  Contract: {contract_address}")
        logger.info(f"  Source: {signal_data['platform']} - {signal_data['source']}")
        logger.info(f"  Successful: {len(successful)}/{len(results)}")
        logger.info(f"  SOL Spent: {len(successful) * settings.trading.trade_amount_sol}")

        if successful:
            avg_time = sum(r.execution_time_ms for r in successful) / len(successful)
            logger.info(f"  Avg Execution Time: {avg_time:.0f}ms")

            # Log signatures for successful trades
            logger.info("  Signatures:")
            for i, result in enumerate(successful):
                logger.info(f"    {i + 1}. {result.signature}")

        if failed:
            logger.warning(f"  Failed trades: {len(failed)}")
            for result in failed:
                if result.error:
                    logger.warning(f"    Trade {result.trade_index + 1}: {result.error}")

    async def health_check(self):
        """Perform health checks on all components"""
        try:
            # Check trading system
            trader_health = await jupiter_trader.health_check()

            # Check monitors
            monitor_health = {}
            for name, monitor in self.monitors.items():
                monitor_health[name] = await monitor.health_check()

            # Log health status
            if trader_health.get('status') == 'healthy':
                logger.debug("üü¢ Trading system healthy")
            else:
                logger.warning(f"üü° Trading system: {trader_health.get('status')}")

            for name, health in monitor_health.items():
                status = health.get('status', 'unknown')
                if status == 'healthy':
                    logger.debug(f"üü¢ {name.title()} monitor healthy")
                else:
                    logger.warning(f"üü° {name.title()} monitor: {status}")

        except Exception as e:
            logger.error(f"Health check failed: {e}")

    def log_status(self):
        """Log current bot status"""
        uptime_minutes = self.stats['uptime_seconds'] // 60
        logger.info(f"üìà STATUS UPDATE - Uptime: {uptime_minutes} minutes")
        logger.info(f"  Posts analyzed: {self.stats['posts_analyzed']}")
        logger.info(f"  Contracts detected: {self.stats['contracts_detected']}")
        logger.info(f"  Trades executed: {self.stats['trades_executed']}")
        logger.info(f"  Total SOL spent: {self.stats['total_sol_spent']}")

        if self.stats['contracts_detected'] > 0:
            success_rate = (self.stats['trades_executed'] / (
                    self.stats['contracts_detected'] * settings.trading.num_purchases)) * 100
            logger.info(f"  Trade success rate: {success_rate:.1f}%")

    async def stop(self):
        """Stop the sniper bot gracefully"""
        logger.info("üõë Stopping sniper bot...")
        self.running = False

        # Stop all monitors
        for name, monitor in self.monitors.items():
            try:
                await monitor.stop()
                logger.info(f"‚úÖ {name.title()} monitor stopped")
            except Exception as e:
                logger.error(f"Error stopping {name} monitor: {e}")

        # Stop trading system
        try:
            await jupiter_trader.stop()
            logger.info("‚úÖ Trading system stopped")
        except Exception as e:
            logger.error(f"Error stopping trading system: {e}")

        # Final stats
        if self.start_time:
            total_uptime = int(time.time() - self.start_time)
            logger.info(f"üìä FINAL STATS - Uptime: {total_uptime // 60} minutes")
            logger.info(f"  Total posts analyzed: {self.stats['posts_analyzed']}")
            logger.info(f"  Total contracts detected: {self.stats['contracts_detected']}")
            logger.info(f"  Total trades executed: {self.stats['trades_executed']}")
            logger.info(f"  Total SOL spent: {self.stats['total_sol_spent']}")

        logger.success("üéØ Sniper bot stopped successfully")

    def signal_handler(self, signum, frame):
        """Handle shutdown signals"""
        logger.info(f"Received signal {signum}, shutting down...")
        asyncio.create_task(self.stop())


async def main():
    """Main entry point"""
    print("üéØ MORI Token Sniper Bot")
    print("=" * 50)

    # System optimization (performance enhancement)
    await run_system_optimization()

    # Create and start bot
    bot = MoriSniperBot()

    try:
        await bot.start()
    except KeyboardInterrupt:
        logger.info("Shutdown requested by user")
    except Exception as e:
        logger.error(f"Bot crashed: {e}")
    finally:
        await bot.stop()


if __name__ == "__main__":
    # Run the bot
    asyncio.run(main())