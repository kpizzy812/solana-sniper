#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è MORI Sniper Bot
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
"""

import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PATH
sys.path.append(str(Path(__file__).parent))

from loguru import logger
from config.settings import settings
from ai.analyzer import analyzer
from trading.jupiter import jupiter_trader
from monitors.telegram import telegram_monitor
from monitors.twitter import twitter_monitor
from monitors.website import website_monitor


class SniperTester:
    """–¢–µ—Å—Ç–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–Ω–∞–π–ø–µ—Ä –±–æ—Ç–∞"""

    def __init__(self):
        self.test_results = {}

    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MORI Sniper Bot")
        logger.info("=" * 50)

        # –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        await self.test_configuration()

        # –¢–µ—Å—Ç AI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        await self.test_ai_analyzer()

        # –¢–µ—Å—Ç —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        await self.test_trading_system()

        # –¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–æ–≤
        await self.test_monitors()

        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.print_summary()

    async def test_configuration(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        logger.info("üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            errors = []

            if not settings.solana.private_key:
                errors.append("SOLANA_PRIVATE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

            if not settings.monitoring.telegram_bot_token and not settings.monitoring.twitter_bearer_token:
                errors.append("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∏ –æ–¥–∏–Ω API —Ç–æ–∫–µ–Ω")

            if settings.trading.trade_amount_sol <= 0:
                errors.append("TRADE_AMOUNT_SOL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")

            if errors:
                logger.error(f"‚ùå –û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {errors}")
                self.test_results['configuration'] = False
            else:
                logger.success("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ –ø–æ—Ä—è–¥–∫–µ")
                self.test_results['configuration'] = True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            self.test_results['configuration'] = False

    async def test_ai_analyzer(self):
        """–¢–µ—Å—Ç AI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        logger.info("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")

        try:
            # –¢–µ—Å—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            test_content = "–ù–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç: 11111111111111111111111111111114 - –ø–æ–∫—É–ø–∞–π—Ç–µ —Å–µ–π—á–∞—Å!"

            result = await analyzer.analyze_post(
                content=test_content,
                platform="test",
                author="tester"
            )

            if result.has_contract and len(result.addresses) > 0:
                logger.success(f"‚úÖ AI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç {result.addresses}")
                self.test_results['ai_analyzer'] = True
            else:
                logger.warning("‚ö†Ô∏è AI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ –Ω–∞—à–µ–ª —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç")
                self.test_results['ai_analyzer'] = False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: {e}")
            self.test_results['ai_analyzer'] = False

    async def test_trading_system(self):
        """–¢–µ—Å—Ç —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...")

        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–π–¥–µ—Ä–∞
            if await jupiter_trader.start():
                logger.info("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Jupiter API...")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ health check
                health = await jupiter_trader.health_check()

                if health.get('status') == 'healthy':
                    logger.success("‚úÖ –¢–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞")
                    logger.info(f"  üíº –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {health.get('wallet_address')}")
                    logger.info(f"  üí∞ –ë–∞–ª–∞–Ω—Å SOL: {health.get('sol_balance', 0):.4f}")
                    self.test_results['trading_system'] = True
                else:
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π: {health.get('status')}")
                    self.test_results['trading_system'] = False

                await jupiter_trader.stop()
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É")
                self.test_results['trading_system'] = False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}")
            self.test_results['trading_system'] = False

    async def test_monitors(self):
        """–¢–µ—Å—Ç –≤—Å–µ—Ö –º–æ–Ω–∏—Ç–æ—Ä–æ–≤"""
        logger.info("üëÅÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤...")

        # –¢–µ—Å—Ç Telegram –º–æ–Ω–∏—Ç–æ—Ä–∞
        await self.test_telegram_monitor()

        # –¢–µ—Å—Ç Twitter –º–æ–Ω–∏—Ç–æ—Ä–∞
        await self.test_twitter_monitor()

        # –¢–µ—Å—Ç Website –º–æ–Ω–∏—Ç–æ—Ä–∞
        await self.test_website_monitor()

    async def test_telegram_monitor(self):
        """–¢–µ—Å—Ç Telegram –º–æ–Ω–∏—Ç–æ—Ä–∞"""
        try:
            if settings.monitoring.telegram_bot_token:
                if await telegram_monitor.start():
                    health = await telegram_monitor.health_check()
                    if health.get('status') == 'healthy':
                        logger.success(f"‚úÖ Telegram –º–æ–Ω–∏—Ç–æ—Ä: @{health.get('bot_username')}")
                        self.test_results['telegram_monitor'] = True
                    else:
                        logger.warning("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å Telegram –º–æ–Ω–∏—Ç–æ—Ä–æ–º")
                        self.test_results['telegram_monitor'] = False
                    await telegram_monitor.stop()
                else:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Telegram –º–æ–Ω–∏—Ç–æ—Ä")
                    self.test_results['telegram_monitor'] = False
            else:
                logger.info("‚è≠Ô∏è Telegram —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                self.test_results['telegram_monitor'] = None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram: {e}")
            self.test_results['telegram_monitor'] = False

    async def test_twitter_monitor(self):
        """–¢–µ—Å—Ç Twitter –º–æ–Ω–∏—Ç–æ—Ä–∞"""
        try:
            if settings.monitoring.twitter_bearer_token:
                if await twitter_monitor.start():
                    health = await twitter_monitor.health_check()
                    if health.get('status') == 'healthy':
                        logger.success("‚úÖ Twitter –º–æ–Ω–∏—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
                        self.test_results['twitter_monitor'] = True
                    else:
                        logger.warning("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å Twitter –º–æ–Ω–∏—Ç–æ—Ä–æ–º")
                        self.test_results['twitter_monitor'] = False
                    await twitter_monitor.stop()
                else:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Twitter –º–æ–Ω–∏—Ç–æ—Ä")
                    self.test_results['twitter_monitor'] = False
            else:
                logger.info("‚è≠Ô∏è Twitter —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                self.test_results['twitter_monitor'] = None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Twitter: {e}")
            self.test_results['twitter_monitor'] = False

    async def test_website_monitor(self):
        """–¢–µ—Å—Ç Website –º–æ–Ω–∏—Ç–æ—Ä–∞"""
        try:
            if settings.monitoring.website_urls and any(settings.monitoring.website_urls):
                if await website_monitor.start():
                    health = await website_monitor.health_check()
                    if health.get('status') in ['healthy', 'degraded']:
                        logger.success("‚úÖ Website –º–æ–Ω–∏—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
                        self.test_results['website_monitor'] = True
                    else:
                        logger.warning("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å Website –º–æ–Ω–∏—Ç–æ—Ä–æ–º")
                        self.test_results['website_monitor'] = False
                    await website_monitor.stop()
                else:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Website –º–æ–Ω–∏—Ç–æ—Ä")
                    self.test_results['website_monitor'] = False
            else:
                logger.info("‚è≠Ô∏è Website URLs –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                self.test_results['website_monitor'] = None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Website: {e}")
            self.test_results['website_monitor'] = False

    def print_summary(self):
        """–ü–µ—á–∞—Ç—å –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        logger.info("\n" + "=" * 50)
        logger.info("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        logger.info("=" * 50)

        total_tests = 0
        passed_tests = 0

        for component, result in self.test_results.items():
            if result is None:
                status = "‚è≠Ô∏è –ü–†–û–ü–£–©–ï–ù"
            elif result:
                status = "‚úÖ –ü–†–û–ô–î–ï–ù"
                passed_tests += 1
                total_tests += 1
            else:
                status = "‚ùå –ü–†–û–í–ê–õ–ï–ù"
                total_tests += 1

            logger.info(f"{component.replace('_', ' ').title():<20} {status}")

        logger.info("=" * 50)

        if total_tests == 0:
            logger.warning("‚ö†Ô∏è –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        elif passed_tests == total_tests:
            logger.success(f"üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ ({passed_tests}/{total_tests})")
            logger.success("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É: python main.py")
        else:
            logger.warning(f"‚ö†Ô∏è –¢–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —á–∞—Å—Ç–∏—á–Ω–æ ({passed_tests}/{total_tests})")
            logger.info("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–∏—Å—Ç–µ–º—ã")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = SniperTester()
    await tester.run_all_tests()


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    asyncio.run(main())