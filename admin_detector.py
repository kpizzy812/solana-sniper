#!/usr/bin/env python3
"""
ü§ñ –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ Telegram –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤
–°–∫–∞–Ω–∏—Ä—É–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –≤ .env
"""

import asyncio
import sys
from pathlib import Path

sys.path.append(str(Path(__file__).parent))

from loguru import logger
from config.settings import settings

try:
    from telethon import TelegramClient
    from telethon.tl.types import ChannelParticipantsAdmins

    TELETHON_AVAILABLE = True
except ImportError:
    TELETHON_AVAILABLE = False
    logger.error("‚ùå Telethon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install telethon")


class AdminDetector:
    """–î–µ—Ç–µ–∫—Ç–æ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ Telegram"""

    def __init__(self):
        self.client = None
        self.detected_admins = set()

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞"""
        if not TELETHON_AVAILABLE:
            logger.error("‚ùå Telethon –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False

        if not settings.monitoring.telegram_api_id or not settings.monitoring.telegram_api_hash:
            logger.error("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã TELEGRAM_API_ID –∏ TELEGRAM_API_HASH")
            return False

        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            session_file = f"{settings.monitoring.telegram_session_name}.session"
            self.client = TelegramClient(
                session_file,
                int(settings.monitoring.telegram_api_id),
                settings.monitoring.telegram_api_hash
            )

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
            await self.client.start(phone=settings.monitoring.telegram_phone_number)

            if await self.client.is_user_authorized():
                me = await self.client.get_me()
                logger.success(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫: @{me.username} ({me.first_name})")
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
                return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            return False

    async def get_chat_admins(self, chat_identifier: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞"""
        try:
            logger.info(f"üîç –°–∫–∞–Ω–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–æ–≤: {chat_identifier}")

            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —á–∞—Ç–∞
            entity = await self.client.get_entity(chat_identifier)

            logger.info(f"üìã –ß–∞—Ç –Ω–∞–π–¥–µ–Ω: {entity.title}")

            # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–æ–≤
            admins = []
            async for participant in self.client.iter_participants(entity, filter=ChannelParticipantsAdmins):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∏ –±–µ–∑ username
                if participant.deleted or not hasattr(participant, 'username') or not participant.username:
                    continue

                admin_info = {
                    'username': participant.username,
                    'first_name': getattr(participant, 'first_name', ''),
                    'last_name': getattr(participant, 'last_name', ''),
                    'id': participant.id
                }

                admins.append(admin_info)
                self.detected_admins.add(participant.username.lower())

                logger.success(
                    f"üëë –ê–¥–º–∏–Ω –Ω–∞–π–¥–µ–Ω: @{participant.username} ({admin_info['first_name']} {admin_info['last_name']})")

            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(admins)} –∞–¥–º–∏–Ω–æ–≤ –≤ {entity.title}")
            return admins

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ {chat_identifier}: {e}")
            return []

    async def scan_all_chats(self):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤"""
        logger.info("üéØ –ê–í–¢–û–û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–û–í")
        logger.info("=" * 40)

        all_admins = {}

        # –°–∫–∞–Ω–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã
        channels = settings.monitoring.user_bot_channels
        if channels:
            logger.info("üì∫ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤...")
            for channel in channels:
                if channel and channel.strip():
                    admins = await self.get_chat_admins(channel.strip())
                    if admins:
                        all_admins[channel] = admins

        # –°–∫–∞–Ω–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã
        groups = settings.monitoring.user_bot_groups
        if groups:
            logger.info("üë• –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø...")
            for group in groups:
                if group and group.strip():
                    admins = await self.get_chat_admins(group.strip())
                    if admins:
                        all_admins[group] = admins

        return all_admins

    def update_env_file(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –∞–¥–º–∏–Ω–∞–º–∏"""
        if not self.detected_admins:
            logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
            return

        env_file = Path('.env')

        if not env_file.exists():
            logger.error("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π .env
        lines = []
        if env_file.exists():
            with open(env_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()

        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ USER_BOT_ADMIN —Å—Ç—Ä–æ–∫–∏
        lines = [line for line in lines if not line.startswith('USER_BOT_ADMIN_')]

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã—Ö –∞–¥–º–∏–Ω–æ–≤
        admin_list = list(self.detected_admins)
        admin_lines = []

        for i, admin in enumerate(admin_list[:10], 1):  # –ú–∞–∫—Å–∏–º—É–º 10 –∞–¥–º–∏–Ω–æ–≤
            admin_lines.append(f"USER_BOT_ADMIN_{i}={admin}\n")

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π .env
        try:
            with open(env_file, 'w', encoding='utf-8') as f:
                f.writelines(lines)
                f.write("\n# –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∞–¥–º–∏–Ω—ã\n")
                f.writelines(admin_lines)

            logger.success(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(admin_list)} –∞–¥–º–∏–Ω–æ–≤ –≤ .env:")
            for i, admin in enumerate(admin_list, 1):
                logger.success(f"   USER_BOT_ADMIN_{i}={admin}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ .env: {e}")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        if self.client:
            await self.client.disconnect()

    async def run(self):
        """–ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥"""
        try:
            # –ó–∞–ø—É—Å–∫
            if not await self.start():
                return False

            # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            all_admins = await self.scan_all_chats()

            if not all_admins:
                logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —á–∞—Ç–æ–≤ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
                return False

            # –û—Ç—á–µ—Ç
            logger.info("\n" + "=" * 50)
            logger.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
            logger.info("=" * 50)

            total_admins = 0
            for chat, admins in all_admins.items():
                logger.info(f"üìç {chat}:")
                for admin in admins:
                    logger.info(f"  üëë @{admin['username']} - {admin['first_name']} {admin['last_name']}")
                    total_admins += 1

            logger.success(f"\nüéâ –í–°–ï–ì–û –ù–ê–ô–î–ï–ù–û: {total_admins} –∞–¥–º–∏–Ω–æ–≤")
            logger.success(f"üîß –£–ù–ò–ö–ê–õ–¨–ù–´–•: {len(self.detected_admins)} username")

            # –û–±–Ω–æ–≤–ª—è–µ–º .env
            if self.detected_admins:
                logger.info("\nüíæ –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª...")
                self.update_env_file()

            return True

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False

        finally:
            await self.stop()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    detector = AdminDetector()
    success = await detector.run()

    if success:
        logger.info("\nüöÄ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∞–¥–º–∏–Ω–æ–≤.")
    else:
        logger.error("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤")


if __name__ == "__main__":
    asyncio.run(main())