#!/usr/bin/env python3
"""
‚ö° MORI Sniper Bot - –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python quick_buy.py CONTRACT_ADDRESS
"""

import asyncio
import sys
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PATH
sys.path.append(str(Path(__file__).parent))

from loguru import logger
from config.settings import settings
from config.multi_wallet import MultiWalletConfig
from trading.jupiter import jupiter_trader
from utils.addresses import is_valid_solana_address, is_wrapped_sol, extract_addresses_fast


class QuickBuyer:
    """–ë—ã—Å—Ç—Ä–∞—è –ø–æ–∫—É–ø–∫–∞ –±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""

    def __init__(self):
        self.multi_wallet_config = MultiWalletConfig()

    def print_usage(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ"""
        print("‚ö° MORI SNIPER - –ë–´–°–¢–†–ê–Ø –ü–û–ö–£–ü–ö–ê")
        print("=" * 50)
        print()
        print("üìã –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:")
        print("  python quick_buy.py CONTRACT_ADDRESS")
        print("  python quick_buy.py 'https://jup.ag/swap/SOL-CONTRACT'")
        print()
        print("üìù –ü–†–ò–ú–ï–†–´:")
        print("  python quick_buy.py JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN")
        print(
            "  python quick_buy.py 'jup.ag/swap/So11111111111111111111111111111111111111112-JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN'")
        print()
        print("‚öôÔ∏è –¢–ï–ö–£–©–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò:")
        if self.multi_wallet_config.is_enabled():
            if self.multi_wallet_config.use_max_available_balance:
                print(f"üé≠ –†–µ–∂–∏–º: –í–ï–°–¨ –ë–ê–õ–ê–ù–° —Å {len(self.multi_wallet_config.wallets)} –∫–æ—à–µ–ª—å–∫–æ–≤")
            else:
                print(
                    f"üé≠ –†–µ–∂–∏–º: {settings.trading.trade_amount_sol} SOL x {settings.trading.num_purchases} —Å {len(self.multi_wallet_config.wallets)} –∫–æ—à–µ–ª—å–∫–æ–≤")
        else:
            print(f"üì± –†–µ–∂–∏–º: {settings.trading.trade_amount_sol} SOL x {settings.trading.num_purchases} (–æ–¥–∏–Ω –∫–æ—à–µ–ª–µ–∫)")
        print(f"üìä –ü—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ: {settings.trading.slippage_bps / 100}%")
        print()

    def extract_contract(self, input_str: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
        try:
            # –ü—Ä—è–º–æ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç
            if is_valid_solana_address(input_str):
                return input_str

            # URL –∏–ª–∏ —Ç–µ–∫—Å—Ç —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º
            if 'http' in input_str.lower():
                from utils.addresses import extract_addresses_from_any_url
                addresses = extract_addresses_from_any_url(input_str)
                if addresses:
                    return addresses[0]

            # –ü–æ–∏—Å–∫ –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
            addresses = extract_addresses_fast(input_str, settings.ai)
            if addresses:
                return addresses[0]

            raise ValueError("–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

        except Exception as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {e}")

    async def quick_buy(self, token_contract: str):
        """–ë—ã—Å—Ç—Ä–∞—è –ø–æ–∫—É–ø–∫–∞ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π"""
        start_time = time.time()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
        if is_wrapped_sol(token_contract):
            raise ValueError("–≠—Ç–æ Wrapped SOL - –ø–æ–∫—É–ø–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞")

        logger.critical(f"‚ö° –ë–´–°–¢–†–ê–Ø –ü–û–ö–£–ü–ö–ê: {token_contract}")

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º Jupiter trader
            logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
            if not await jupiter_trader.start():
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É")

            # –°–æ–∑–¥–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
            trading_signal = {
                'platform': 'quick_buy_cli',
                'source': 'Quick Buy CLI',
                'author': 'Command Line',
                'url': 'cli://quick',
                'contracts': [token_contract],
                'confidence': 1.0,
                'urgency': 'high',
                'timestamp': time.time(),
                'content_preview': f"–ë—ã—Å—Ç—Ä–∞—è –ø–æ–∫—É–ø–∫–∞ {token_contract}",
                'emergency': True
            }

            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
            if (hasattr(jupiter_trader, 'multi_wallet_manager') and
                    jupiter_trader.multi_wallet_manager and
                    self.multi_wallet_config.is_enabled()):

                logger.info("üé≠ –ü–æ–∫—É–ø–∫–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∫–æ—à–µ–ª—å–∫–∞–º–∏...")

                if self.multi_wallet_config.use_max_available_balance:
                    result = await jupiter_trader.multi_wallet_manager.execute_multi_wallet_trades(
                        token_address=token_contract,
                        base_trade_amount=0,
                        num_trades=0,
                        source_info=trading_signal
                    )
                else:
                    result = await jupiter_trader.multi_wallet_manager.execute_multi_wallet_trades(
                        token_address=token_contract,
                        base_trade_amount=settings.trading.trade_amount_sol,
                        num_trades=settings.trading.num_purchases,
                        source_info=trading_signal
                    )

                # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                print(f"‚úÖ –ì–û–¢–û–í–û: {result.successful_trades}/{result.total_trades} —É—Å–ø–µ—à–Ω–æ")
                print(f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {result.total_sol_spent:.6f} SOL")
                print(f"ü™ô –ö—É–ø–ª–µ–Ω–æ: {result.total_tokens_bought:,.0f} —Ç–æ–∫–µ–Ω–æ–≤")
                print(f"‚è±Ô∏è –í—Ä–µ–º—è: {(time.time() - start_time):.1f}s")

                # –ü–æ–¥–ø–∏—Å–∏ (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3)
                signatures = [r.signature for _, r in result.wallet_results if r.success and r.signature]
                if signatures:
                    print("üìù –ü–æ–¥–ø–∏—Å–∏:")
                    for i, sig in enumerate(signatures[:3]):
                        print(f"   {i + 1}. {sig}")
                    if len(signatures) > 3:
                        print(f"   ... –∏ –µ—â–µ {len(signatures) - 3}")

            else:
                logger.info("üì± –ü–æ–∫—É–ø–∫–∞ —Å –æ–¥–∏–Ω–æ—á–Ω—ã–º –∫–æ—à–µ–ª—å–∫–æ–º...")

                results = await jupiter_trader.execute_sniper_trades(
                    token_address=token_contract,
                    source_info=trading_signal
                )

                successful = [r for r in results if r.success]
                print(f"‚úÖ –ì–û–¢–û–í–û: {len(successful)}/{len(results)} —É—Å–ø–µ—à–Ω–æ")

                if successful:
                    total_sol = sum(r.input_amount for r in successful)
                    total_tokens = sum(r.output_amount or 0 for r in successful)
                    print(f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {total_sol:.6f} SOL")
                    print(f"ü™ô –ö—É–ø–ª–µ–Ω–æ: {total_tokens:,.0f} —Ç–æ–∫–µ–Ω–æ–≤")
                    print(f"‚è±Ô∏è –í—Ä–µ–º—è: {(time.time() - start_time):.1f}s")

                    # –ü–æ–¥–ø–∏—Å–∏
                    for i, result in enumerate(successful):
                        if result.signature:
                            print(f"üìù –ü–æ–¥–ø–∏—Å—å {i + 1}: {result.signature}")

        finally:
            await jupiter_trader.stop()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    buyer = QuickBuyer()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if len(sys.argv) != 2:
        buyer.print_usage()
        sys.exit(1)

    contract_input = sys.argv[1]

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
        token_contract = buyer.extract_contract(contract_input)
        print(f"üéØ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç: {token_contract}")

        # –ë—ã—Å—Ç—Ä–∞—è –ø–æ–∫—É–ø–∫–∞
        await buyer.quick_buy(token_contract)

    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    except KeyboardInterrupt:
        print("\n‚ùå –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())