#!/usr/bin/env python3
"""
üí∞ MORI Sniper Bot - –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å—ã –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ
"""

import asyncio
import sys
from pathlib import Path
from typing import Tuple, Optional
import time

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PATH
sys.path.append(str(Path(__file__).parent))

from loguru import logger
from solana.rpc.async_api import AsyncClient
from solana.rpc.commitment import Confirmed

from config.multi_wallet import MultiWalletConfig


class WalletChecker:
    """–ü—Ä–æ–≤–µ—Ä—è–ª—å—â–∏–∫ –±–∞–ª–∞–Ω—Å–æ–≤ –∫–æ—à–µ–ª—å–∫–æ–≤"""

    def __init__(self):
        self.config = MultiWalletConfig()
        self.solana_client = None

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è rate limiting
        self.max_concurrent_requests = 10  # –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        self.batch_size = 5  # –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.batch_delay = 0.5  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
        self.retry_attempts = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        self.retry_delay = 1.0  # –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è retry

    async def start(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Solana"""
        try:
            from config.settings import settings
            self.solana_client = AsyncClient(
                endpoint=settings.solana.rpc_url,
                commitment=Confirmed,
                timeout=2  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
            )
            logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Solana: {settings.solana.rpc_url}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Solana: {e}")
            return False

    async def stop(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if self.solana_client:
            await self.solana_client.close()

    async def check_all_wallets(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ —Å –±–∞—Ç—á–∏–Ω–≥ –∏ rate limiting"""
        if not self.config.is_enabled():
            logger.warning("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            logger.info("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ USE_MULTI_WALLET=true –≤ .env –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è")
            return

        if not self.config.wallets:
            logger.error("‚ùå –ö–æ—à–µ–ª—å–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            logger.info("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ MULTI_WALLET_PRIVATE_KEYS –≤ .env")
            return

        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ {len(self.config.wallets)} –∫–æ—à–µ–ª—å–∫–æ–≤...")
        logger.info(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏: –±–∞—Ç—á–∏ –ø–æ {self.batch_size}, –º–∞–∫—Å. {self.max_concurrent_requests} –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ")
        print("=" * 80)

        # –°–æ–∑–¥–∞–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        semaphore = asyncio.Semaphore(self.max_concurrent_requests)

        # –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ—à–µ–ª—å–∫–∏ –Ω–∞ –±–∞—Ç—á–∏
        wallets = self.config.wallets
        total_balance = 0.0
        total_available = 0.0
        ready_wallets = 0
        failed_wallets = 0

        for i in range(0, len(wallets), self.batch_size):
            batch = wallets[i:i + self.batch_size]
            batch_num = i // self.batch_size + 1
            total_batches = (len(wallets) + self.batch_size - 1) // self.batch_size

            logger.info(f"üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á {batch_num}/{total_batches} ({len(batch)} –∫–æ—à–µ–ª—å–∫–æ–≤)")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
            batch_tasks = []
            for wallet in batch:
                task = asyncio.create_task(self._get_balance_with_retry(wallet, semaphore))
                batch_tasks.append(task)

            batch_results = await asyncio.gather(*batch_tasks, return_exceptions=True)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∞—Ç—á–∞
            for wallet, result in zip(batch, batch_results):
                if isinstance(result, Exception):
                    logger.error(f"‚ùå –ö–æ—à–µ–ª–µ–∫ {wallet.index}: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - {result}")
                    failed_wallets += 1
                    continue

                balance, status_emoji, status_text, success = result

                if not success:
                    logger.error(
                        f"‚ùå –ö–æ—à–µ–ª–µ–∫ {wallet.index}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ {self.retry_attempts} –ø–æ–ø—ã—Ç–æ–∫")
                    failed_wallets += 1
                    continue

                wallet.update_balance(balance)

                total_balance += balance
                total_available += wallet.available_balance

                if wallet.available_balance >= self.config.min_balance:
                    ready_wallets += 1

                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥
                print(f"{status_emoji} –ö–æ—à–µ–ª–µ–∫ {wallet.index}:")
                print(f"   –ê–¥—Ä–µ—Å: {wallet.address}")
                print(f"   –ë–∞–ª–∞–Ω—Å: {balance:.6f} SOL")
                print(f"   –î–æ—Å—Ç—É–ø–Ω–æ: {wallet.available_balance:.6f} SOL ({status_text})")
                print(f"   –†–µ–∑–µ—Ä–≤ –≥–∞–∑–∞: {wallet.reserved_gas:.6f} SOL")
                print()

            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
            if i + self.batch_size < len(wallets):
                logger.debug(f"‚è≥ –ü–∞—É–∑–∞ {self.batch_delay}s –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏...")
                await asyncio.sleep(self.batch_delay)

        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self._print_summary(total_balance, total_available, ready_wallets, failed_wallets)

    async def _get_balance_with_retry(self, wallet, semaphore) -> Tuple[float, str, str, bool]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∏ rate limiting"""
        async with semaphore:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

            for attempt in range(self.retry_attempts):
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
                    response = await self.solana_client.get_balance(wallet.keypair.pubkey())
                    balance = response.value / 1e9 if response.value else 0.0

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    if balance < self.config.min_balance:
                        return balance, "üî¥", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", True
                    elif balance < self.config.min_balance * 2:
                        return balance, "üü°", "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å", True
                    else:
                        return balance, "üü¢", "–ì–æ—Ç–æ–≤ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ", True

                except asyncio.TimeoutError:
                    error_msg = f"–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.retry_attempts})"
                    logger.warning(f"‚è±Ô∏è –ö–æ—à–µ–ª–µ–∫ {wallet.index}: {error_msg}")

                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ RPC: {str(e)} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.retry_attempts})"
                    logger.warning(f"‚ö†Ô∏è –ö–æ—à–µ–ª–µ–∫ {wallet.index}: {error_msg}")

                # –ï—Å–ª–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –∂–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                if attempt < self.retry_attempts - 1:
                    delay = self.retry_delay * (2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    logger.debug(f"üîÑ –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay:.1f}s –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {wallet.index}")
                    await asyncio.sleep(delay)

            # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
            return 0.0, "‚ùå", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞", False

    def _print_summary(self, total_balance: float, total_available: float, ready_wallets: int, failed_wallets: int):
        """–ü–µ—á–∞—Ç—å –∏—Ç–æ–≥–æ–≤–æ–π —Å–≤–æ–¥–∫–∏"""
        print("=" * 80)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print("=" * 80)

        successful_wallets = len(self.config.wallets) - failed_wallets

        print(f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance:.6f} SOL (~${total_balance * 150:.0f})")
        print(f"üíé –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: {total_available:.6f} SOL")
        print(f"üé≠ –ì–æ—Ç–æ–≤—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤: {ready_wallets}/{successful_wallets}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {successful_wallets}/{len(self.config.wallets)}")

        if failed_wallets > 0:
            print(f"‚ùå –û—à–∏–±–æ–∫ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {failed_wallets}")

        print(f"‚öôÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {self.config.min_balance:.6f} SOL")
        print(f"‚õΩ –†–µ–∑–µ—Ä–≤ –≥–∞–∑–∞: {self.config.gas_reserve:.6f} SOL –Ω–∞ –∫–æ—à–µ–ª–µ–∫")
        print()

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")

        if failed_wallets > len(self.config.wallets) * 0.1:  # –ë–æ–ª–µ–µ 10% –æ—à–∏–±–æ–∫
            print("‚ö†Ô∏è –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ—à–µ–ª—å–∫–æ–≤!")
            print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
            print("   - –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π RPC –ø—Ä–æ–≤–∞–π–¥–µ—Ä")
            print("   - –£–º–µ–Ω—å—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")

        if ready_wallets == 0:
            print("‚ùå –ù–ï–¢ –ö–û–®–ï–õ–¨–ö–û–í –ì–û–¢–û–í–´–• –ö –¢–û–†–ì–û–í–õ–ï!")
            print("   - –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –∫–æ—à–µ–ª—å–∫–∏ —Å CEX –±–∏—Ä–∂")
            print("   - –ú–∏–Ω–∏–º—É–º –Ω–∞ –∫–∞–∂–¥—ã–π –∫–æ—à–µ–ª–µ–∫: 0.05+ SOL")
        elif ready_wallets < successful_wallets // 2:
            print("‚ö†Ô∏è –ú–∞–ª–æ –≥–æ—Ç–æ–≤—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–Ω–∞–π–ø–∏–Ω–≥–∞")
            print("   - –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏")
            print("   - –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 80%+ –∫–æ—à–µ–ª—å–∫–æ–≤ –≥–æ—Ç–æ–≤—ã—Ö")
        else:
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Å–Ω–∞–π–ø–∏–Ω–≥—É!")
            print(f"   - –ú–æ–∂–Ω–æ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –Ω–∞ —Å—É–º–º—É –¥–æ {total_available:.4f} SOL")
            print("   - –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")

        print()
        print("üîß –ù–ê–°–¢–†–û–ô–ö–ò:")
        print(f"   –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {self.config.distribution_strategy}")
        print(f"   –†–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—è: {self.config.randomize_amounts}")
        print(f"   –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {self.config.initial_delay_seconds}s")
        print(f"   –ú–∞–∫—Å–∏–º—É–º —Å–¥–µ–ª–æ–∫ –Ω–∞ –∫–æ—à–µ–ª–µ–∫: {self.config.max_trades_per_wallet}")
        print()
        print("‚öôÔ∏è –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:")
        print(f"   –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {self.batch_size}")
        print(f"   –ú–∞–∫—Å. –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {self.max_concurrent_requests}")
        print(f"   –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏: {self.batch_delay}s")

    async def quick_balance_check(self):
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞"""
        if not self.config.is_enabled():
            print("‚ö†Ô∏è –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
            return

        logger.info("‚ö° –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤...")

        # –°–æ–∑–¥–∞–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
        semaphore = asyncio.Semaphore(self.max_concurrent_requests)

        total_balance = 0.0
        ready_count = 0
        checked_count = 0

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
        balance_tasks = []
        for wallet in self.config.wallets:
            task = asyncio.create_task(self._quick_check_wallet(wallet, semaphore))
            balance_tasks.append(task)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        results = await asyncio.gather(*balance_tasks, return_exceptions=True)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for wallet, result in zip(self.config.wallets, results):
            if isinstance(result, Exception):
                logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—à–µ–ª—å–∫–∞ {wallet.index}: {result}")
                continue

            balance, is_ready = result
            total_balance += balance
            checked_count += 1

            if is_ready:
                ready_count += 1

        print(f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance:.4f} SOL")
        print(f"‚úÖ –ì–æ—Ç–æ–≤—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤: {ready_count}/{checked_count}")

        if checked_count < len(self.config.wallets):
            failed = len(self.config.wallets) - checked_count
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å: {failed} –∫–æ—à–µ–ª—å–∫–æ–≤")

    async def _quick_check_wallet(self, wallet, semaphore) -> Tuple[float, bool]:
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞"""
        async with semaphore:
            try:
                response = await self.solana_client.get_balance(wallet.keypair.pubkey())
                balance = response.value / 1e9 if response.value else 0.0
                is_ready = balance >= self.config.min_balance
                return balance, is_ready
            except Exception as e:
                # –í –±—ã—Å—Ç—Ä–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤")
    print("=" * 60)

    checker = WalletChecker()

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        if not await checker.start():
            sys.exit(1)

        # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
        mode = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (1 - –ø–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, 2 - –±—ã—Å—Ç—Ä–∞—è): ").strip()

        if mode == "2":
            await checker.quick_balance_check()
        else:
            await checker.check_all_wallets()

    except KeyboardInterrupt:
        print("\n‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
    finally:
        await checker.stop()


if __name__ == "__main__":
    asyncio.run(main())