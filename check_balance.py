#!/usr/bin/env python3
"""
üí∞ MORI Sniper Bot - –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –∞–≤–∞—Ä–∏–π–Ω–æ–π –ø–æ–∫—É–ø–∫–∏
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PATH
sys.path.append(str(Path(__file__).parent))

from loguru import logger
from config.settings import settings
from config.multi_wallet import MultiWalletConfig
from solana.rpc.async_api import AsyncClient
from solana.rpc.commitment import Confirmed


class BalanceChecker:
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤"""

    def __init__(self):
        self.config = MultiWalletConfig()
        self.solana_client = None

    async def start(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            self.solana_client = AsyncClient(
                endpoint=settings.solana.rpc_url,
                commitment=Confirmed
            )
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Solana: {e}")
            return False

    async def stop(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if self.solana_client:
            await self.solana_client.close()

    async def check_balances(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –±–∞–ª–∞–Ω—Å–æ–≤"""
        print("üí∞ –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–û–í –î–õ–Ø –ê–í–ê–†–ò–ô–ù–û–ô –ü–û–ö–£–ü–ö–ò")
        print("=" * 60)

        if not self.config.is_enabled():
            # –û–¥–∏–Ω –∫–æ—à–µ–ª–µ–∫
            await self.check_single_wallet()
        else:
            # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏
            await self.check_multiple_wallets()

        self.show_trading_potential()

    async def check_single_wallet(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞"""
        print("üì± –†–ï–ñ–ò–ú: –û–¥–∏–Ω–æ—á–Ω—ã–π –∫–æ—à–µ–ª–µ–∫")
        print("-" * 30)

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ—à–µ–ª–µ–∫ –∏–∑ Jupiter trader
            from trading.jupiter import jupiter_trader
            if not await jupiter_trader.start():
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É")

            wallet_address = str(jupiter_trader.executor.wallet_keypair.pubkey())
            balance = await jupiter_trader.get_sol_balance()

            print(f"üè¶ –ê–¥—Ä–µ—Å: {wallet_address}")
            print(f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.6f} SOL (~${balance * 200:.0f})")

            # –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ (—Å —É—á–µ—Ç–æ–º –≥–∞–∑–∞)
            gas_reserve = 0.01  # –†–µ–∑–µ—Ä–≤ –Ω–∞ –≥–∞–∑
            available = max(0, balance - gas_reserve)
            print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ: {available:.6f} SOL")

            if available < settings.trading.trade_amount_sol:
                print(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {settings.trading.trade_amount_sol} SOL")
            else:
                max_trades = int(available / settings.trading.trade_amount_sol)
                print(f"üéØ –ú–∞–∫—Å. —Å–¥–µ–ª–æ–∫: {max_trades} x {settings.trading.trade_amount_sol} SOL")

            await jupiter_trader.stop()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

    async def check_multiple_wallets(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤"""
        print(f"üé≠ –†–ï–ñ–ò–ú: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ ({len(self.config.wallets)})")
        print("-" * 30)

        if not self.config.wallets:
            print("‚ùå –ö–æ—à–µ–ª—å–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        balance_tasks = []
        for wallet in self.config.wallets:
            task = asyncio.create_task(self._get_wallet_balance(wallet))
            balance_tasks.append(task)

        results = await asyncio.gather(*balance_tasks, return_exceptions=True)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        total_balance = 0.0
        total_available = 0.0
        ready_wallets = 0

        print("üìä –î–ï–¢–ê–õ–ò –ü–û –ö–û–®–ï–õ–¨–ö–ê–ú:")
        for wallet, result in zip(self.config.wallets, results):
            if isinstance(result, Exception):
                status = "‚ùå –û—à–∏–±–∫–∞"
                balance = 0.0
            else:
                balance = result
                wallet.update_balance(balance)
                total_balance += balance
                total_available += wallet.available_balance

                if wallet.available_balance >= self.config.min_balance:
                    ready_wallets += 1
                    status = "‚úÖ –ì–æ—Ç–æ–≤"
                else:
                    status = "üî¥ –ú–∞–ª–æ"

            short_addr = f"{wallet.address[:8]}...{wallet.address[-8:]}"
            print(f"  {status} {short_addr}: {balance:.6f} SOL (–¥–æ—Å—Ç—É–ø–Ω–æ: {wallet.available_balance:.6f})")

        print("\nüìà –ò–¢–û–ì–û:")
        print(f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance:.6f} SOL (~${total_balance * 200:.0f})")
        print(f"üíé –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: {total_available:.6f} SOL")
        print(f"‚úÖ –ì–æ—Ç–æ–≤—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤: {ready_wallets}/{len(self.config.wallets)}")

        if self.config.use_max_available_balance:
            print(f"üî• –†–ï–ñ–ò–ú: –ü–æ—Ç—Ä–∞—Ç–∏–º –≤–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å ({total_available:.6f} SOL)")
        else:
            trade_amount = settings.trading.trade_amount_sol
            num_trades = settings.trading.num_purchases
            max_possible = int(total_available / trade_amount)
            planned = ready_wallets * num_trades

            print(f"üìä –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {planned} x {trade_amount} SOL = {planned * trade_amount:.4f} SOL")
            print(f"üéØ –ú–∞–∫—Å–∏–º—É–º –≤–æ–∑–º–æ–∂–Ω–æ: {max_possible} x {trade_amount} SOL")

    async def _get_wallet_balance(self, wallet) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞"""
        try:
            response = await self.solana_client.get_balance(wallet.keypair.pubkey())
            return response.value / 1e9 if response.value else 0.0
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∞ {wallet.address[:8]}...: {e}")
            return 0.0

    def show_trading_potential(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª"""
        print("\nüéØ –ê–í–ê–†–ò–ô–ù–ê–Ø –ü–û–ö–£–ü–ö–ê:")
        print("-" * 25)
        print("‚ö° –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø–æ–∫—É–ø–∫–∏:")
        print("   python emergency_buy.py    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º")
        print("   python quick_buy.py CONTRACT  # –ö–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞")
        print()
        print("üìã –ü—Ä–∏–º–µ—Ä:")
        print("   python quick_buy.py JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN")
        print()

    async def quick_check(self):
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –∏—Ç–æ–≥–æ–≤"""
        print("‚ö° –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–û–í")
        print("=" * 40)

        try:
            if not self.config.is_enabled():
                # –û–¥–∏–Ω –∫–æ—à–µ–ª–µ–∫
                from trading.jupiter import jupiter_trader
                await jupiter_trader.start()
                balance = await jupiter_trader.get_sol_balance()
                await jupiter_trader.stop()

                print(f"üì± –ë–∞–ª–∞–Ω—Å: {balance:.4f} SOL (~${balance * 200:.0f})")

                if balance >= settings.trading.trade_amount_sol:
                    print("‚úÖ –ì–æ—Ç–æ–≤ –∫ –ø–æ–∫—É–ø–∫–µ")
                else:
                    print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
            else:
                # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ - –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                total_balance = 0.0
                ready_count = 0

                balance_tasks = []
                for wallet in self.config.wallets:
                    task = asyncio.create_task(self._get_wallet_balance(wallet))
                    balance_tasks.append(task)

                results = await asyncio.gather(*balance_tasks, return_exceptions=True)

                for wallet, result in zip(self.config.wallets, results):
                    if not isinstance(result, Exception):
                        balance = result
                        wallet.update_balance(balance)
                        total_balance += balance
                        if wallet.available_balance >= self.config.min_balance:
                            ready_count += 1

                print(f"üé≠ –ö–æ—à–µ–ª—å–∫–æ–≤: {ready_count}/{len(self.config.wallets)} –≥–æ—Ç–æ–≤—ã")
                print(f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance:.4f} SOL")

                if self.config.use_max_available_balance:
                    total_available = sum(w.available_balance for w in self.config.wallets)
                    print(f"üî• –ü–æ—Ç—Ä–∞—Ç–∏–º: {total_available:.4f} SOL (–≤–µ—Å—å –±–∞–ª–∞–Ω—Å)")

                if ready_count > 0:
                    print("‚úÖ –ì–æ—Ç–æ–≤ –∫ –∞–≤–∞—Ä–∏–π–Ω–æ–π –ø–æ–∫—É–ø–∫–µ")
                else:
                    print("‚ùå –ù–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    checker = BalanceChecker()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    quick_mode = len(sys.argv) > 1 and sys.argv[1] in ['--quick', '-q']

    try:
        if not await checker.start():
            sys.exit(1)

        if quick_mode:
            await checker.quick_check()
        else:
            await checker.check_balances()

    except KeyboardInterrupt:
        print("\n‚ùå –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await checker.stop()


if __name__ == "__main__":
    asyncio.run(main())