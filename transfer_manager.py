#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîÑ MORI Transfer Manager - –ê–≤–∞—Ä–∏–π–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π –º—É–ª—å—Ç–∏–∫–æ—à–µ–ª—å–∫–æ–≤
"""

import asyncio
import sys
from pathlib import Path
from typing import List, Dict, Optional
from decimal import Decimal

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(str(Path(__file__).parent))

from loguru import logger
from config.settings import settings
from config.multi_wallet import MultiWalletConfig
from utils.wallet_generator import MultiWalletGenerator, WalletInfo

# Solana imports
from solana.rpc.async_api import AsyncClient
from solana.rpc.commitment import Confirmed
from solana.rpc.types import TxOpts
from solders.pubkey import Pubkey
from solders.keypair import Keypair
from solders.system_program import TransferParams, transfer
from solders.transaction import VersionedTransaction
from solders.message import MessageV0
from solders.compute_budget import set_compute_unit_limit, set_compute_unit_price


class TransferManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä–µ–≤–æ–¥–æ–≤ SOL –∏ SPL —Ç–æ–∫–µ–Ω–æ–≤"""

    def __init__(self):
        self.settings = settings
        self.multi_config = MultiWalletConfig()
        self.generator = MultiWalletGenerator()

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º RPC –∫–ª–∏–µ–Ω—Ç
        self.client = AsyncClient(self.settings.solana.rpc_url)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—à–µ–ª—å–∫–∏
        self.main_keypair = self._get_main_keypair()
        self.multi_wallets = self._get_multi_wallets()
        self.manual_wallets = self._get_manual_wallets()

        logger.info(f"üí≥ –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ—à–µ–ª–µ–∫: {str(self.main_keypair.pubkey())[:8]}...")
        logger.info(f"üí≥ –ú—É–ª—å—Ç–∏-–∫–æ—à–µ–ª—å–∫–æ–≤ (—Å–Ω–∞–π–ø–∏–Ω–≥): {len(self.multi_wallets)}")
        logger.info(f"üí≥ –†—É—á–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤: {len(self.manual_wallets)}")

    def _get_main_keypair(self) -> Keypair:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ—à–µ–ª–µ–∫ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            if self.settings.solana.private_key:
                import base58
                private_key_bytes = base58.b58decode(self.settings.solana.private_key)
                return Keypair.from_bytes(private_key_bytes)
            else:
                logger.error("‚ùå –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
                raise ValueError("–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞: {e}")
            raise

    def _get_multi_wallets(self) -> List[Keypair]:
        """–ü–æ–ª—É—á–∞–µ—Ç –º—É–ª—å—Ç–∏-–∫–æ—à–µ–ª—å–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if not self.multi_config.wallets:
            logger.warning("‚ö†Ô∏è –ú—É–ª—å—Ç–∏-–∫–æ—à–µ–ª—å–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return []

        return [wallet.keypair for wallet in self.multi_config.wallets]

    def _get_manual_wallets(self) -> List[Pubkey]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–¥—Ä–µ—Å–∞ —Ä—É—á–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –∏–∑ .env"""
        manual_wallets = []

        # –ò—â–µ–º MANUAL_WALLET_1, MANUAL_WALLET_2, etc. –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        import os
        for i in range(1, 11):  # –î–æ 10 —Ä—É—á–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
            wallet_key = f"MANUAL_WALLET_{i}"
            wallet_address = os.getenv(wallet_key)

            if wallet_address:
                try:
                    pubkey = Pubkey.from_string(wallet_address.strip())
                    manual_wallets.append(pubkey)
                    logger.debug(f"‚úÖ –†—É—á–Ω–æ–π –∫–æ—à–µ–ª–µ–∫ {i}: {str(pubkey)[:8]}...")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å {wallet_key}: {e}")

        return manual_wallets

    async def get_sol_balance(self, pubkey: Pubkey) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å SOL –∫–æ—à–µ–ª—å–∫–∞"""
        try:
            response = await self.client.get_balance(pubkey, commitment=Confirmed)
            return response.value / 1e9
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ SOL: {e}")
            return 0.0

    async def get_token_balance(self, wallet_pubkey: Pubkey, token_mint: Pubkey) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞ –∫–æ—à–µ–ª—å–∫–∞ - –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            # –°–ø–æ—Å–æ–± 1: –ß–µ—Ä–µ–∑ Associated Token Account (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π)
            from spl.token.instructions import get_associated_token_address

            # –ü–æ–ª—É—á–∞–µ–º ATA –∞–¥—Ä–µ—Å
            ata_address = get_associated_token_address(wallet_pubkey, token_mint)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ ATA
            account_info = await self.client.get_account_info(ata_address, commitment=Confirmed)

            if not account_info.value:
                logger.debug(f"üìä ATA –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è {str(wallet_pubkey)[:8]}...")
                return 0.0

            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ —Ç–æ–∫–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é
            data = account_info.value.data

            if len(data) < 64:
                logger.debug(f"üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ ATA")
                return 0.0

            # SPL Token Account layout:
            # 0-32: mint (32 bytes)
            # 32-64: owner (32 bytes)
            # 64-72: amount (8 bytes, little-endian uint64)
            # 72-73: delegate option (1 byte)
            # 73-74: state (1 byte)
            # etc...

            # –ò–∑–≤–ª–µ–∫–∞–µ–º amount (–ø–æ–∑–∏—Ü–∏—è 64-72)
            amount_bytes = data[64:72]
            amount_raw = int.from_bytes(amount_bytes, byteorder='little')

            if amount_raw == 0:
                return 0.0

            # –ü–æ–ª—É—á–∞–µ–º decimals –¥–ª—è —Ç–æ–∫–µ–Ω–∞
            decimals = await self.get_token_decimals(token_mint)

            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
            balance = amount_raw / (10 ** decimals)

            logger.debug(f"üí∞ –ë–∞–ª–∞–Ω—Å {str(wallet_pubkey)[:8]}...: {balance:.6f} —Ç–æ–∫–µ–Ω–æ–≤")
            return balance

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–∞: {e}")
            return 0.0

    async def get_token_decimals(self, token_mint: Pubkey) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ decimals –¥–ª—è —Ç–æ–∫–µ–Ω–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ mint –∞–∫–∫–∞—É–Ω—Ç–µ
            mint_info = await self.client.get_account_info(token_mint, commitment=Confirmed)

            if not mint_info.value:
                logger.debug(f"üìä Mint –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º 6 decimals –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                return 6  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

            data = mint_info.value.data

            if len(data) < 44:
                return 6

            # SPL Token Mint layout:
            # 0-4: mint_authority option (4 bytes)
            # 4-8: supply (8 bytes)
            # 36: decimals (1 byte)
            decimals = data[44]  # decimals –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ 44

            logger.debug(f"üí∞ Decimals –¥–ª—è —Ç–æ–∫–µ–Ω–∞: {decimals}")
            return decimals

        except Exception as e:
            logger.debug(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è decimals: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º 6")
            return 6  # Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

    async def transfer_sol(self, from_keypair: Keypair, to_pubkey: Pubkey, amount_sol: float) -> Dict:
        """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç SOL –º–µ–∂–¥—É –∫–æ—à–µ–ª—å–∫–∞–º–∏"""
        try:
            amount_lamports = int(amount_sol * 1e9)

            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞
            transfer_instruction = transfer(
                TransferParams(
                    from_pubkey=from_keypair.pubkey(),
                    to_pubkey=to_pubkey,
                    lamports=amount_lamports
                )
            )

            # –î–æ–±–∞–≤–ª—è–µ–º compute budget –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            compute_limit = set_compute_unit_limit(200_000)
            compute_price = set_compute_unit_price(self.settings.trading.priority_fee)

            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            instructions = [compute_limit, compute_price, transfer_instruction]

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π blockhash
            recent_blockhash = await self.client.get_latest_blockhash(commitment=Confirmed)

            # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = MessageV0.try_compile(
                payer=from_keypair.pubkey(),
                instructions=instructions,
                address_lookup_table_accounts=[],
                recent_blockhash=recent_blockhash.value.blockhash,
            )

            transaction = VersionedTransaction(message, [from_keypair])

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            response = await self.client.send_transaction(
                transaction,
                opts=TxOpts(skip_preflight=False, preflight_commitment=Confirmed)
            )

            logger.success(f"‚úÖ SOL –ø–µ—Ä–µ–≤–æ–¥: {amount_sol:.4f} SOL ‚Üí {str(to_pubkey)[:8]}...")

            return {
                'success': True,
                'tx_hash': str(response.value),
                'amount': amount_sol,
                'from_wallet': str(from_keypair.pubkey()),
                'to_wallet': str(to_pubkey)
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ SOL: {e}")
            return {
                'success': False,
                'error': str(e),
                'amount': amount_sol,
                'from_wallet': str(from_keypair.pubkey()),
                'to_wallet': str(to_pubkey)
            }

    async def transfer_token(self, from_keypair: Keypair, to_pubkey: Pubkey,
                             token_mint: Pubkey, amount: float) -> Dict:
        """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç SPL —Ç–æ–∫–µ–Ω—ã –º–µ–∂–¥—É –∫–æ—à–µ–ª—å–∫–∞–º–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
            from spl.token.instructions import (
                transfer_checked,
                TransferCheckedParams,
                create_associated_token_account
            )
            from spl.token.constants import TOKEN_PROGRAM_ID, ASSOCIATED_TOKEN_PROGRAM_ID
            from spl.token.instructions import get_associated_token_address

            from_ata = get_associated_token_address(from_keypair.pubkey(), token_mint)
            to_ata = get_associated_token_address(to_pubkey, token_mint)

            instructions = []

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ target ATA –∏ —Å–æ–∑–¥–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            to_account_info = await self.client.get_account_info(to_ata, commitment=Confirmed)
            if not to_account_info.value:
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è create_associated_token_account
                create_ata_ix = create_associated_token_account(
                    payer=from_keypair.pubkey(),
                    owner=to_pubkey,
                    mint=token_mint,
                    token_program_id=TOKEN_PROGRAM_ID,
                    associated_token_program_id=ASSOCIATED_TOKEN_PROGRAM_ID
                )
                instructions.append(create_ata_ix)

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ decimals
            decimals = await self.get_token_decimals(token_mint)
            amount_with_decimals = int(amount * (10 ** decimals))

            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞
            transfer_ix = transfer_checked(
                TransferCheckedParams(
                    program_id=TOKEN_PROGRAM_ID,
                    source=from_ata,
                    mint=token_mint,
                    dest=to_ata,
                    owner=from_keypair.pubkey(),
                    amount=amount_with_decimals,
                    decimals=decimals
                )
            )

            instructions.append(transfer_ix)

            # –î–æ–±–∞–≤–ª—è–µ–º compute budget
            compute_limit = set_compute_unit_limit(300_000)
            compute_price = set_compute_unit_price(self.settings.trading.priority_fee)

            all_instructions = [compute_limit, compute_price] + instructions

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π blockhash
            recent_blockhash = await self.client.get_latest_blockhash(commitment=Confirmed)

            # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            message = MessageV0.try_compile(
                payer=from_keypair.pubkey(),
                instructions=all_instructions,
                address_lookup_table_accounts=[],
                recent_blockhash=recent_blockhash.value.blockhash,
            )

            transaction = VersionedTransaction(message, [from_keypair])

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            response = await self.client.send_transaction(
                transaction,
                opts=TxOpts(skip_preflight=False, preflight_commitment=Confirmed)
            )

            logger.success(f"‚úÖ –¢–æ–∫–µ–Ω –ø–µ—Ä–µ–≤–æ–¥: {amount:.6f} —Ç–æ–∫–µ–Ω–æ–≤ ‚Üí {str(to_pubkey)[:8]}...")

            return {
                'success': True,
                'tx_hash': str(response.value),
                'amount': amount,
                'from_wallet': str(from_keypair.pubkey()),
                'to_wallet': str(to_pubkey)
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞: {e}")
            return {
                'success': False,
                'error': str(e),
                'amount': amount,
                'from_wallet': str(from_keypair.pubkey()),
                'to_wallet': str(to_pubkey)
            }

    async def distribute_sol(self, custom_amounts: List[float] = None) -> List[Dict]:
        """
        –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç SOL —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –ø–æ –º—É–ª—å—Ç–∏-–∫–æ—à–µ–ª—å–∫–∞–º

        Args:
            custom_amounts: –°–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å—É–º–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ (–≤ SOL).
                          –ï—Å–ª–∏ None - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ—Ä–æ–≤–Ω—É –≤–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å
        """
        if not self.multi_wallets:
            logger.error("‚ùå –ú—É–ª—å—Ç–∏-–∫–æ—à–µ–ª—å–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
            return []

        results = []

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
        main_balance = await self.get_sol_balance(self.main_keypair.pubkey())
        gas_reserve = self.multi_config.gas_reserve
        available_balance = main_balance - gas_reserve

        if available_balance <= 0:
            logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ SOL –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è. –ë–∞–ª–∞–Ω—Å: {main_balance:.4f}, —Ä–µ–∑–µ—Ä–≤: {gas_reserve}")
            return results

        num_wallets = len(self.multi_wallets)

        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—É–º–º—ã
        if custom_amounts is not None:
            if len(custom_amounts) != num_wallets:
                logger.error(
                    f"‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É–º–º ({len(custom_amounts)}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–æ—à–µ–ª—å–∫–æ–≤ ({num_wallets})")
                return results

            total_needed = sum(custom_amounts)
            if total_needed > available_balance:
                logger.error(f"‚ùå –ó–∞–ø—Ä–æ—à–µ–Ω–æ {total_needed:.4f} SOL, –¥–æ—Å—Ç—É–ø–Ω–æ {available_balance:.4f} SOL")
                return results

            amounts = custom_amounts
            logger.info(f"üí∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—É–º–º–∞–º: {total_needed:.4f} SOL –Ω–∞ {num_wallets} –∫–æ—à–µ–ª—å–∫–æ–≤")
            for i, amount in enumerate(amounts):
                logger.info(f"üí≥ –ö–æ—à–µ–ª–µ–∫ {i + 1}: {amount:.4f} SOL")

        else:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ - –ø–æ—Ä–æ–≤–Ω—É
            amount_per_wallet = available_balance / num_wallets
            amounts = [amount_per_wallet] * num_wallets
            logger.info(f"üí∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä–æ–≤–Ω—É {available_balance:.4f} SOL –Ω–∞ {num_wallets} –∫–æ—à–µ–ª—å–∫–æ–≤")
            logger.info(f"üí≥ –ü–æ {amount_per_wallet:.4f} SOL –Ω–∞ –∫–æ—à–µ–ª–µ–∫")

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –∫–∞–∂–¥—ã–π –∫–æ—à–µ–ª–µ–∫
        for i, (wallet, amount) in enumerate(zip(self.multi_wallets, amounts)):
            if amount <= 0:
                logger.info(f"‚è≠Ô∏è –ö–æ—à–µ–ª–µ–∫ {i + 1}: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (—Å—É–º–º–∞ {amount:.4f} SOL)")
                continue

            logger.info(f"üì§ –ü–µ—Ä–µ–≤–æ–¥ {i + 1}/{num_wallets}: {amount:.4f} SOL ‚Üí {str(wallet.pubkey())[:8]}...")

            result = await self.transfer_sol(
                self.main_keypair,
                wallet.pubkey(),
                amount
            )

            results.append(result)

            if not result['success']:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', 'Unknown error')}")

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
            await asyncio.sleep(1)

        return results

    async def transfer_to_manual_wallets_sol(self) -> List[Dict]:
        """–°–æ–±–∏—Ä–∞–µ—Ç SOL —Å –º—É–ª—å—Ç–∏-–∫–æ—à–µ–ª—å–∫–æ–≤ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –Ω–∞ —Ä—É—á–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏"""
        if not self.manual_wallets:
            logger.error("‚ùå –†—É—á–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ .env!")
            logger.info("üí° –î–æ–±–∞–≤—å—Ç–µ –≤ .env: MANUAL_WALLET_1=address1, MANUAL_WALLET_2=address2...")
            return []

        results = []

        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ SOL —Å –º—É–ª—å—Ç–∏-–∫–æ—à–µ–ª—å–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π
        logger.info("üì• –°–æ–±–∏—Ä–∞–µ–º SOL —Å –º—É–ª—å—Ç–∏-–∫–æ—à–µ–ª—å–∫–æ–≤...")
        collect_results = await self.collect_sol()

        successful_collects = sum(1 for r in collect_results if r['success'])
        if successful_collects == 0:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å SOL —Å –º—É–ª—å—Ç–∏-–∫–æ—à–µ–ª—å–∫–æ–≤")
            return results

        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...")
        await asyncio.sleep(3)

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
        main_balance = await self.get_sol_balance(self.main_keypair.pubkey())
        gas_reserve = self.multi_config.gas_reserve
        available_balance = main_balance - gas_reserve

        if available_balance <= 0:
            logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ SOL –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞ —Ä—É—á–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏")
            return results

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –Ω–∞ –∫–∞–∂–¥—ã–π —Ä—É—á–Ω–æ–π –∫–æ—à–µ–ª–µ–∫
        num_manual_wallets = len(self.manual_wallets)
        amount_per_wallet = available_balance / num_manual_wallets

        logger.info(f"üí∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º {available_balance:.4f} SOL –Ω–∞ {num_manual_wallets} —Ä—É—á–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤")
        logger.info(f"üí≥ –ü–æ {amount_per_wallet:.4f} SOL –Ω–∞ –∫–æ—à–µ–ª–µ–∫")

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –∫–∞–∂–¥—ã–π —Ä—É—á–Ω–æ–π –∫–æ—à–µ–ª–µ–∫
        for i, manual_wallet in enumerate(self.manual_wallets):
            logger.info(f"üì§ –ü–µ—Ä–µ–≤–æ–¥ {i + 1}/{num_manual_wallets} –Ω–∞ —Ä—É—á–Ω–æ–π –∫–æ—à–µ–ª–µ–∫ {str(manual_wallet)[:8]}...")

            result = await self.transfer_sol(
                self.main_keypair,
                manual_wallet,
                amount_per_wallet
            )

            results.append(result)

            if not result['success']:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', 'Unknown error')}")

            await asyncio.sleep(1)

        return results

    async def transfer_to_manual_wallets_token(self, token_contract: str) -> List[Dict]:
        """–°–æ–±–∏—Ä–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã —Å –º—É–ª—å—Ç–∏-–∫–æ—à–µ–ª—å–∫–æ–≤ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –Ω–∞ —Ä—É—á–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏"""
        if not self.manual_wallets:
            logger.error("‚ùå –†—É—á–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ .env!")
            return []

        results = []

        try:
            token_mint = Pubkey.from_string(token_contract)
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–æ–∫–µ–Ω–∞: {e}")
            return results

        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã —Å –º—É–ª—å—Ç–∏-–∫–æ—à–µ–ª—å–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π
        logger.info("üì• –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–∫–µ–Ω—ã —Å –º—É–ª—å—Ç–∏-–∫–æ—à–µ–ª—å–∫–æ–≤...")
        collect_results = await self.collect_token(token_contract)

        successful_collects = sum(1 for r in collect_results if r['success'])
        if successful_collects == 0:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å —Ç–æ–∫–µ–Ω—ã —Å –º—É–ª—å—Ç–∏-–∫–æ—à–µ–ª—å–∫–æ–≤")
            return results

        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...")
        await asyncio.sleep(5)

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
        main_token_balance = await self.get_token_balance(self.main_keypair.pubkey(), token_mint)

        if main_token_balance <= 0:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞ —Ä—É—á–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏")
            return results

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –Ω–∞ –∫–∞–∂–¥—ã–π —Ä—É—á–Ω–æ–π –∫–æ—à–µ–ª–µ–∫
        num_manual_wallets = len(self.manual_wallets)
        amount_per_wallet = main_token_balance / num_manual_wallets

        logger.info(f"üí∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º {main_token_balance:.6f} —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ {num_manual_wallets} —Ä—É—á–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤")
        logger.info(f"üí≥ –ü–æ {amount_per_wallet:.6f} —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∫–æ—à–µ–ª–µ–∫")

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –∫–∞–∂–¥—ã–π —Ä—É—á–Ω–æ–π –∫–æ—à–µ–ª–µ–∫
        for i, manual_wallet in enumerate(self.manual_wallets):
            logger.info(f"üì§ –ü–µ—Ä–µ–≤–æ–¥ {i + 1}/{num_manual_wallets} –Ω–∞ —Ä—É—á–Ω–æ–π –∫–æ—à–µ–ª–µ–∫ {str(manual_wallet)[:8]}...")

            result = await self.transfer_token(
                self.main_keypair,
                manual_wallet,
                token_mint,
                amount_per_wallet
            )

            results.append(result)

            if not result['success']:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', 'Unknown error')}")

            await asyncio.sleep(2)

        return results

    async def distribute_sol_to_manual(self) -> List[Dict]:
        """–†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç SOL —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞ —Ä—É—á–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ (–±–µ–∑ —Å–±–æ—Ä–∞ —Å –º—É–ª—å—Ç–∏)"""
        if not self.manual_wallets:
            logger.error("‚ùå –†—É—á–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ .env!")
            return []

        results = []

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
        main_balance = await self.get_sol_balance(self.main_keypair.pubkey())
        gas_reserve = self.multi_config.gas_reserve
        available_balance = main_balance - gas_reserve

        if available_balance <= 0:
            logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ SOL –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è. –ë–∞–ª–∞–Ω—Å: {main_balance:.4f}, —Ä–µ–∑–µ—Ä–≤: {gas_reserve}")
            return results

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –Ω–∞ –∫–∞–∂–¥—ã–π —Ä—É—á–Ω–æ–π –∫–æ—à–µ–ª–µ–∫
        num_manual_wallets = len(self.manual_wallets)
        amount_per_wallet = available_balance / num_manual_wallets

        logger.info(f"üí∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º {available_balance:.4f} SOL –Ω–∞ {num_manual_wallets} —Ä—É—á–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤")
        logger.info(f"üí≥ –ü–æ {amount_per_wallet:.4f} SOL –Ω–∞ –∫–æ—à–µ–ª–µ–∫")

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –∫–∞–∂–¥—ã–π —Ä—É—á–Ω–æ–π –∫–æ—à–µ–ª–µ–∫
        for i, manual_wallet in enumerate(self.manual_wallets):
            logger.info(f"üì§ –ü–µ—Ä–µ–≤–æ–¥ {i + 1}/{num_manual_wallets} –Ω–∞ —Ä—É—á–Ω–æ–π –∫–æ—à–µ–ª–µ–∫ {str(manual_wallet)[:8]}...")

            result = await self.transfer_sol(
                self.main_keypair,
                manual_wallet,
                amount_per_wallet
            )

            results.append(result)

            if not result['success']:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', 'Unknown error')}")

            await asyncio.sleep(1)

        return results

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –Ω–∞ –∫–∞–∂–¥—ã–π –∫–æ—à–µ–ª–µ–∫
        num_wallets = len(self.multi_wallets)
        amount_per_wallet = available_balance / num_wallets

        logger.info(f"üí∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º {available_balance:.4f} SOL –Ω–∞ {num_wallets} –∫–æ—à–µ–ª—å–∫–æ–≤")
        logger.info(f"üí≥ –ü–æ {amount_per_wallet:.4f} SOL –Ω–∞ –∫–æ—à–µ–ª–µ–∫")

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –∫–∞–∂–¥—ã–π –∫–æ—à–µ–ª–µ–∫
        for i, wallet in enumerate(self.multi_wallets):
            logger.info(f"üì§ –ü–µ—Ä–µ–≤–æ–¥ {i + 1}/{num_wallets} –Ω–∞ {str(wallet.pubkey())[:8]}...")

            result = await self.transfer_sol(
                self.main_keypair,
                wallet.pubkey(),
                amount_per_wallet
            )

            results.append(result)

            if not result['success']:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', 'Unknown error')}")

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
            await asyncio.sleep(1)

        return results

    async def distribute_token(self, token_contract: str) -> List[Dict]:
        """–†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–æ–∫–µ–Ω—ã —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –ø–æ –º—É–ª—å—Ç–∏-–∫–æ—à–µ–ª—å–∫–∞–º"""
        if not self.multi_wallets:
            logger.error("‚ùå –ú—É–ª—å—Ç–∏-–∫–æ—à–µ–ª—å–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
            return []

        results = []

        try:
            token_mint = Pubkey.from_string(token_contract)
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–æ–∫–µ–Ω–∞: {e}")
            return results

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
        main_token_balance = await self.get_token_balance(self.main_keypair.pubkey(), token_mint)

        if main_token_balance <= 0:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ—à–µ–ª—å–∫–µ")
            return results

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –Ω–∞ –∫–∞–∂–¥—ã–π –∫–æ—à–µ–ª–µ–∫
        num_wallets = len(self.multi_wallets)
        amount_per_wallet = main_token_balance / num_wallets

        logger.info(f"üí∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º {main_token_balance:.6f} —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ {num_wallets} –∫–æ—à–µ–ª—å–∫–æ–≤")
        logger.info(f"üí≥ –ü–æ {amount_per_wallet:.6f} —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∫–æ—à–µ–ª–µ–∫")

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –∫–∞–∂–¥—ã–π –∫–æ—à–µ–ª–µ–∫
        for i, wallet in enumerate(self.multi_wallets):
            logger.info(f"üì§ –ü–µ—Ä–µ–≤–æ–¥ {i + 1}/{num_wallets} –Ω–∞ {str(wallet.pubkey())[:8]}...")

            result = await self.transfer_token(
                self.main_keypair,
                wallet.pubkey(),
                token_mint,
                amount_per_wallet
            )

            results.append(result)

            if not result['success']:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', 'Unknown error')}")

            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ —Ç–æ–∫–µ–Ω–æ–≤
            await asyncio.sleep(2)

        return results

    async def collect_sol(self) -> List[Dict]:
        """–°–æ–±–∏—Ä–∞–µ—Ç SOL —Å –º—É–ª—å—Ç–∏-–∫–æ—à–µ–ª—å–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ—à–µ–ª–µ–∫"""
        if not self.multi_wallets:
            logger.error("‚ùå –ú—É–ª—å—Ç–∏-–∫–æ—à–µ–ª—å–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
            return []

        results = []

        for i, wallet in enumerate(self.multi_wallets):
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
            balance = await self.get_sol_balance(wallet.pubkey())

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é —Å—É–º–º—É (–º–∏–Ω—É—Å —Ä–µ–∑–µ—Ä–≤ –Ω–∞ –≥–∞–∑)
            gas_reserve = self.multi_config.gas_reserve
            available_balance = balance - gas_reserve

            if available_balance <= 0:
                logger.info(f"‚è≠Ô∏è –ö–æ—à–µ–ª–µ–∫ {i + 1}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ SOL –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞")
                continue

            logger.info(f"üì• –°–æ–±–∏—Ä–∞–µ–º {available_balance:.4f} SOL —Å –∫–æ—à–µ–ª—å–∫–∞ {i + 1}")

            result = await self.transfer_sol(
                wallet,
                self.main_keypair.pubkey(),
                available_balance
            )

            results.append(result)

            if not result['success']:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', 'Unknown error')}")

            await asyncio.sleep(1)

        return results

    async def collect_token(self, token_contract: str) -> List[Dict]:
        """–°–æ–±–∏—Ä–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã —Å –º—É–ª—å—Ç–∏-–∫–æ—à–µ–ª—å–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ—à–µ–ª–µ–∫"""
        if not self.multi_wallets:
            logger.error("‚ùå –ú—É–ª—å—Ç–∏-–∫–æ—à–µ–ª—å–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
            return []

        results = []

        try:
            token_mint = Pubkey.from_string(token_contract)
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–æ–∫–µ–Ω–∞: {e}")
            return results

        for i, wallet in enumerate(self.multi_wallets):
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ –∫–æ—à–µ–ª—å–∫–∞
            token_balance = await self.get_token_balance(wallet.pubkey(), token_mint)

            if token_balance <= 0:
                logger.info(f"‚è≠Ô∏è –ö–æ—à–µ–ª–µ–∫ {i + 1}: –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞")
                continue

            logger.info(f"üì• –°–æ–±–∏—Ä–∞–µ–º {token_balance:.6f} —Ç–æ–∫–µ–Ω–æ–≤ —Å –∫–æ—à–µ–ª—å–∫–∞ {i + 1}")

            result = await self.transfer_token(
                wallet,
                self.main_keypair.pubkey(),
                token_mint,
                token_balance
            )

            results.append(result)

            if not result['success']:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', 'Unknown error')}")

            await asyncio.sleep(2)

        return results

    async def show_balances(self, token_contract: Optional[str] = None):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å—ã –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤"""
        print("\nüí∞ –ë–ê–õ–ê–ù–°–´ –ö–û–®–ï–õ–¨–ö–û–í")
        print("=" * 60)

        total_sol = 0.0
        total_token = 0.0

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ—à–µ–ª–µ–∫
        main_balance = await self.get_sol_balance(self.main_keypair.pubkey())
        total_sol += main_balance

        address = str(self.main_keypair.pubkey())
        print(f"üîë –û—Å–Ω–æ–≤–Ω–æ–π: {address[:8]}...{address[-8:]} | {main_balance:.4f} SOL")

        if token_contract:
            try:
                token_mint = Pubkey.from_string(token_contract)
                token_balance = await self.get_token_balance(self.main_keypair.pubkey(), token_mint)
                total_token += token_balance
                print(f"   üíé –¢–æ–∫–µ–Ω–æ–≤: {token_balance:.6f}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–∞: {e}")

        print("-" * 60)

        # –ú—É–ª—å—Ç–∏-–∫–æ—à–µ–ª—å–∫–∏ (—Å–Ω–∞–π–ø–∏–Ω–≥)
        if self.multi_wallets:
            print("ü§ñ –ú–£–õ–¨–¢–ò-–ö–û–®–ï–õ–¨–ö–ò (—Å–Ω–∞–π–ø–∏–Ω–≥):")
            for i, wallet in enumerate(self.multi_wallets):
                sol_balance = await self.get_sol_balance(wallet.pubkey())
                total_sol += sol_balance

                address = str(wallet.pubkey())
                print(f"üí≥ –ö–æ—à–µ–ª–µ–∫ {i + 1}: {address[:8]}...{address[-8:]} | {sol_balance:.4f} SOL")

                if token_contract:
                    try:
                        token_mint = Pubkey.from_string(token_contract)
                        token_balance = await self.get_token_balance(wallet.pubkey(), token_mint)
                        total_token += token_balance
                        print(f"   üíé –¢–æ–∫–µ–Ω–æ–≤: {token_balance:.6f}")
                    except Exception:
                        pass

        print("-" * 60)

        # –†—É—á–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏
        if self.manual_wallets:
            print("‚úã –†–£–ß–ù–´–ï –ö–û–®–ï–õ–¨–ö–ò (–¥–ª—è —Ä—É—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏):")
            for i, wallet in enumerate(self.manual_wallets):
                sol_balance = await self.get_sol_balance(wallet)
                total_sol += sol_balance

                address = str(wallet)
                print(f"üë§ –†—É—á–Ω–æ–π {i + 1}: {address[:8]}...{address[-8:]} | {sol_balance:.4f} SOL")

                if token_contract:
                    try:
                        token_mint = Pubkey.from_string(token_contract)
                        token_balance = await self.get_token_balance(wallet, token_mint)
                        total_token += token_balance
                        print(f"   üíé –¢–æ–∫–µ–Ω–æ–≤: {token_balance:.6f}")
                    except Exception:
                        pass

        print("=" * 60)
        print(f"üìä –ò–¢–û–ì–û: {total_sol:.4f} SOL")

        if token_contract:
            print(f"üíé –ò–¢–û–ì–û —Ç–æ–∫–µ–Ω–æ–≤: {total_token:.6f}")

        # –†–µ–∑–µ—Ä–≤ –Ω–∞ –≥–∞–∑
        num_all_wallets = len(self.multi_wallets) + 1 + len(self.manual_wallets)
        total_gas_reserve = self.multi_config.gas_reserve * num_all_wallets
        available_for_trading = total_sol - total_gas_reserve

        print(f"‚õΩ –†–µ–∑–µ—Ä–≤ –Ω–∞ –≥–∞–∑: {total_gas_reserve:.4f} SOL")
        print(f"üíπ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: {available_for_trading:.4f} SOL")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –º–µ–Ω—é"""
    print("üîÑ MORI Transfer Manager")
    print("=" * 50)

    try:
        manager = TransferManager()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã:")
        print("   - –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ—à–µ–ª–µ–∫ –≤ .env (SOLANA_PRIVATE_KEY)")
        print("   - –ú—É–ª—å—Ç–∏-–∫–æ—à–µ–ª—å–∫–∏ (MULTI_WALLET_PRIVATE_KEYS)")
        return

    if len(manager.multi_wallets) == 0 and len(manager.manual_wallets) == 0:
        print("‚ùå –ù–∏ –º—É–ª—å—Ç–∏-–∫–æ—à–µ–ª—å–∫–∏, –Ω–∏ —Ä—É—á–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python utils/wallet_generator.py")
        print("üí° –î–æ–±–∞–≤—å—Ç–µ –≤ .env: MANUAL_WALLET_1=address1, MANUAL_WALLET_2=address2...")
        return

    while True:
        print("\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
        print("=" * 50)
        print("üì§ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï:")
        print("1. üì§ –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å SOL –ø–æ –º—É–ª—å—Ç–∏-–∫–æ—à–µ–ª—å–∫–∞–º")
        print("2. üì§ –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –ø–æ –º—É–ª—å—Ç–∏-–∫–æ—à–µ–ª—å–∫–∞–º")
        print("3. üéØ –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å SOL –Ω–∞ —Ä—É—á–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏")
        print("")
        print("üì• –°–ë–û–†:")
        print("4. üì• –°–æ–±—Ä–∞—Ç—å SOL —Å –º—É–ª—å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π")
        print("5. üì• –°–æ–±—Ä–∞—Ç—å —Ç–æ–∫–µ–Ω—ã —Å –º—É–ª—å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π")
        print("")
        print("üö® –ê–í–ê–†–ò–ô–ù–´–ï (–º—É–ª—å—Ç–∏ ‚Üí —Ä—É—á–Ω—ã–µ):")
        print("6. üö® –°–æ–±—Ä–∞—Ç—å SOL –∏ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –Ω–∞ —Ä—É—á–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏")
        print("7. üö® –°–æ–±—Ä–∞—Ç—å —Ç–æ–∫–µ–Ω—ã –∏ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –Ω–∞ —Ä—É—á–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏")
        print("")
        print("üí∞ –ò–ù–§–û:")
        print("8. üí∞ –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å—ã –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤")
        print("0. ‚ùå –í—ã—Ö–æ–¥")

        choice = input("\nüëâ –í–∞—à –≤—ã–±–æ—Ä: ").strip()

        if choice == "1":
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ SOL –ø–æ –º—É–ª—å—Ç–∏-–∫–æ—à–µ–ª—å–∫–∞–º
            if not manager.multi_wallets:
                print("‚ùå –ú—É–ª—å—Ç–∏-–∫–æ—à–µ–ª—å–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
                continue

            print("\nüì§ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ SOL –ø–æ –º—É–ª—å—Ç–∏-–∫–æ—à–µ–ª—å–∫–∞–º")
            print("=" * 50)
            print("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:")
            print("1. ‚öñÔ∏è –ü–æ—Ä–æ–≤–Ω—É –º–µ–∂–¥—É –≤—Å–µ–º–∏ –∫–æ—à–µ–ª—å–∫–∞–º–∏")
            print("2. üí∞ –£–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—É–º–º—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ")

            mode = input("üëâ –í–∞—à –≤—ã–±–æ—Ä: ").strip()

            if mode == "1":
                # –ü–æ—Ä–æ–≤–Ω—É
                print("\nüì§ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä–æ–≤–Ω—É...")
                results = await manager.distribute_sol()

            elif mode == "2":
                # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—É–º–º—ã
                num_wallets = len(manager.multi_wallets)
                print(f"\nüí∞ –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—ã –¥–ª—è {num_wallets} –∫–æ—à–µ–ª—å–∫–æ–≤:")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å
                main_balance = await manager.get_sol_balance(manager.main_keypair.pubkey())
                available = main_balance - manager.multi_config.gas_reserve
                print(f"üí≥ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {available:.4f} SOL")

                custom_amounts = []
                total_requested = 0.0

                for i in range(num_wallets):
                    while True:
                        try:
                            amount_str = input(f"üí≥ –ö–æ—à–µ–ª–µ–∫ {i + 1} (SOL): ").strip()
                            if not amount_str:
                                amount = 0.0
                            else:
                                amount = float(amount_str)

                            if amount < 0:
                                print("‚ùå –°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π!")
                                continue

                            custom_amounts.append(amount)
                            total_requested += amount
                            break
                        except ValueError:
                            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!")

                print(f"\nüìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—à–µ–Ω–æ: {total_requested:.4f} SOL")
                print(f"üí≥ –î–æ—Å—Ç—É–ø–Ω–æ: {available:.4f} SOL")

                if total_requested > available:
                    print("‚ùå –ó–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—É—é!")
                    continue

                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                print("\nüîç –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:")
                for i, amount in enumerate(custom_amounts):
                    if amount > 0:
                        print(f"üí≥ –ö–æ—à–µ–ª–µ–∫ {i + 1}: {amount:.4f} SOL")

                confirm = input("\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ? (y/n): ").strip().lower()
                if confirm not in ['y', 'yes', '–¥–∞']:
                    print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ!")
                    continue

                print("\nüì§ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—É–º–º–∞–º...")
                results = await manager.distribute_sol(custom_amounts)
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
                continue

            if results is not None:
                success_count = sum(1 for r in results if r['success'])
            else:
                success_count = 0
                print("‚ùå –§—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ None!")
            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{len(results)} —É—Å–ø–µ—à–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤")

        elif choice == "2":
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ –º—É–ª—å—Ç–∏-–∫–æ—à–µ–ª—å–∫–∞–º
            if not manager.multi_wallets:
                print("‚ùå –ú—É–ª—å—Ç–∏-–∫–æ—à–µ–ª—å–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
                continue
            token_contract = input("\nüí∞ –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–æ–∫–µ–Ω–∞: ").strip()
            if not token_contract:
                print("‚ùå –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –≤–≤–µ–¥–µ–Ω!")
                continue

            print(f"\nüì§ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ {token_contract[:8]}... –ø–æ –º—É–ª—å—Ç–∏-–∫–æ—à–µ–ª—å–∫–∞–º")
            results = await manager.distribute_token(token_contract)

            success_count = sum(1 for r in results if r['success'])
            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{len(results)} —É—Å–ø–µ—à–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤")

        elif choice == "3":
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ SOL –Ω–∞ —Ä—É—á–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏
            if not manager.manual_wallets:
                print("‚ùå –†—É—á–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
                print("üí° –î–æ–±–∞–≤—å—Ç–µ –≤ .env: MANUAL_WALLET_1=address1, MANUAL_WALLET_2=address2...")
                continue
            print("\nüéØ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ SOL –Ω–∞ —Ä—É—á–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏...")
            results = await manager.distribute_sol_to_manual()

            success_count = sum(1 for r in results if r['success'])
            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{len(results)} —É—Å–ø–µ—à–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤")
            print("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å —Ä—É–∫–∞–º–∏ —Å —Ä—É—á–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤!")

        elif choice == "4":
            # –°–±–æ—Ä SOL —Å –º—É–ª—å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π
            if not manager.multi_wallets:
                print("‚ùå –ú—É–ª—å—Ç–∏-–∫–æ—à–µ–ª—å–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
                continue
            print("\nüì• –°–±–æ—Ä SOL —Å –º—É–ª—å—Ç–∏-–∫–æ—à–µ–ª—å–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π...")
            results = await manager.collect_sol()

            success_count = sum(1 for r in results if r['success'])
            total_collected = sum(r['amount'] for r in results if r['success'])
            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{len(results)} —É—Å–ø–µ—à–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤")
            print(f"üí∞ –°–æ–±—Ä–∞–Ω–æ: {total_collected:.4f} SOL")

        elif choice == "5":
            # –°–±–æ—Ä —Ç–æ–∫–µ–Ω–æ–≤ —Å –º—É–ª—å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π
            if not manager.multi_wallets:
                print("‚ùå –ú—É–ª—å—Ç–∏-–∫–æ—à–µ–ª—å–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
                continue
            token_contract = input("\nüí∞ –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–æ–∫–µ–Ω–∞: ").strip()
            if not token_contract:
                print("‚ùå –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –≤–≤–µ–¥–µ–Ω!")
                continue

            print(f"\nüì• –°–±–æ—Ä —Ç–æ–∫–µ–Ω–æ–≤ {token_contract[:8]}... —Å –º—É–ª—å—Ç–∏-–∫–æ—à–µ–ª—å–∫–æ–≤")
            results = await manager.collect_token(token_contract)

            success_count = sum(1 for r in results if r['success'])
            total_collected = sum(r['amount'] for r in results if r['success'])
            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{len(results)} —É—Å–ø–µ—à–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤")
            print(f"üí∞ –°–æ–±—Ä–∞–Ω–æ: {total_collected:.6f} —Ç–æ–∫–µ–Ω–æ–≤")

        elif choice == "6":
            # –ê–í–ê–†–ò–ô–ù–´–ô: –°–æ–±—Ä–∞—Ç—å SOL –∏ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –Ω–∞ —Ä—É—á–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏
            if not manager.manual_wallets:
                print("‚ùå –†—É—á–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
                print("üí° –î–æ–±–∞–≤—å—Ç–µ –≤ .env: MANUAL_WALLET_1=address1, MANUAL_WALLET_2=address2...")
                continue
            print("\nüö® –ê–í–ê–†–ò–ô–ù–´–ô –†–ï–ñ–ò–ú: –°–æ–±–∏—Ä–∞–µ–º SOL —Å –º—É–ª—å—Ç–∏ ‚Üí –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —Ä—É—á–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏")
            print("üí° –≠—Ç–æ –∑–∞–π–º–µ—Ç ~30-60 —Å–µ–∫—É–Ω–¥...")
            results = await manager.transfer_to_manual_wallets_sol()

            success_count = sum(1 for r in results if r['success'])
            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{len(results)} —É—Å–ø–µ—à–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–∞ —Ä—É—á–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏")
            print("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å —Ä—É–∫–∞–º–∏ —Å —Ä—É—á–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤!")

        elif choice == "7":
            # –ê–í–ê–†–ò–ô–ù–´–ô: –°–æ–±—Ä–∞—Ç—å —Ç–æ–∫–µ–Ω—ã –∏ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –Ω–∞ —Ä—É—á–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏
            if not manager.manual_wallets:
                print("‚ùå –†—É—á–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
                continue
            token_contract = input("\nüí∞ –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–æ–∫–µ–Ω–∞: ").strip()
            if not token_contract:
                print("‚ùå –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –≤–≤–µ–¥–µ–Ω!")
                continue

            print(f"\nüö® –ê–í–ê–†–ò–ô–ù–´–ô –†–ï–ñ–ò–ú: –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–∫–µ–Ω—ã {token_contract[:8]}... —Å –º—É–ª—å—Ç–∏ ‚Üí –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —Ä—É—á–Ω—ã–µ")
            print("üí° –≠—Ç–æ –∑–∞–π–º–µ—Ç ~60-120 —Å–µ–∫—É–Ω–¥...")
            results = await manager.transfer_to_manual_wallets_token(token_contract)

            success_count = sum(1 for r in results if r['success'])
            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{len(results)} —É—Å–ø–µ—à–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–∞ —Ä—É—á–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏")
            print("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–∞–≤–∞—Ç—å —Ä—É–∫–∞–º–∏ —Å —Ä—É—á–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤!")

        elif choice == "8":
            # –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å—ã
            token_contract = input("\nüí∞ –ö–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–æ–∫–µ–Ω–∞ (–∏–ª–∏ Enter –¥–ª—è —Ç–æ–ª—å–∫–æ SOL): ").strip()
            if not token_contract:
                token_contract = None

            await manager.show_balances(token_contract)

        elif choice == "0":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break

        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")


if __name__ == "__main__":
    asyncio.run(main())