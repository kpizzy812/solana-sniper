#!/usr/bin/env python3
"""
üö® MORI Sniper Bot - –ê–≤–∞—Ä–∏–π–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –ø–æ–∫—É–ø–∫–∏
–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–µ–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ - –≤–≤–µ–ª –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∏ –∫—É–ø–∏–ª
"""

import asyncio
import sys
import time
import re
from pathlib import Path
from typing import Optional, List

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PATH
sys.path.append(str(Path(__file__).parent))

from loguru import logger
from config.settings import settings
from config.multi_wallet import MultiWalletConfig
from trading.jupiter import jupiter_trader
from utils.addresses import is_valid_solana_address, is_wrapped_sol


class EmergencyBuyer:
    """–ê–≤–∞—Ä–∏–π–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤"""

    def __init__(self):
        self.multi_wallet_config = MultiWalletConfig()
        self.start_time = None

    def print_header(self):
        """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        print("üö® MORI SNIPER - –ê–í–ê–†–ò–ô–ù–ê–Ø –ü–û–ö–£–ü–ö–ê")
        print("=" * 60)
        print("‚ö° –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–µ–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        print("üéØ –í–≤–µ—Å—Ç–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç ‚Üí –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –ø–æ–∫—É–ø–∫–∞")
        print("=" * 60)
        print()

    def show_current_settings(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        print("‚öôÔ∏è –¢–ï–ö–£–©–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò:")
        print("-" * 30)

        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
        if self.multi_wallet_config.is_enabled():
            if self.multi_wallet_config.use_max_available_balance:
                print("üí∞ –†–µ–∂–∏–º: –¢–†–ê–¢–ò–ú –í–ï–°–¨ –î–û–°–¢–£–ü–ù–´–ô –ë–ê–õ–ê–ù–° —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤")
                print(f"üé≠ –ö–æ—à–µ–ª—å–∫–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(self.multi_wallet_config.wallets)}")
                print(f"üìä –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {self.multi_wallet_config.distribution_strategy}")
                print(f"‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Ç–æ—Ä–≥–æ–≤–ª–µ–π: {self.multi_wallet_config.initial_delay_seconds}s")
            else:
                print("üí∞ –†–µ–∂–∏–º: –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—É–º–º—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤")
                print(f"üé≠ –ö–æ—à–µ–ª—å–∫–æ–≤: {len(self.multi_wallet_config.wallets)}")
                print(f"üíµ –°—É–º–º–∞ –Ω–∞ –∫–æ—à–µ–ª–µ–∫: {settings.trading.trade_amount_sol} SOL")
                print(f"üî¢ –°–¥–µ–ª–æ–∫ –Ω–∞ –∫–æ—à–µ–ª–µ–∫: {settings.trading.num_purchases}")
        else:
            print("üí∞ –†–µ–∂–∏–º: –û–±—ã—á–Ω—ã–π –æ–¥–∏–Ω–æ—á–Ω—ã–π –∫–æ—à–µ–ª–µ–∫")
            print(f"üíµ –†–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏: {settings.trading.trade_amount_sol} SOL")
            print(f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫: {settings.trading.num_purchases}")

        print(f"üìä –ü—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ: {settings.trading.slippage_bps / 100}%")
        print(f"‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏: {settings.trading.priority_fee:,} microlamports")
        print(f"üåê –°–µ—Ç—å: {settings.solana.network}")
        print(f"üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {'–í–∫–ª—é—á–µ–Ω—ã' if settings.security.enable_security_checks else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}")
        print()

    def get_token_input(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print("üéØ –í–í–û–î –¢–û–ö–ï–ù–ê –î–õ–Ø –ü–û–ö–£–ü–ö–ò:")
        print("-" * 30)
        print("üí° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:")
        print("   ‚Ä¢ –ü—Ä—è–º–æ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç: JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN")
        print("   ‚Ä¢ Jupiter —Å—Å—ã–ª–∫–∞: https://jup.ag/swap/SOL-CONTRACT")
        print("   ‚Ä¢ Dexscreener: https://dexscreener.com/solana/CONTRACT")
        print("   ‚Ä¢ –õ—é–±–æ–π URL —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º")
        print()

        while True:
            user_input = input("üîó –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ URL: ").strip()

            if not user_input:
                print("‚ùå –í–≤–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                continue

            if user_input.lower() in ['exit', 'quit', 'q']:
                print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return None

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∏–∑ –≤–≤–æ–¥–∞
            contract = self.extract_contract_from_input(user_input)

            if contract:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ –±–∞–∑–æ–≤—ã–π —Ç–æ–∫–µ–Ω
                if is_wrapped_sol(contract):
                    print("‚ùå –≠—Ç–æ Wrapped SOL - –ø–æ–∫—É–ø–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞")
                    continue

                print(f"‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–∞–π–¥–µ–Ω: {contract}")

                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                confirm = input("\nüö® –ü–û–î–¢–í–ï–†–î–ò–¢–¨ –ü–û–ö–£–ü–ö–£? [y/N]: ").strip().lower()
                if confirm in ['y', 'yes', '–¥–∞', '–¥']:
                    return contract
                else:
                    print("‚ùå –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                    return None
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞–ª–∏–¥–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–æ–∫–µ–Ω–∞")
                print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
                continue

    def extract_contract_from_input(self, user_input: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
        try:
            # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –≥–æ—Ç–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç
            if is_valid_solana_address(user_input):
                return user_input

            # –ï—Å–ª–∏ —ç—Ç–æ URL - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à–∏ –ø–∞—Ä—Å–µ—Ä—ã
            if 'http' in user_input.lower():
                from utils.addresses import extract_addresses_from_any_url
                addresses = extract_addresses_from_any_url(user_input)
                if addresses:
                    return addresses[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π

            # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
            from utils.addresses import extract_addresses_fast
            addresses = extract_addresses_fast(user_input, settings.ai)
            if addresses:
                return addresses[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π

            return None

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {e}")
            return None

    async def execute_emergency_buy(self, token_contract: str):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≤–∞—Ä–∏–π–Ω–æ–π –ø–æ–∫—É–ø–∫–∏"""
        self.start_time = time.time()

        logger.critical("üö® –ù–ê–ß–ê–õ–ê–°–¨ –ê–í–ê–†–ò–ô–ù–ê–Ø –ü–û–ö–£–ü–ö–ê!")
        logger.critical(f"üéØ –ö–æ–Ω—Ç—Ä–∞–∫—Ç: {token_contract}")

        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Jupiter trader
            logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...")
            if not await jupiter_trader.start():
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
            health = await jupiter_trader.health_check()
            if health.get('status') != 'healthy':
                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π: {health}")

            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ (–∏–º–∏—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª)
            trading_signal = {
                'platform': 'emergency_manual',
                'source': '–ê–≤–∞—Ä–∏–π–Ω–∞—è –ø–æ–∫—É–ø–∫–∞',
                'author': 'Manual Input',
                'url': 'manual://emergency',
                'contracts': [token_contract],
                'confidence': 1.0,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
                'urgency': 'high',
                'timestamp': time.time(),
                'content_preview': f"–ê–≤–∞—Ä–∏–π–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–∞ {token_contract}",
                'emergency': True
            }

            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
            if (hasattr(jupiter_trader, 'multi_wallet_manager') and
                    jupiter_trader.multi_wallet_manager and
                    self.multi_wallet_config.is_enabled()):

                # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏
                await self.execute_multi_wallet_buy(token_contract, trading_signal)
            else:
                # –û–±—ã—á–Ω–∞—è –ø–æ–∫—É–ø–∫–∞
                await self.execute_single_wallet_buy(token_contract, trading_signal)

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤–∞—Ä–∏–π–Ω–æ–π –ø–æ–∫—É–ø–∫–∏: {e}")
            print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        finally:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Jupiter trader
            await jupiter_trader.stop()

    async def execute_multi_wallet_buy(self, token_contract: str, trading_signal: dict):
        """–ü–æ–∫—É–ø–∫–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∫–æ—à–µ–ª—å–∫–∞–º–∏"""
        logger.critical("üé≠ –ü–û–ö–£–ü–ö–ê –° –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ú–ò –ö–û–®–ï–õ–¨–ö–ê–ú–ò")

        if self.multi_wallet_config.use_max_available_balance:
            # –¢—Ä–∞—Ç–∏–º –≤–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å
            result = await jupiter_trader.multi_wallet_manager.execute_multi_wallet_trades(
                token_address=token_contract,
                base_trade_amount=0,  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ max balance
                num_trades=0,  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ max balance
                source_info=trading_signal
            )
        else:
            # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—É–º–º—ã
            result = await jupiter_trader.multi_wallet_manager.execute_multi_wallet_trades(
                token_address=token_contract,
                base_trade_amount=settings.trading.trade_amount_sol,
                num_trades=settings.trading.num_purchases,
                source_info=trading_signal
            )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.show_multi_wallet_results(result)

    async def execute_single_wallet_buy(self, token_contract: str, trading_signal: dict):
        """–ü–æ–∫—É–ø–∫–∞ —Å –æ–¥–∏–Ω–æ—á–Ω—ã–º –∫–æ—à–µ–ª—å–∫–æ–º"""
        logger.critical("üì± –ü–û–ö–£–ü–ö–ê –° –û–î–ò–ù–û–ß–ù–´–ú –ö–û–®–ï–õ–¨–ö–û–ú")

        results = await jupiter_trader.execute_sniper_trades(
            token_address=token_contract,
            source_info=trading_signal
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.show_single_wallet_results(results)

    def show_multi_wallet_results(self, result):
        """–ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤"""
        execution_time = (time.time() - self.start_time)

        print("\n" + "=" * 60)
        print("üé≠ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–£–õ–¨–¢–ò-–ö–û–®–ï–õ–¨–ö–û–í–û–ô –ü–û–ö–£–ü–ö–ò")
        print("=" * 60)

        print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.1f} —Å–µ–∫—É–Ω–¥")
        print(f"üéØ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {result.total_trades}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {result.successful_trades}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {result.failed_trades}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {result.success_rate:.1f}%")
        print(f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ SOL: {result.total_sol_spent:.6f}")
        print(f"ü™ô –ö—É–ø–ª–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {result.total_tokens_bought:,.0f}")

        if result.delayed_start:
            print(f"‚è±Ô∏è –ë—ã–ª–∞ –∑–∞–¥–µ—Ä–∂–∫–∞: {self.multi_wallet_config.initial_delay_seconds}s")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –∫–æ—à–µ–ª—å–∫–∞–º
        if result.wallet_results:
            print(f"\nüìä –î–ï–¢–ê–õ–ò –ü–û –ö–û–®–ï–õ–¨–ö–ê–ú:")
            unique_wallets = {}
            for wallet_addr, trade_result in result.wallet_results:
                short_addr = f"{wallet_addr[:8]}...{wallet_addr[-8:]}"
                if wallet_addr not in unique_wallets:
                    unique_wallets[wallet_addr] = {
                        'successful': 0,
                        'failed': 0,
                        'sol_spent': 0.0,
                        'tokens_bought': 0.0
                    }

                wallet_stats = unique_wallets[wallet_addr]
                if trade_result.success:
                    wallet_stats['successful'] += 1
                    wallet_stats['sol_spent'] += trade_result.input_amount
                    wallet_stats['tokens_bought'] += trade_result.output_amount or 0
                else:
                    wallet_stats['failed'] += 1

            for wallet_addr, stats in unique_wallets.items():
                short_addr = f"{wallet_addr[:8]}...{wallet_addr[-8:]}"
                print(
                    f"  üé≠ {short_addr}: {stats['successful']}/{stats['successful'] + stats['failed']} —É—Å–ø–µ—à–Ω–æ, {stats['sol_spent']:.4f} SOL")

        # –ü–æ–¥–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        signatures = [r.signature for _, r in result.wallet_results if r.success and r.signature]
        if signatures:
            print(f"\nüìù –ü–û–î–ü–ò–°–ò –£–°–ü–ï–®–ù–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:")
            for i, sig in enumerate(signatures):
                print(f"  {i + 1}. {sig}")

    def show_single_wallet_results(self, results: List):
        """–ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞"""
        execution_time = (time.time() - self.start_time)
        successful = [r for r in results if r.success]
        failed = [r for r in results if not r.success]

        print("\n" + "=" * 60)
        print("üì± –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ö–£–ü–ö–ò")
        print("=" * 60)

        print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.1f} —Å–µ–∫—É–Ω–¥")
        print(f"üéØ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {len(results)}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {len(successful)}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {len(failed)}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {len(successful) / max(len(results), 1) * 100:.1f}%")

        if successful:
            total_sol = sum(r.input_amount for r in successful)
            total_tokens = sum(r.output_amount or 0 for r in successful)
            avg_time = sum(r.execution_time_ms for r in successful) / len(successful)

            print(f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ SOL: {total_sol:.6f}")
            print(f"ü™ô –ö—É–ø–ª–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {total_tokens:,.0f}")
            print(f"‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.0f}ms")

            # –ü–æ–¥–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            print(f"\nüìù –ü–û–î–ü–ò–°–ò –£–°–ü–ï–®–ù–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:")
            for i, result in enumerate(successful):
                if result.signature:
                    print(f"  {i + 1}. {result.signature}")

        # –û—à–∏–±–∫–∏
        if failed:
            print(f"\n‚ùå –û–®–ò–ë–ö–ò:")
            for i, result in enumerate(failed):
                print(f"  {i + 1}. {result.error}")

    async def run_emergency_mode(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        try:
            self.print_header()
            self.show_current_settings()

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            token_contract = self.get_token_input()
            if not token_contract:
                return

            print(f"\nüö® –ù–ê–ß–ò–ù–ê–ï–ú –ê–í–ê–†–ò–ô–ù–£–Æ –ü–û–ö–£–ü–ö–£: {token_contract}")
            print("=" * 60)

            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
            await self.execute_emergency_buy(token_contract)

            print("\nüéâ –ê–í–ê–†–ò–ô–ù–ê–Ø –ü–û–ö–£–ü–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")

        except KeyboardInterrupt:
            print("\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")

    def show_quick_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –±—ã—Å—Ç—Ä—É—é —Å–ø—Ä–∞–≤–∫—É"""
        print("üí° –ë–´–°–¢–†–ê–Ø –°–ü–†–ê–í–ö–ê:")
        print("-" * 20)
        print("üéØ –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ –±–µ–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        print("‚ö° –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–æ–∫–µ–Ω–∞ –∏ –æ–Ω –∫—É–ø–∏—Ç –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º")
        print("üé≠ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ –æ–¥–∏–Ω –∫–æ—à–µ–ª–µ–∫, —Ç–∞–∫ –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ")
        print("üõ°Ô∏è –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ")
        print()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    buyer = EmergencyBuyer()
    buyer.show_quick_help()
    await buyer.run_emergency_mode()


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    asyncio.run(main())