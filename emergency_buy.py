#!/usr/bin/env python3
"""
üö® MORI Sniper Bot - –ê–≤–∞—Ä–∏–π–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
–°–∏—Å—Ç–µ–º–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –≤—Ä—É—á–Ω—É—é
"""

import asyncio
import sys
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PATH
sys.path.append(str(Path(__file__).parent))

from loguru import logger
from config.settings import settings
from config.multi_wallet import MultiWalletConfig
from trading.jupiter import jupiter_trader
from utils.addresses import is_valid_solana_address, is_wrapped_sol, extract_addresses_fast


class EmergencyBuyer:
    """–ê–≤–∞—Ä–∏–π–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""

    def __init__(self):
        self.multi_wallet_config = MultiWalletConfig()
        self.start_time = 0.0

    def print_header(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
        print("\nüö® –ê–í–ê–†–ò–ô–ù–ê–Ø –ü–û–ö–£–ü–ö–ê –¢–û–ö–ï–ù–û–í")
        print("=" * 60)
        print("‚ö° –°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä–æ–π –ø–æ–∫—É–ø–∫–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏–π")
        print("üéØ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤–≤–æ–¥–∞")
        print("üõ°Ô∏è –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã")
        print("=" * 60)

    def show_current_settings(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        print("‚öôÔ∏è –¢–ï–ö–£–©–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò:")
        print(f"  üìä –ü—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ: {settings.trading.slippage_bps / 100}%")
        print(f"  üí∞ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è: {settings.trading.priority_fee:,} microlamports")
        print(f"  ‚õΩ –†–µ–∑–µ—Ä–≤ –Ω–∞ –≥–∞–∑: 0.015 SOL (–¥–æ–±–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)")

        if self.multi_wallet_config.is_enabled():
            wallet_count = len(self.multi_wallet_config.wallets)
            print(f"  üé≠ –†–µ–∂–∏–º: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ ({wallet_count} —à—Ç)")

            if self.multi_wallet_config.use_max_available_balance:
                print(f"  üí∏ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –í–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å –∫–∞–∂–¥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ (–º–∏–Ω—É—Å —Ä–µ–∑–µ—Ä–≤)")
            else:
                total_per_wallet = settings.trading.trade_amount_sol * settings.trading.num_purchases
                gas_per_wallet = 0.015  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ä–µ–∑–µ—Ä–≤
                total_needed_per_wallet = total_per_wallet + gas_per_wallet
                total_overall = total_needed_per_wallet * wallet_count
                print(
                    f"  üí∏ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {settings.trading.trade_amount_sol} SOL x {settings.trading.num_purchases} —Å –∫–∞–∂–¥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞")
                print(f"  üìà –ù—É–∂–Ω–æ SOL –Ω–∞ –∫–æ—à–µ–ª–µ–∫: {total_needed_per_wallet:.6f} SOL (–≤–∫–ª—é—á–∞—è –≥–∞–∑)")
                print(f"  üìä –û–±—â–∏–π –æ–±—ä–µ–º: {total_overall:.6f} SOL")
        else:
            total_investment = settings.trading.trade_amount_sol * settings.trading.num_purchases
            gas_reserve = 0.015
            total_needed = total_investment + gas_reserve
            print(f"  üì± –†–µ–∂–∏–º: –û–¥–∏–Ω–æ—á–Ω—ã–π –∫–æ—à–µ–ª–µ–∫")
            print(
                f"  üí∏ –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: {settings.trading.trade_amount_sol} SOL x {settings.trading.num_purchases} = {total_investment} SOL")
            print(f"  üìä –í—Å–µ–≥–æ –Ω—É–∂–Ω–æ: {total_needed:.6f} SOL (–≤–∫–ª—é—á–∞—è –≥–∞–∑)")

        print()



    def get_token_input(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–æ–∫–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            print("üéØ –í–í–û–î –ö–û–ù–¢–†–ê–ö–¢–ê –¢–û–ö–ï–ù–ê:")
            print("   –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:")
            print("   ‚Ä¢ –ü—Ä—è–º–æ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç: JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN")
            print("   ‚Ä¢ Jupiter —Å—Å—ã–ª–∫–∞: jup.ag/swap/SOL-CONTRACT")
            print("   ‚Ä¢ DEX —Å—Å—ã–ª–∫–∞: dexscreener.com/solana/CONTRACT")
            print("   ‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º")
            print()

            user_input = input("üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∏–ª–∏ —Å—Å—ã–ª–∫—É: ").strip()

            if not user_input:
                print("‚ùå –ü—É—Å—Ç–æ–π –≤–≤–æ–¥")
                return ""

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            token_contract = self.extract_contract_from_input(user_input)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Wrapped SOL
            if is_wrapped_sol(token_contract):
                print("‚ö†Ô∏è –≠—Ç–æ Wrapped SOL - –ø–æ–∫—É–ø–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
                return ""

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç: {token_contract}")
            confirm = input("‚ùì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É? [y/N]: ").lower()

            if confirm not in ['y', 'yes', '–¥–∞', '1']:
                print("‚ùå –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return ""

            return token_contract

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–≤–æ–¥–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return ""

    def extract_contract_from_input(self, user_input: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
        try:
            # –ü—Ä—è–º–æ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç
            if is_valid_solana_address(user_input):
                return user_input

            # URL –∏–ª–∏ —Å—Å—ã–ª–∫–∞
            if 'http' in user_input.lower() or any(domain in user_input.lower() for domain in
                                                   ['jup.ag', 'dexscreener', 'raydium', 'birdeye']):
                from utils.addresses import extract_addresses_from_any_url
                addresses = extract_addresses_from_any_url(user_input)
                if addresses:
                    return addresses[0]

            # –ü–æ–∏—Å–∫ –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
            addresses = extract_addresses_fast(user_input, settings.ai)
            if addresses:
                return addresses[0]

            raise ValueError("–ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–≤–µ–¥–µ–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ")

        except Exception as e:
            raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç: {e}")

    async def start_trading_system_with_retries(self, max_retries: int = 3) -> bool:
        """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        for attempt in range(max_retries):
            try:
                logger.info(f"üöÄ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã {attempt + 1}/{max_retries}...")

                if await jupiter_trader.start():
                    logger.success("‚úÖ –¢–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {e}")

            # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
            if attempt < max_retries - 1:
                retry_delay = 2 * (attempt + 1)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {retry_delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                await asyncio.sleep(retry_delay)

        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
        return False

    async def check_trading_system_health(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Å –±–æ–ª–µ–µ –º—è–≥–∫–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏"""
        try:
            health = await jupiter_trader.health_check()
            logger.info(f"üîç Health check —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {health}")

            # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–µ —É—Å–ª–æ–≤–∏—è - –ø—Ä–∏–Ω–∏–º–∞–µ–º "degraded" –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç
            status = health.get('status', 'unknown')
            components = health.get('components', {})

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            solana_rpc = components.get('solana_rpc', 'unknown')
            wallet_info = health.get('wallet_info', {})

            if solana_rpc == 'healthy' and wallet_info.get('address'):
                logger.success("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç")

                # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å Jupiter API, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º
                jupiter_api = components.get('jupiter_api', 'unknown')
                if jupiter_api == 'error':
                    logger.warning("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å Jupiter API, –Ω–æ –±—É–¥–µ–º –ø—Ä–æ–±–æ–≤–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–∞—Ç—å")

                return True
            else:
                logger.error(
                    f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç: Solana RPC={solana_rpc}, Wallet={bool(wallet_info.get('address'))}")
                return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
            # –í –∞–≤–∞—Ä–∏–π–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ–±—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö health check
            logger.warning("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º health check –∏ –ø—Ä–æ–±—É–µ–º —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é")
            return True

    async def check_wallet_balance_before_trade(self, token_contract: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞ –ø–µ—Ä–µ–¥ —Ç–æ—Ä–≥–æ–≤–ª–µ–π - –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø"""
        try:
            print("\nüí∞ –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê –ö–û–®–ï–õ–¨–ö–û–í...")
            print("=" * 50)

            if (hasattr(jupiter_trader, 'multi_wallet_manager') and
                    jupiter_trader.multi_wallet_manager and
                    self.multi_wallet_config.is_enabled()):

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
                print("üé≠ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤:")

                wallets_with_funds = 0
                total_available_sol = 0.0
                gas_reserve_per_wallet = 0.015  # –†–µ–∑–µ—Ä–≤ –Ω–∞ –≥–∞–∑

                for i, wallet in enumerate(self.multi_wallet_config.wallets):
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
                        balance_response = await jupiter_trader.solana_client.get_balance(wallet.keypair.pubkey())
                        sol_balance = balance_response.value / 1e9

                        # –í—ã—á–∏—Å–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é —Å—É–º–º—É (–±–∞–ª–∞–Ω—Å - —Ä–µ–∑–µ—Ä–≤ –Ω–∞ –≥–∞–∑)
                        available_balance = max(0, sol_balance - gas_reserve_per_wallet)

                        wallet_addr = str(wallet.keypair.pubkey())
                        short_addr = f"{wallet_addr[:8]}...{wallet_addr[-8:]}"

                        if available_balance > 0.001:  # –ú–∏–Ω–∏–º—É–º 0.001 SOL –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
                            print(f"  ‚úÖ {short_addr}: {sol_balance:.6f} SOL (–¥–æ—Å—Ç—É–ø–Ω–æ: {available_balance:.6f})")
                            wallets_with_funds += 1
                            total_available_sol += available_balance
                        else:
                            print(f"  ‚ùå {short_addr}: {sol_balance:.6f} SOL (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤)")

                    except Exception as e:
                        print(f"  ‚ùå {short_addr}: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ - {e}")

                print(f"\nüìä –ò—Ç–æ–≥–æ:")
                print(f"  üí∞ –ö–æ—à–µ–ª—å–∫–æ–≤ —Å —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏: {wallets_with_funds}/{len(self.multi_wallet_config.wallets)}")
                print(f"  ü™ô –û–±—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {total_available_sol:.6f} SOL")

                if wallets_with_funds == 0:
                    print("‚ùå –ù–ï–¢ –ö–û–®–ï–õ–¨–ö–û–í –° –î–û–°–¢–ê–¢–û–ß–ù–´–ú–ò –°–†–ï–î–°–¢–í–ê–ú–ò!")
                    return False

            else:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
                print("üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞:")

                try:
                    main_wallet = jupiter_trader.executor.wallet_keypair
                    balance_response = await jupiter_trader.solana_client.get_balance(main_wallet.pubkey())
                    sol_balance = balance_response.value / 1e9

                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ SOL –Ω—É–∂–Ω–æ
                    required_sol = settings.trading.trade_amount_sol * settings.trading.num_purchases
                    gas_reserve = 0.015  # –†–µ–∑–µ—Ä–≤ –Ω–∞ –≥–∞–∑
                    total_required = required_sol + gas_reserve

                    wallet_addr = str(main_wallet.pubkey())
                    short_addr = f"{wallet_addr[:8]}...{wallet_addr[-8:]}"

                    print(f"  üè¶ –ö–æ—à–µ–ª–µ–∫: {short_addr}")
                    print(f"  üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {sol_balance:.6f} SOL")
                    print(f"  üéØ –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: {required_sol:.6f} SOL")
                    print(f"  ‚õΩ –†–µ–∑–µ—Ä–≤ –Ω–∞ –≥–∞–∑: {gas_reserve:.6f} SOL")
                    print(f"  üìä –í—Å–µ–≥–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è: {total_required:.6f} SOL")

                    if sol_balance < total_required:
                        print(f"  ‚ùå –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –°–†–ï–î–°–¢–í! –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {total_required - sol_balance:.6f} SOL")
                        return False
                    else:
                        print(f"  ‚úÖ –°—Ä–µ–¥—Å—Ç–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ! –û—Å—Ç–∞—Ç–æ–∫ –ø–æ—Å–ª–µ —Ç–æ—Ä–≥–æ–≤–ª–∏: {sol_balance - total_required:.6f} SOL")

                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
                    return False

            print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
            return False

    async def execute_emergency_buy(self, token_contract: str):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≤–∞—Ä–∏–π–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–∞–ª–∞–Ω—Å–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        print(f"\nüéØ –ù–ê–ß–ò–ù–ê–ï–ú –ü–û–ö–£–ü–ö–£: {token_contract}")
        print("=" * 60)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Jupiter
        await jupiter_trader.start()

        try:
            # –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ü–ï–†–ï–î —Ç–æ—Ä–≥–æ–≤–ª–µ–π
            if not await self.check_wallet_balance_before_trade(token_contract):
                print("\n‚ùå –ü–û–ö–£–ü–ö–ê –û–¢–ú–ï–ù–ï–ù–ê: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
                print("üí° –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫(–∏) –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
                return

            start_time = time.time()

            # –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
            trading_signal = {
                'platform': 'emergency',
                'source': 'manual_input',
                'timestamp': time.time(),
                'content_preview': f"–ê–≤–∞—Ä–∏–π–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ {token_contract}",
                'emergency': True
            }

            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
            if (hasattr(jupiter_trader, 'multi_wallet_manager') and
                    jupiter_trader.multi_wallet_manager and
                    self.multi_wallet_config.is_enabled()):

                print("\nüé≠ –†–µ–∂–∏–º: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏")

                if self.multi_wallet_config.use_max_available_balance:
                    print("üí∞ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –í–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å (—Å —Ä–µ–∑–µ—Ä–≤–æ–º –Ω–∞ –≥–∞–∑)")
                    result = await jupiter_trader.multi_wallet_manager.execute_multi_wallet_trades(
                        token_address=token_contract,
                        base_trade_amount=0,
                        num_trades=0,
                        source_info=trading_signal
                    )
                else:
                    print(f"üí∞ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {settings.trading.trade_amount_sol} SOL x {settings.trading.num_purchases}")
                    result = await jupiter_trader.multi_wallet_manager.execute_multi_wallet_trades(
                        token_address=token_contract,
                        base_trade_amount=settings.trading.trade_amount_sol,
                        num_trades=settings.trading.num_purchases,
                        source_info=trading_signal
                    )

                # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
                print(f"\nüéâ –ü–û–ö–£–ü–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
                print("=" * 60)
                print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {result.successful_trades}/{result.total_trades}")
                print(f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ SOL: {result.total_sol_spent:.6f}")
                print(f"ü™ô –ö—É–ø–ª–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {result.total_tokens_bought:,.6f}")
                print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {(time.time() - start_time):.1f}s")
                print(f"üìä –°–∫–æ—Ä–æ—Å—Ç—å: {result.execution_time_ms:.0f}ms")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–æ—à–µ–ª—å–∫–∞–º
                print(f"\nüìã –î–ï–¢–ê–õ–ò –ü–û –ö–û–®–ï–õ–¨–ö–ê–ú:")
                print("-" * 60)

                successful_wallets = 0
                for wallet_addr, trade_result in result.wallet_results:
                    status = "‚úÖ" if trade_result.success else "‚ùå"
                    short_addr = f"{wallet_addr[:8]}...{wallet_addr[-8:]}"
                    print(f"{status} {short_addr}")

                    if trade_result.success:
                        successful_wallets += 1
                        print(f"   üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {trade_result.input_amount:.6f} SOL")
                        if trade_result.output_amount:
                            print(f"   ü™ô –ü–æ–ª—É—á–µ–Ω–æ: {trade_result.output_amount:,.6f} —Ç–æ–∫–µ–Ω–æ–≤")
                        if trade_result.signature:
                            print(f"   üìù –ü–æ–¥–ø–∏—Å—å: {trade_result.signature}")
                    else:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞: {trade_result.error}")
                    print()

            else:
                print("\nüì± –†–µ–∂–∏–º: –û–¥–∏–Ω–æ—á–Ω—ã–π –∫–æ—à–µ–ª–µ–∫")

                results = await jupiter_trader.execute_sniper_trades(
                    token_address=token_contract,
                    source_info=trading_signal
                )

                successful = [r for r in results if r.success]

                print(f"\nüéâ –ü–û–ö–£–ü–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
                print("=" * 60)
                print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {len(successful)}/{len(results)}")

                if successful:
                    total_sol = sum(r.input_amount for r in successful)
                    total_tokens = sum(r.output_amount or 0 for r in successful)
                    print(f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ SOL: {total_sol:.6f}")
                    print(f"ü™ô –ö—É–ø–ª–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {total_tokens:,.6f}")
                    print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {(time.time() - start_time):.1f}s")

                    print(f"\nüìã –î–ï–¢–ê–õ–ò –°–î–ï–õ–û–ö:")
                    print("-" * 60)

                    for i, result in enumerate(successful):
                        print(f"‚úÖ –°–¥–µ–ª–∫–∞ {i + 1}:")
                        print(f"   üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {result.input_amount:.6f} SOL")
                        if result.output_amount:
                            print(f"   ü™ô –ü–æ–ª—É—á–µ–Ω–æ: {result.output_amount:,.6f} —Ç–æ–∫–µ–Ω–æ–≤")
                        if result.signature:
                            print(f"   üìù –ü–æ–¥–ø–∏—Å—å: {result.signature}")
                        print()

        finally:
            await jupiter_trader.stop()

    async def execute_multi_wallet_buy(self, token_contract: str, trading_signal: dict):
        """–ü–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏"""
        logger.info("üé≠ –ü–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏...")

        try:
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ —Å —É—á–µ—Ç–æ–º —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
            if self.multi_wallet_config.use_max_available_balance:
                # –†–µ–∂–∏–º "–≤–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å"
                logger.critical("üí∞ –†–ï–ñ–ò–ú: –¢—Ä–∞—Ç–∞ –≤—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å –∫–∞–∂–¥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞")
                result = await jupiter_trader.multi_wallet_manager.execute_multi_wallet_trades(
                    token_address=token_contract,
                    base_trade_amount=0,  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ max balance
                    num_trades=0,  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ max balance
                    source_info=trading_signal
                )
            else:
                # –†–µ–∂–∏–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—É–º–º
                logger.critical(f"üí∞ –†–ï–ñ–ò–ú: {settings.trading.trade_amount_sol} SOL x {settings.trading.num_purchases}")
                result = await jupiter_trader.multi_wallet_manager.execute_multi_wallet_trades(
                    token_address=token_contract,
                    base_trade_amount=settings.trading.trade_amount_sol,
                    num_trades=settings.trading.num_purchases,
                    source_info=trading_signal
                )

            self.show_multi_wallet_results(result)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ —á–µ—Ä–µ–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤: {e}")

    async def execute_single_wallet_buy(self, token_contract: str, trading_signal: dict):
        """–ü–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑ –æ–¥–∏–Ω–æ—á–Ω—ã–π –∫–æ—à–µ–ª–µ–∫"""
        logger.info("üì± –ü–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑ –æ–¥–∏–Ω–æ—á–Ω—ã–π –∫–æ—à–µ–ª–µ–∫...")

        try:
            results = await jupiter_trader.execute_sniper_trades(
                token_address=token_contract,
                source_info=trading_signal
            )

            self.show_single_wallet_results(results)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ —á–µ—Ä–µ–∑ –æ–¥–∏–Ω–æ—á–Ω—ã–π –∫–æ—à–µ–ª–µ–∫: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞: {e}")

    def show_multi_wallet_results(self, result):
        """–ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤"""
        execution_time = (time.time() - self.start_time)

        print("\n" + "=" * 60)
        print("üé≠ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –ö–û–®–ï–õ–¨–ö–û–í")
        print("=" * 60)

        print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.1f} —Å–µ–∫—É–Ω–¥")
        print(f"üéØ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {result.total_trades}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {result.successful_trades}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {result.failed_trades}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {result.success_rate:.1f}%")

        if result.successful_trades > 0:
            print(f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ SOL: {result.total_sol_spent:.6f}")
            print(f"ü™ô –ö—É–ø–ª–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {result.total_tokens_bought:,.0f}")
            avg_time = result.execution_time_ms / max(result.total_trades, 1)
            print(f"‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.0f}ms")

        if result.delayed_start:
            print(f"‚è±Ô∏è –ë—ã–ª–∞ –∑–∞–¥–µ—Ä–∂–∫–∞: {self.multi_wallet_config.initial_delay_seconds}s")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –∫–æ—à–µ–ª—å–∫–∞–º
        if result.wallet_results:
            print(f"\nüìä –î–ï–¢–ê–õ–ò –ü–û –ö–û–®–ï–õ–¨–ö–ê–ú:")
            unique_wallets = {}
            for wallet_addr, trade_result in result.wallet_results:
                short_addr = f"{wallet_addr[:8]}...{wallet_addr[-8:]}"
                if wallet_addr not in unique_wallets:
                    unique_wallets[wallet_addr] = {
                        'successful': 0,
                        'failed': 0,
                        'sol_spent': 0.0,
                        'tokens_bought': 0.0
                    }

                wallet_stats = unique_wallets[wallet_addr]
                if trade_result.success:
                    wallet_stats['successful'] += 1
                    wallet_stats['sol_spent'] += trade_result.input_amount
                    wallet_stats['tokens_bought'] += trade_result.output_amount or 0
                else:
                    wallet_stats['failed'] += 1

            for wallet_addr, stats in unique_wallets.items():
                short_addr = f"{wallet_addr[:8]}...{wallet_addr[-8:]}"
                print(
                    f"  üé≠ {short_addr}: {stats['successful']}/{stats['successful'] + stats['failed']} —É—Å–ø–µ—à–Ω–æ, {stats['sol_spent']:.4f} SOL")

        # –ü–æ–¥–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        signatures = [r.signature for _, r in result.wallet_results if r.success and r.signature]
        if signatures:
            print(f"\nüìù –ü–û–î–ü–ò–°–ò –£–°–ü–ï–®–ù–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:")
            for i, sig in enumerate(signatures):
                print(f"  {i + 1}. {sig}")

    def show_single_wallet_results(self, results: list):
        """–ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞"""
        execution_time = (time.time() - self.start_time)
        successful = [r for r in results if r.success]
        failed = [r for r in results if not r.success]

        print("\n" + "=" * 60)
        print("üì± –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ö–£–ü–ö–ò")
        print("=" * 60)

        print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.1f} —Å–µ–∫—É–Ω–¥")
        print(f"üéØ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {len(results)}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {len(successful)}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {len(failed)}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {len(successful) / max(len(results), 1) * 100:.1f}%")

        if successful:
            total_sol = sum(r.input_amount for r in successful)
            total_tokens = sum(r.output_amount or 0 for r in successful)
            avg_time = sum(r.execution_time_ms for r in successful) / len(successful)

            print(f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ SOL: {total_sol:.6f}")
            print(f"ü™ô –ö—É–ø–ª–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {total_tokens:,.0f}")
            print(f"‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.0f}ms")

            # –ü–æ–¥–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            print(f"\nüìù –ü–û–î–ü–ò–°–ò –£–°–ü–ï–®–ù–´–• –¢–†–ê–ù–ó–ê–ö–¶–ò–ô:")
            for i, result in enumerate(successful):
                if result.signature:
                    print(f"  {i + 1}. {result.signature}")

        # –û—à–∏–±–∫–∏
        if failed:
            print(f"\n‚ùå –û–®–ò–ë–ö–ò:")
            for i, result in enumerate(failed):
                print(f"  {i + 1}. {result.error}")

    async def run_emergency_mode(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        try:
            self.print_header()
            self.show_current_settings()

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            token_contract = self.get_token_input()
            if not token_contract:
                return

            print(f"\nüö® –ù–ê–ß–ò–ù–ê–ï–ú –ê–í–ê–†–ò–ô–ù–£–Æ –ü–û–ö–£–ü–ö–£: {token_contract}")
            print("=" * 60)

            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
            await self.execute_emergency_buy(token_contract)

            print("\nüéâ –ê–í–ê–†–ò–ô–ù–ê–Ø –ü–û–ö–£–ü–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")

        except KeyboardInterrupt:
            print("\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")

    def show_quick_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –±—ã—Å—Ç—Ä—É—é —Å–ø—Ä–∞–≤–∫—É"""
        print("üí° –ë–´–°–¢–†–ê–Ø –°–ü–†–ê–í–ö–ê:")
        print("-" * 20)
        print("üéØ –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ –±–µ–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        print("‚ö° –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–æ–∫–µ–Ω–∞ –∏ –æ–Ω –∫—É–ø–∏—Ç –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º")
        print("üé≠ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ –æ–¥–∏–Ω –∫–æ—à–µ–ª–µ–∫, —Ç–∞–∫ –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ")
        print("üõ°Ô∏è –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ")
        print()



async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    buyer = EmergencyBuyer()
    buyer.show_quick_help()
    await buyer.run_emergency_mode()


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    asyncio.run(main())