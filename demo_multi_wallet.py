#!/usr/bin/env python3
"""
üé≠ MORI Sniper Bot - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
"""

import asyncio
import sys
import random
from pathlib import Path

sys.path.append(str(Path(__file__).parent))

from loguru import logger
from config.multi_wallet import MultiWalletConfig


class MultiWalletDemo:
    def __init__(self):
        self.config = MultiWalletConfig()

    async def run_demo(self):
        print("üé≠ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –ö–û–®–ï–õ–¨–ö–û–í")
        print("=" * 60)
        print()

        if not self.config.is_enabled():
            await self.show_disabled_demo()
            return

        await self.demo_configuration()
        await self.demo_wallet_selection()
        await self.demo_amount_randomization()
        await self.demo_trading_simulation()

        self.show_summary()

    async def show_disabled_demo(self):
        print("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
        print()
        print("üìã –ß—Ç–æ –≤—ã —É–≤–∏–¥–∏—Ç–µ –ø–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è:")
        print()

        print("1Ô∏è‚É£ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:")
        print("   üìä –ö–æ—à–µ–ª—å–∫–æ–≤: 8")
        print("   üé≤ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: balanced")
        print("   ‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞: 15 —Å–µ–∫—É–Ω–¥")
        print()

        print("2Ô∏è‚É£ –ó–ê–©–ò–¢–ê –û–¢ –ë–õ–≠–ö–õ–ò–°–¢–ê:")
        print("   ‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Ç–æ—Ä–≥–æ–≤–ª–µ–π: 15 —Å–µ–∫—É–Ω–¥")
        print("   üé≠ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–∞–∑–Ω—ã–º –∞–¥—Ä–µ—Å–∞–º")
        print("   üé≤ –°–ª—É—á–∞–π–Ω—ã–µ —Å—É–º–º—ã –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã")
        print()

        print("üí° –î–õ–Ø –í–ö–õ–Æ–ß–ï–ù–ò–Ø:")
        print("   1. python utils/wallet_generator.py")
        print("   2. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –∫–æ—à–µ–ª—å–∫–∏ —Å —Ä–∞–∑–Ω—ã—Ö CEX")
        print("   3. USE_MULTI_WALLET=true –≤ .env")

    async def demo_configuration(self):
        print("1Ô∏è‚É£ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´")
        print("-" * 30)

        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ—à–µ–ª—å–∫–æ–≤: {len(self.config.wallets)}")
        print(f"üé≤ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {self.config.distribution_strategy}")
        print(f"‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞: {self.config.initial_delay_seconds} —Å–µ–∫—É–Ω–¥")
        print(f"üí´ –†–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—è: {self.config.randomize_amounts}")
        print()

    async def demo_wallet_selection(self):
        print("2Ô∏è‚É£ –í–´–ë–û–† –ö–û–®–ï–õ–¨–ö–û–í")
        print("-" * 25)

        for i in range(3):
            test_amount = round(random.uniform(0.08, 0.15), 4)
            wallet = self.config.select_wallet_for_trade(test_amount)

            if wallet:
                print(f"‚úÖ –°–¥–µ–ª–∫–∞ {i + 1}: {test_amount} SOL —á–µ—Ä–µ–∑ {wallet.address[:8]}...")
            else:
                print(f"‚ùå –°–¥–µ–ª–∫–∞ {i + 1}: –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞")

            await asyncio.sleep(0.5)
        print()

    async def demo_amount_randomization(self):
        print("3Ô∏è‚É£ –†–ê–ù–î–û–ú–ò–ó–ê–¶–ò–Ø –°–£–ú–ú")
        print("-" * 25)

        base_amount = 0.1
        for i in range(3):
            randomized = self.config.randomize_trade_amount(base_amount)
            variation = ((randomized - base_amount) / base_amount) * 100
            print(f"üí∞ {base_amount} SOL ‚Üí {randomized:.4f} SOL ({variation:+.1f}%)")
        print()

    async def demo_trading_simulation(self):
        print("4Ô∏è‚É£ –°–ò–ú–£–õ–Ø–¶–ò–Ø –¢–û–†–ì–û–í–û–ô –°–ï–°–°–ò–ò")
        print("-" * 35)

        print("üö® –ü–û–õ–£–ß–ï–ù –¢–û–†–ì–û–í–´–ô –°–ò–ì–ù–ê–õ!")
        print("   üéØ –¢–æ–∫–µ–Ω: DemoToken123...ABC")
        print("   üì± –ò—Å—Ç–æ—á–Ω–∏–∫: @DemoChannel")
        print()

        if self.config.initial_delay_seconds > 0:
            print(f"‚è±Ô∏è –ó–ê–î–ï–†–ñ–ö–ê: {self.config.initial_delay_seconds} —Å–µ–∫—É–Ω–¥")
            for i in range(min(3, self.config.initial_delay_seconds)):
                print(f"   ‚è≥ {i + 1} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(1)
            print("   üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –¢–û–†–ì–û–í–õ–Æ!")
            print()

        print("üí• –í–´–ü–û–õ–ù–ï–ù–ò–ï –°–î–ï–õ–û–ö:")
        num_trades = min(len(self.config.wallets), 3)

        for i in range(num_trades):
            trade_amount = self.config.randomize_trade_amount(0.1)
            wallet = self.config.select_wallet_for_trade(trade_amount)

            if wallet:
                execution_time = random.uniform(150, 300)
                print(
                    f"‚ö° –°–¥–µ–ª–∫–∞ {i + 1}: {trade_amount:.4f} SOL —á–µ—Ä–µ–∑ {wallet.address[:8]}... ({execution_time:.0f}ms)")
                wallet.trades_count += 1

                if i < num_trades - 1:
                    delay = self.config.get_inter_trade_delay()
                    await asyncio.sleep(min(delay, 1))
        print()

    def show_summary(self):
        print("üéâ –ò–¢–û–ì–ò –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò")
        print("=" * 30)

        total_balance = sum(w.balance_sol for w in self.config.wallets)
        used_wallets = len([w for w in self.config.wallets if w.trades_count > 0])

        print(f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance:.4f} SOL")
        print(f"üé≠ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∫–æ—à–µ–ª—å–∫–æ–≤: {used_wallets}")
        print()

        print("üî• –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:")
        print("‚úÖ –°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ –±–ª—ç–∫–ª–∏—Å—Ç–∞ –Ω–∞ 85-95%")
        print("‚úÖ –ò–º–∏—Ç–∞—Ü–∏—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è")
        print("‚úÖ –ì–∏–±–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
        print()

        print("üöÄ –ì–û–¢–û–í–´ –ö –°–ù–ê–ô–ü–ò–ù–ì–£ –° –ó–ê–©–ò–¢–û–ô!")


async def main():
    demo = MultiWalletDemo()
    await demo.run_demo()


if __name__ == "__main__":
    asyncio.run(main())