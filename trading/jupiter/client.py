"""
üåê MORI Sniper Bot - Jupiter API Client
HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Jupiter DEX API v1
"""

import time
import json
from typing import Optional, Dict
import aiohttp
from loguru import logger

from config.settings import settings
from .models import QuoteResponse, SwapRequest


class JupiterAPIClient:
    """HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è Jupiter DEX API"""

    def __init__(self):
        self.session: Optional[aiohttp.ClientSession] = None
        self.quote_cache = {}  # –ö—ç—à –∫–æ—Ç–∏—Ä–æ–≤–æ–∫

    async def start(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP —Å–µ—Å—Å–∏–∏"""
        timeout = aiohttp.ClientTimeout(total=settings.jupiter.timeout)
        connector = aiohttp.TCPConnector(
            limit=settings.jupiter.max_concurrent_requests,
            limit_per_host=settings.jupiter.max_concurrent_requests
        )
        self.session = aiohttp.ClientSession(
            timeout=timeout,
            connector=connector
        )
        logger.info("üåê Jupiter API –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def stop(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        if self.session:
            await self.session.close()
        logger.info("üõë Jupiter API –∫–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def get_quote(self, input_mint: str, output_mint: str, amount: int,
                        slippage_bps: int) -> Optional[QuoteResponse]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –æ—Ç Jupiter API - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –¥–ª—è v1"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            cache_key = f"{input_mint}:{output_mint}:{amount}:{slippage_bps}"
            if cache_key in self.quote_cache:
                cached_time, quote = self.quote_cache[cache_key]
                if time.time() - cached_time < 2:  # –ö—ç—à –Ω–∞ 2 —Å–µ–∫—É–Ω–¥—ã
                    return quote

            # –ü–†–ò–û–†–ò–¢–ï–¢: –ò—Å–ø–æ–ª—å–∑—É–µ–º lite-api (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)
            if settings.jupiter.api_key and not settings.jupiter.use_lite_api:
                base_url = settings.jupiter.api_url
                headers = {
                    'Content-Type': 'application/json',
                    'x-api-key': settings.jupiter.api_key
                }
            else:
                base_url = settings.jupiter.lite_api_url
                headers = {'Content-Type': 'application/json'}

            url = f"{base_url}/quote"

            params = {
                'inputMint': input_mint,
                'outputMint': output_mint,
                'amount': amount,
                'slippageBps': slippage_bps,
                'onlyDirectRoutes': 'false',
                'asLegacyTransaction': 'false',
                'platformFeeBps': '0',
                'maxAccounts': '64'
            }

            logger.debug(f"üîç Quote –∑–∞–ø—Ä–æ—Å: {url} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params}")

            async with self.session.get(url, params=params, headers=headers) as response:
                if response.status == 200:
                    data = await response.json()

                    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê: –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                    quote = QuoteResponse(
                        input_mint=data['inputMint'],
                        output_mint=data['outputMint'],
                        in_amount=data['inAmount'],
                        out_amount=data['outAmount'],
                        other_amount_threshold=data.get('otherAmountThreshold', data['outAmount']),  # –ö–†–ò–¢–ò–ß–ù–û–ï –ü–û–õ–ï!
                        swap_mode=data.get('swapMode', 'ExactIn'),
                        slippage_bps=slippage_bps,
                        platform_fee=data.get('platformFee'),
                        price_impact_pct=data.get('priceImpactPct', '0'),
                        route_plan=data.get('routePlan', [])
                    )

                    # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    self.quote_cache[cache_key] = (time.time(), quote)

                    logger.debug(f"‚úÖ Quote –ø–æ–ª—É—á–µ–Ω–∞ —á–µ—Ä–µ–∑ {base_url}")
                    return quote

                elif response.status == 401:
                    logger.warning("‚ö†Ô∏è 401 Unauthorized - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ lite-api")
                    return await self._get_quote_fallback(input_mint, output_mint, amount, slippage_bps)
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ Quote API {response.status}: {error_text}")
                    return await self._get_quote_fallback(input_mint, output_mint, amount, slippage_bps)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ç–∏—Ä–æ–≤–∫–∏: {e}")
            return await self._get_quote_fallback(input_mint, output_mint, amount, slippage_bps)

    async def _get_quote_fallback(self, input_mint: str, output_mint: str, amount: int,
                                  slippage_bps: int) -> Optional[QuoteResponse]:
        """Fallback –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ç–∏—Ä–æ–≤–∫–∏"""
        try:
            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint
            alt_url = settings.jupiter.api_url if settings.jupiter.use_lite_api else settings.jupiter.lite_api_url
            url = f"{alt_url}/quote"

            params = {
                'inputMint': input_mint,
                'outputMint': output_mint,
                'amount': amount,
                'slippageBps': slippage_bps,
                'onlyDirectRoutes': 'false',
                'asLegacyTransaction': 'false',
                'platformFeeBps': '0',
                'maxAccounts': '64'
            }

            headers = {'Content-Type': 'application/json'}
            if settings.jupiter.api_key and alt_url == settings.jupiter.api_url:
                headers['x-api-key'] = settings.jupiter.api_key

            async with self.session.get(url, params=params, headers=headers) as response:
                if response.status == 200:
                    data = await response.json()
                    logger.info(f"‚úÖ Fallback quote –ø–æ–ª—É—á–µ–Ω–∞ —á–µ—Ä–µ–∑ {alt_url}")

                    return QuoteResponse(
                        input_mint=data['inputMint'],
                        output_mint=data['outputMint'],
                        in_amount=data['inAmount'],
                        out_amount=data['outAmount'],
                        other_amount_threshold=data.get('otherAmountThreshold', data['outAmount']),
                        swap_mode=data.get('swapMode', 'ExactIn'),
                        slippage_bps=slippage_bps,
                        platform_fee=data.get('platformFee'),
                        price_impact_pct=data.get('priceImpactPct', '0'),
                        route_plan=data.get('routePlan', [])
                    )
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå Fallback Quote API —Ç–æ–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.status} - {error_text}")
                    return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ fallback –∫–æ—Ç–∏—Ä–æ–≤–∫–∏: {e}")
            return None

    async def get_swap_transaction(self, swap_request: SwapRequest) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ–±–º–µ–Ω–∞ –æ—Ç Jupiter API - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            if settings.jupiter.api_key and not settings.jupiter.use_lite_api:
                base_url = settings.jupiter.api_url
                headers = {
                    'Content-Type': 'application/json',
                    'x-api-key': settings.jupiter.api_key
                }
            else:
                base_url = settings.jupiter.lite_api_url
                headers = {'Content-Type': 'application/json'}

            url = f"{base_url}/swap"
            payload = swap_request.to_dict()

            logger.debug(f"üîç Swap –∑–∞–ø—Ä–æ—Å: {url}")
            logger.debug(f"üìù Payload: {json.dumps(payload, indent=2)}")

            async with self.session.post(url, json=payload, headers=headers) as response:
                if response.status == 200:
                    data = await response.json()
                    logger.debug(f"‚úÖ Swap transaction –ø–æ–ª—É—á–µ–Ω–∞ —á–µ—Ä–µ–∑ {base_url}")
                    return data.get('swapTransaction')

                elif response.status == 401:
                    logger.warning("‚ö†Ô∏è 401 Unauthorized –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ swap - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ lite-api")
                    return await self._get_swap_transaction_fallback(swap_request)
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ Swap API {response.status}: {error_text}")
                    return await self._get_swap_transaction_fallback(swap_request)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ–±–º–µ–Ω–∞: {e}")
            return await self._get_swap_transaction_fallback(swap_request)

    async def _get_swap_transaction_fallback(self, swap_request: SwapRequest) -> Optional[str]:
        """Fallback –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ–±–º–µ–Ω–∞"""
        try:
            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint
            alt_url = settings.jupiter.api_url if settings.jupiter.use_lite_api else settings.jupiter.lite_api_url
            url = f"{alt_url}/swap"
            payload = swap_request.to_dict()

            headers = {'Content-Type': 'application/json'}
            if settings.jupiter.api_key and alt_url == settings.jupiter.api_url:
                headers['x-api-key'] = settings.jupiter.api_key

            logger.debug(f"üîÑ Fallback Swap –∑–∞–ø—Ä–æ—Å: {url}")

            async with self.session.post(url, json=payload, headers=headers) as response:
                if response.status == 200:
                    data = await response.json()
                    logger.info(f"‚úÖ Fallback swap transaction –ø–æ–ª—É—á–µ–Ω–∞ —á–µ—Ä–µ–∑ {alt_url}")
                    return data.get('swapTransaction')
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå Fallback Swap API —Ç–æ–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.status} - {error_text}")
                    return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ fallback —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ–±–º–µ–Ω–∞: {e}")
            return None

    async def get_price_info(self, token_address: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–Ω–µ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ Jupiter Price API v2"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º lite-api –¥–ª—è Price API (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)
            url = f"{settings.jupiter.price_api_url}"
            params = {
                'ids': token_address,
                'vsToken': 'So11111111111111111111111111111111111111112'  # vs SOL
            }

            headers = {'Content-Type': 'application/json'}

            logger.debug(f"üîç Price API –∑–∞–ø—Ä–æ—Å: {url} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params}")

            async with self.session.get(url, params=params, headers=headers) as response:
                if response.status == 200:
                    try:
                        data = await response.json()

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ data –Ω–µ None –∏ –∏–º–µ–µ—Ç –Ω—É–∂–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                        if not data or not isinstance(data, dict):
                            logger.warning(f"‚ö†Ô∏è Price API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç")
                            return None

                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Price API v2
                        if 'data' in data and data['data'] and token_address in data['data']:
                            token_data = data['data'][token_address]

                            if not token_data or not isinstance(token_data, dict):
                                logger.warning(f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ –ø—É—Å—Ç—ã –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
                                return None

                            price = float(token_data.get('price', 0))
                            logger.info(f"üí∞ –¶–µ–Ω–∞ {token_address}: {price} SOL")

                            return {
                                'price': price,
                                'token_address': token_address,
                                'vs_token': 'So11111111111111111111111111111111111111112',
                                'source': 'jupiter_price_api_v2'
                            }
                        else:
                            logger.warning(f"‚ö†Ô∏è –¢–æ–∫–µ–Ω {token_address} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Price API v2")
                            return None

                    except Exception as json_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç Price API: {json_error}")
                        return None

                elif response.status == 404:
                    logger.warning(f"‚ö†Ô∏è –¢–æ–∫–µ–Ω {token_address} –Ω–µ –Ω–∞–π–¥–µ–Ω (404)")
                    return None
                else:
                    error_text = await response.text()
                    logger.warning(f"‚ö†Ô∏è Price API v2 error {response.status}: {error_text}")
                    return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–Ω–µ —Ç–æ–∫–µ–Ω–∞: {e}")
            return None

    async def health_check(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Jupiter API - –ò–°–ü–†–ê–í–õ–ï–ù–û –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ API"""
        test_url = "unknown"
        endpoint_type = "unknown"
        status_code = None

        try:
            # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ API
            if settings.jupiter.api_key and not settings.jupiter.use_lite_api:
                # –ü–ª–∞—Ç–Ω—ã–π API - –∏—Å–ø–æ–ª—å–∑—É–µ–º api.jup.ag
                test_url = f"{settings.jupiter.api_url}/quote"
                headers = {
                    'Content-Type': 'application/json',
                    'x-api-key': settings.jupiter.api_key
                }
                endpoint_type = "–ø–ª–∞—Ç–Ω—ã–π (api.jup.ag)"
            else:
                # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π API - –∏—Å–ø–æ–ª—å–∑—É–µ–º lite-api.jup.ag
                test_url = f"{settings.jupiter.lite_api_url}/quote"
                headers = {
                    'Content-Type': 'application/json'
                }
                endpoint_type = "–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π (lite-api.jup.ag)"

            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ quote
            params = {
                'inputMint': 'So11111111111111111111111111111111111111112',  # SOL
                'outputMint': 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',  # USDC
                'amount': '1000000',  # 0.001 SOL
                'slippageBps': '50'  # 0.5% slippage
            }

            logger.debug(f"üîç Health check {endpoint_type}: {test_url}")

            async with self.session.get(test_url, params=params, headers=headers) as resp:
                status_code = resp.status
                jupiter_healthy = resp.status == 200

                if resp.status == 200:
                    response_data = await resp.json()
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è
                    if 'inAmount' in response_data and 'outAmount' in response_data:
                        logger.success(f"‚úÖ Jupiter {endpoint_type} —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                    else:
                        logger.warning(f"‚ö†Ô∏è Jupiter API –æ—Ç–≤–µ—Ç–∏–ª, –Ω–æ –±–µ–∑ –æ–∂–∏–¥–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                        jupiter_healthy = False
                elif resp.status == 401:
                    error_text = await resp.text()
                    logger.error(f"‚ùå 401 Unauthorized - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á: {error_text}")
                    jupiter_healthy = False
                elif resp.status == 429:
                    error_text = await resp.text()
                    logger.warning(f"‚ö†Ô∏è 429 Rate Limit: {error_text}")
                    jupiter_healthy = False
                elif resp.status >= 500:
                    error_text = await resp.text()
                    logger.warning(f"‚ö†Ô∏è {resp.status} –°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ Jupiter: {error_text}")
                    jupiter_healthy = False
                else:
                    error_text = await resp.text()
                    logger.error(f"‚ùå Jupiter API –æ—à–∏–±–∫–∞ {resp.status}: {error_text}")
                    jupiter_healthy = False

            return {
                "jupiter_api": "healthy" if jupiter_healthy else "error",
                "jupiter_endpoint": test_url,
                "endpoint_type": endpoint_type,
                "api_key_configured": bool(settings.jupiter.api_key),
                "use_lite_api": settings.jupiter.use_lite_api,
                "cache_size": len(self.quote_cache),
                "status_code": status_code
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ health check Jupiter API: {e}")
            return {
                "jupiter_api": "error",
                "message": str(e),
                "jupiter_endpoint": test_url,
                "endpoint_type": endpoint_type,
                "status_code": status_code
            }

    def clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫"""
        self.quote_cache.clear()
        logger.debug("üßπ –ö—ç—à –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –æ—á–∏—â–µ–Ω")

    def get_cache_stats(self) -> Dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞"""
        return {
            "cache_size": len(self.quote_cache),
            "cache_keys": list(self.quote_cache.keys())[:10]  # –ü–µ—Ä–≤—ã–µ 10 –∫–ª—é—á–µ–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        }