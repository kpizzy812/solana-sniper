"""
üõ°Ô∏è MORI Sniper Bot - Jupiter Security
–ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∞–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–æ–≤
"""

import asyncio
import time
from typing import Optional, Dict
from loguru import logger

from config.settings import settings
from .models import PoolInfo
from .client import JupiterAPIClient


class JupiterSecurityChecker:
    """–°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è Jupiter —Ç–æ—Ä–≥–æ–≤–ª–∏"""

    def __init__(self, jupiter_client: JupiterAPIClient):
        self.jupiter_client = jupiter_client
        self.pool_cache = {}  # –ö—ç—à –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—É–ª–∞—Ö

    async def security_check(self, token_address: str) -> bool:
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞ —Å fallback"""
        try:
            if not settings.security.enable_security_checks:
                logger.info("‚è≠Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
                return True

            # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ Price API
            pool_info = await self.get_pool_info(token_address)

            if pool_info:
                # –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
                if pool_info.liquidity_sol < settings.security.min_liquidity_sol:
                    logger.warning(
                        f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {pool_info.liquidity_sol} SOL < {settings.security.min_liquidity_sol} SOL")
                    return False

                logger.info(
                    f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–∞: ~{pool_info.liquidity_sol} SOL –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏")
                return True
            else:
                # Fallback: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ —Ç–µ—Å—Ç–æ–≤—ã–π quote
                logger.info("üîÑ Price API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –ø—Ä–æ–≤–µ—Ä–∫—É")
                return await self.fallback_security_check(token_address)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
            # Fallback –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return await self.fallback_security_check(token_address)

    async def fallback_security_check(self, token_address: str) -> bool:
        """Fallback –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ —Ç–µ—Å—Ç–æ–≤—ã–π quote"""
        try:
            logger.info("üß™ –í—ã–ø–æ–ª–Ω—è–µ–º fallback –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ —Ç–µ—Å—Ç–æ–≤—ã–π quote")

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞–ª–µ–Ω—å–∫—É—é —Å–¥–µ–ª–∫—É
            test_quote = await self.jupiter_client.get_quote(
                input_mint=settings.trading.base_token,  # SOL
                output_mint=token_address,
                amount=int(0.01 * 1e9),  # 0.01 SOL –≤ lamports
                slippage_bps=1000  # 10%
            )

            if not test_quote:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è {token_address}")
                return False

            price_impact = test_quote.price_impact_float

            if price_impact > 50.0:  # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π –ª–∏–º–∏—Ç –¥–ª—è fallback
                logger.warning(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ: {price_impact}%")
                return False

            logger.info(f"‚úÖ Fallback –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞: {price_impact}% –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—É—é —Å–¥–µ–ª–∫—É")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ fallback –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
            if token_address == 'JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN':
                logger.info("‚úÖ JUP —Ç–æ–∫–µ–Ω - —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é")
                return True
            return False

    async def get_pool_info(self, token_address: str) -> Optional[PoolInfo]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ Jupiter Price API v2"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if token_address in self.pool_cache:
                cached_time, pool_info = self.pool_cache[token_address]
                if time.time() - cached_time < 30:  # –ö—ç—à –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
                    return pool_info

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–µ —á–µ—Ä–µ–∑ Jupiter client
            price_data = await self.jupiter_client.get_price_info(token_address)

            if not price_data:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–µ –¥–ª—è {token_address}")
                return None

            price = price_data.get('price', 0)
            logger.info(f"üí∞ –¶–µ–Ω–∞ {token_address}: {price} SOL")

            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ quote –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
            liquidity_sol = await self.estimate_liquidity(token_address)

            pool_info = PoolInfo(
                liquidity_sol=liquidity_sol,
                price=price,
                market_cap=0,  # Jupiter Price API –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç market cap
                volume_24h=0,  # Jupiter Price API –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç volume
                holders_count=100  # –ó–∞–≥–ª—É—à–∫–∞
            )

            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.pool_cache[token_address] = (time.time(), pool_info)
            return pool_info

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ: {e}")
            return None

    async def estimate_liquidity(self, token_address: str) -> float:
        """–û—Ü–µ–Ω–∫–∞ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ —Ç–µ—Å—Ç–æ–≤—ã–µ quote –∑–∞–ø—Ä–æ—Å—ã"""
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å–¥–µ–ª–æ–∫ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
            test_amounts = [1e9, 5e9, 10e9, 50e9, 100e9]  # 1, 5, 10, 50, 100 SOL –≤ lamports
            max_successful_amount = 0

            for amount in test_amounts:
                try:
                    quote = await self.jupiter_client.get_quote(
                        input_mint=settings.trading.base_token,  # SOL
                        output_mint=token_address,
                        amount=int(amount),
                        slippage_bps=1000  # 10% –¥–ª—è —Ç–µ—Å—Ç–∞
                    )

                    if quote:
                        price_impact = quote.price_impact_float
                        if price_impact < 15.0:  # –ï—Å–ª–∏ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ –º–µ–Ω–µ–µ 15%
                            max_successful_amount = amount / 1e9  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ SOL
                        else:
                            break  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –µ—Å–ª–∏ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ
                    else:
                        break

                    # –ú–∞–ª–µ–Ω—å–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    await asyncio.sleep(0.1)

                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ quote –¥–ª—è {amount / 1e9} SOL: {e}")
                    break

            # –û—Ü–µ–Ω–æ—á–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å = –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —É—Å–ø–µ—à–Ω–∞—è —Å–¥–µ–ª–∫–∞ * 20
            # –≠—Ç–æ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
            estimated_liquidity = max_successful_amount * 20

            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∫–∞–∫ JUP
            if estimated_liquidity < 1.0:
                estimated_liquidity = 1.0

            logger.info(f"üìä –û—Ü–µ–Ω–æ—á–Ω–∞—è –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å {token_address}: ~{estimated_liquidity} SOL")
            return estimated_liquidity

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–Ω–∏–∂–µ–Ω–Ω—É—é –æ—Ü–µ–Ω–∫—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            return 1.0

    async def check_honeypot(self, token_address: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ honeypot —á–µ—Ä–µ–∑ —Å–∏–º—É–ª—è—Ü–∏—é –ø—Ä–æ–¥–∞–∂–∏"""
        try:
            if not settings.security.check_honeypot:
                return True

            logger.debug(f"üçØ –ü—Ä–æ–≤–µ—Ä—è–µ–º honeypot –¥–ª—è {token_address}")

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞–ª–µ–Ω—å–∫—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–¥–µ–ª–∫—É (–ø—Ä–æ–¥–∞–∂—É)
            test_quote = await self.jupiter_client.get_quote(
                input_mint=token_address,
                output_mint=settings.trading.base_token,  # SOL
                amount=int(1000),  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Ç–æ–∫–µ–Ω–æ–≤
                slippage_bps=1000  # 10%
            )

            if not test_quote:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å quote –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ {token_address} - –≤–æ–∑–º–æ–∂–Ω—ã–π honeypot")
                return False

            logger.info(f"‚úÖ Honeypot –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ –¥–ª—è {token_address}")
            return True

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ honeypot –¥–ª—è {token_address}: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —Ç–æ–∫–µ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É
            return True

    async def check_token_metadata(self, token_address: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ, —Å–∏–º–≤–æ–ª, –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∫–∞–º)"""
        try:
            # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Solana RPC
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True
            logger.debug(f"üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è {token_address} - –ø—Ä–æ–ø—É—â–µ–Ω–∞")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö {token_address}: {e}")
            return True

    async def comprehensive_security_check(self, token_address: str) -> Dict:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞"""
        try:
            logger.info(f"üîç –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ {token_address}")

            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            results = await asyncio.gather(
                self.security_check(token_address),
                self.check_honeypot(token_address),
                self.check_token_metadata(token_address),
                return_exceptions=True
            )

            basic_security = results[0] if not isinstance(results[0], Exception) else False
            honeypot_check = results[1] if not isinstance(results[1], Exception) else False
            metadata_check = results[2] if not isinstance(results[2], Exception) else False

            # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            overall_safe = all([basic_security, honeypot_check, metadata_check])

            security_report = {
                "token_address": token_address,
                "overall_safe": overall_safe,
                "basic_security": basic_security,
                "honeypot_check": honeypot_check,
                "metadata_check": metadata_check,
                "timestamp": time.time()
            }

            if overall_safe:
                logger.success(f"‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ –¥–ª—è {token_address}")
            else:
                logger.warning(f"‚ö†Ô∏è –¢–æ–∫–µ–Ω {token_address} –Ω–µ –ø—Ä–æ—à–µ–ª –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏")

            return security_report

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
            return {
                "token_address": token_address,
                "overall_safe": False,
                "error": str(e),
                "timestamp": time.time()
            }

    def clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫"""
        self.pool_cache.clear()
        logger.debug("üßπ –ö—ç—à –ø—Ä–æ–≤–µ—Ä–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ—á–∏—â–µ–Ω")

    def get_cache_stats(self) -> Dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞"""
        return {
            "pool_cache_size": len(self.pool_cache),
            "cached_tokens": list(self.pool_cache.keys())
        }