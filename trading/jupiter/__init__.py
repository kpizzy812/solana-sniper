"""
üéØ MORI Sniper Bot - Jupiter Trading Module
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ —á–µ—Ä–µ–∑ Jupiter DEX
"""

import aiohttp
from typing import Dict, List, Optional
from loguru import logger

from solana.rpc.async_api import AsyncClient
from solana.rpc.commitment import Confirmed

from config.settings import settings
from .models import TradeResult, PoolInfo
from .client import JupiterAPIClient
from .executor import JupiterTradeExecutor
from .security import JupiterSecurityChecker


class UltraFastJupiterTrader:
    """–£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ Jupiter —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π"""

    def __init__(self):
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.solana_client: Optional[AsyncClient] = None
        self.jupiter_client: Optional[JupiterAPIClient] = None
        self.executor: Optional[JupiterTradeExecutor] = None
        self.security_checker: Optional[JupiterSecurityChecker] = None

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        self.running = False

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–∑ executor)
        self._stats_cache = {}

    async def start(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ Jupiter —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...")

            # 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Solana RPC –∫–ª–∏–µ–Ω—Ç–∞
            self.solana_client = AsyncClient(
                endpoint=settings.solana.rpc_url,
                commitment=Confirmed
            )
            logger.debug("‚úÖ Solana RPC –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Jupiter API –∫–ª–∏–µ–Ω—Ç–∞
            self.jupiter_client = JupiterAPIClient()
            await self.jupiter_client.start()
            logger.debug("‚úÖ Jupiter API –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω")

            # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å–¥–µ–ª–æ–∫
            self.executor = JupiterTradeExecutor(
                solana_client=self.solana_client,
                jupiter_client=self.jupiter_client
            )
            logger.debug("‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å–¥–µ–ª–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            # 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            self.security_checker = JupiterSecurityChecker(
                jupiter_client=self.jupiter_client
            )
            logger.debug("‚úÖ –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

            # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            health = await self.health_check()
            if health['status'] != 'healthy':
                raise Exception(f"–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º: {health}")

            self.running = True
            logger.success("‚úÖ Jupiter —Ç–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Jupiter —Ç—Ä–µ–π–¥–µ—Ä–∞: {e}")
            await self.stop()
            return False

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Jupiter —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...")

        self.running = False

        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Jupiter API –∫–ª–∏–µ–Ω—Ç
            if self.jupiter_client:
                await self.jupiter_client.stop()
                logger.debug("‚úÖ Jupiter API –∫–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º Solana RPC –∫–ª–∏–µ–Ω—Ç
            if self.solana_client:
                await self.solana_client.close()
                logger.debug("‚úÖ Solana RPC –∫–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç")

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")

        logger.info("üõë Jupiter —Ç–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    async def execute_sniper_trades(self, token_address: str, source_info: Dict) -> List[TradeResult]:
        """
        –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–Ω–∞–π–ø–µ—Ä—Å–∫–∏—Ö —Å–¥–µ–ª–æ–∫

        Args:
            token_address: –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
            source_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ —Å–∏–≥–Ω–∞–ª–∞

        Returns:
            List[TradeResult]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫
        """
        if not self.running:
            logger.error("‚ùå –¢–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return []

        if not self.executor:
            logger.error("‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å–¥–µ–ª–æ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return []

        try:
            logger.critical(f"üö® –ü–û–õ–£–ß–ï–ù –¢–û–†–ì–û–í–´–ô –°–ò–ì–ù–ê–õ: {token_address}")
            logger.info(
                f"üì± –ò—Å—Ç–æ—á–Ω–∏–∫: {source_info.get('platform', 'unknown')} - {source_info.get('source', 'unknown')}")

            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            if settings.security.enable_security_checks and self.security_checker:
                logger.info("üîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")

                is_safe = await self.security_checker.security_check(token_address)
                if not is_safe:
                    logger.error(f"‚ùå –¢–æ–∫–µ–Ω {token_address} –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
                    return []

                logger.success("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")

            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–Ω–∞–π–ø–µ—Ä—Å–∫–∏–µ —Å–¥–µ–ª–∫–∏
            results = await self.executor.execute_sniper_trades(token_address, source_info)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self._update_stats_cache()

            return results

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–Ω–∞–π–ø–µ—Ä—Å–∫–∏—Ö —Å–¥–µ–ª–æ–∫: {e}")
            return []

    async def get_pool_info(self, token_address: str) -> Optional[PoolInfo]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞"""
        if not self.security_checker:
            logger.error("‚ùå –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return None

        return await self.security_checker.get_pool_info(token_address)

    async def security_check(self, token_address: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞"""
        if not self.security_checker:
            logger.warning("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É")
            return True

        return await self.security_checker.security_check(token_address)

    async def get_sol_balance(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ SOL –∫–æ—à–µ–ª—å–∫–∞"""
        if not self.executor:
            logger.error("‚ùå –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å–¥–µ–ª–æ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return 0.0

        return await self.executor.get_sol_balance()

    async def health_check(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        try:
            health_data = {
                "status": "healthy",
                "components": {},
                "wallet_info": {},
                "stats": {}
            }

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Solana RPC
            try:
                if self.solana_client:
                    response = await self.solana_client.get_version()
                    health_data["components"]["solana_rpc"] = "healthy" if response.value else "error"
                else:
                    health_data["components"]["solana_rpc"] = "not_initialized"
            except Exception as e:
                health_data["components"]["solana_rpc"] = f"error: {e}"
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Solana RPC: {e}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Jupiter API
            try:
                if self.jupiter_client:
                    jupiter_health = await self.jupiter_client.health_check()
                    health_data["components"]["jupiter_api"] = jupiter_health.get("jupiter_api", "unknown")
                    health_data["jupiter_endpoint"] = jupiter_health.get("jupiter_endpoint", "unknown")
                else:
                    health_data["components"]["jupiter_api"] = "not_initialized"
            except Exception as e:
                health_data["components"]["jupiter_api"] = f"error: {e}"
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Jupiter API: {e}")

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–µ
            try:
                if self.executor and self.executor.wallet_keypair:
                    health_data["wallet_info"]["address"] = str(self.executor.wallet_keypair.pubkey())
                    health_data["wallet_info"]["sol_balance"] = await self.get_sol_balance()
                else:
                    health_data["wallet_info"]["address"] = "not_configured"
                    health_data["wallet_info"]["sol_balance"] = 0.0
            except Exception as e:
                health_data["wallet_info"]["error"] = str(e)

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
            if self.executor:
                health_data["stats"] = self.executor.get_stats()

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
            component_statuses = list(health_data["components"].values())
            if any("error" in str(status) for status in component_statuses):
                health_data["status"] = "degraded"
            elif any("not_initialized" in str(status) for status in component_statuses):
                health_data["status"] = "degraded"

            return health_data

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ health check: {e}")
            return {"status": "error", "message": str(e)}

    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        if self.executor:
            return self.executor.get_stats()
        return {}

    def _update_stats_cache(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if self.executor:
            self._stats_cache = self.executor.get_stats()

    def reset_stats(self):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        if self.executor:
            self.executor.reset_stats()
        self._stats_cache = {}

    def clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫—ç—à–µ–π"""
        if self.jupiter_client:
            self.jupiter_client.clear_cache()
        if self.security_checker:
            self.security_checker.clear_cache()
        logger.info("üßπ –í—Å–µ –∫—ç—à–∏ –æ—á–∏—â–µ–Ω—ã")

    async def estimate_liquidity(self, token_address: str) -> float:
        """–û—Ü–µ–Ω–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞"""
        if not self.security_checker:
            logger.warning("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return 0.0

        return await self.security_checker.estimate_liquidity(token_address)

    async def comprehensive_security_check(self, token_address: str) -> Dict:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞"""
        if not self.security_checker:
            logger.warning("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return {"overall_safe": True, "reason": "security_disabled"}

        return await self.security_checker.comprehensive_security_check(token_address)

    def is_running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        return self.running

    def get_component_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        return {
            "solana_client": self.solana_client is not None,
            "jupiter_client": self.jupiter_client is not None,
            "executor": self.executor is not None,
            "security_checker": self.security_checker is not None,
            "running": self.running
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–µ–π–¥–µ—Ä–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º)
jupiter_trader = UltraFastJupiterTrader()

# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
__all__ = [
    'UltraFastJupiterTrader',
    'jupiter_trader',
    'TradeResult',
    'PoolInfo'
]