"""
‚ö° MORI Sniper Bot - Jupiter Trade Executor
–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å–Ω–∞–π–ø–µ—Ä—Å–∫–∏—Ö —Å–¥–µ–ª–æ–∫ —Å —É–º–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
"""

import asyncio
import time
import base64
from typing import List, Dict, Optional
from loguru import logger

from solana.rpc.async_api import AsyncClient
from solana.rpc.commitment import Confirmed
from solana.rpc.types import TxOpts
from solders.keypair import Keypair
from solders.transaction import VersionedTransaction
from solders.message import to_bytes_versioned
import base58
from solders.pubkey import Pubkey

# –£–±–∏—Ä–∞–µ–º –ø—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç settings –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
# from config.settings import settings

from .models import TradeResult, TradingSession, SwapRequest
from .client import JupiterAPIClient


class JupiterTradeExecutor:
    """–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å–Ω–∞–π–ø–µ—Ä—Å–∫–∏—Ö —Å–¥–µ–ª–æ–∫ —á–µ—Ä–µ–∑ Jupiter"""

    def __init__(self, solana_client: AsyncClient, jupiter_client: JupiterAPIClient):
        self.solana_client = solana_client
        self.jupiter_client = jupiter_client
        self.wallet_keypair: Optional[Keypair] = None

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.total_trades = 0
        self.successful_trades = 0
        self.failed_trades = 0
        self.total_sol_spent = 0.0
        self.total_tokens_bought = 0.0

        self.setup_wallet()

    def setup_wallet(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—à–µ–ª—å–∫–∞ –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞"""
        try:
            # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            from config.settings import settings

            if settings.solana.private_key:
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base58 –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
                private_key_bytes = base58.b58decode(settings.solana.private_key)
                self.wallet_keypair = Keypair.from_bytes(private_key_bytes)
                logger.info(f"üí∞ –ö–æ—à–µ–ª–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω: {self.wallet_keypair.pubkey()}")
            else:
                logger.error("‚ùå –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—à–µ–ª—å–∫–∞: {e}")

    async def execute_sniper_trades(self, token_address: str, source_info: Dict) -> List[TradeResult]:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–Ω–∞–π–ø–µ—Ä—Å–∫–∏—Ö —Å–¥–µ–ª–æ–∫
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ –æ–¥–Ω—É –ø–æ–∫—É–ø–∫—É, —Ç–∞–∫ –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ
        """
        logger.critical(f"üéØ –°–ù–ê–ô–ü–ï–† –ê–¢–ê–ö–ê –ù–ê –¢–û–ö–ï–ù: {token_address}")

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Ç–æ—Ä–≥–æ–≤–ª–∏
        session = TradingSession(
            token_address=token_address,
            source_info=source_info,
            start_time=time.time(),
            amounts=self._calculate_trade_amounts(),
            results=[]
        )

        logger.info(f"üìä –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è {len(session.amounts)} —Å–¥–µ–ª–æ–∫ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏: {session.amounts}")

        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–¥–µ–ª–∫–∏
        # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        from config.settings import settings

        if settings.trading.concurrent_trades:
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫
            await self._execute_concurrent_trades(session)
        else:
            # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            await self._execute_sequential_trades(session)

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._update_global_stats(session)

        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–∏
        self._log_session_summary(session)

        return session.results

    def _calculate_trade_amounts(self) -> List[float]:
        """–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ —Å–¥–µ–ª–æ–∫ —Å —É–º–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º"""
        # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        from config.settings import settings

        num_trades = settings.trading.num_purchases
        amount_per_trade = settings.trading.trade_amount_sol

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —É–º–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        if settings.trading.smart_split and num_trades > 1:
            return self._calculate_smart_amounts(
                total_amount=num_trades * amount_per_trade,
                num_trades=num_trades
            )
        else:
            return [amount_per_trade] * num_trades

    def _calculate_smart_amounts(self, total_amount: float, num_trades: int) -> List[float]:
        """
        –£–º–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Å–¥–µ–ª–æ–∫ –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è
        –ü–µ—Ä–≤—ã–µ —Å–¥–µ–ª–∫–∏ –±–æ–ª—å—à–µ, –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ–Ω—å—à–µ
        """
        if num_trades == 1:
            return [total_amount]

        # –°–æ–∑–¥–∞–µ–º —É–±—ã–≤–∞—é—â—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        # 40% –≤ –ø–µ—Ä–≤–æ–π —Å–¥–µ–ª–∫–µ, –∑–∞—Ç–µ–º —É–±—ã–≤–∞–Ω–∏–µ
        amounts = []
        remaining = total_amount

        for i in range(num_trades):
            if i == num_trades - 1:
                # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞ - –æ—Å—Ç–∞—Ç–æ–∫
                amounts.append(remaining)
            else:
                # –£–º–µ–Ω—å—à–∞—é—â–∏–π—Å—è —Ä–∞–∑–º–µ—Ä
                factor = (num_trades - i) / num_trades
                amount = (total_amount / num_trades) * (1 + factor * 0.5)
                amount = min(amount, remaining * 0.6)  # –ù–µ –±–æ–ª—å—à–µ 60% –æ—Å—Ç–∞—Ç–∫–∞
                amounts.append(round(amount, 4))
                remaining -= amount

        return amounts

    async def _execute_concurrent_trades(self, session: TradingSession):
        """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫"""
        trade_tasks = []
        for i, amount in enumerate(session.amounts):
            task = asyncio.create_task(
                self._execute_single_trade(session.token_address, i, amount, session.source_info)
            )
            trade_tasks.append(task)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Å–¥–µ–ª–∫–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        results = await asyncio.gather(*trade_tasks, return_exceptions=True)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for i, result in enumerate(results):
            if isinstance(result, Exception):
                logger.error(f"‚ùå –°–¥–µ–ª–∫–∞ {i + 1} —É–ø–∞–ª–∞ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º: {result}")
                session.add_result(TradeResult(
                    success=False,
                    signature=None,
                    error=str(result),
                    input_amount=session.amounts[i] if i < len(session.amounts) else 0.0,
                    output_amount=None,
                    price_impact=None,
                    execution_time_ms=0,
                    trade_index=i
                ))
            else:
                session.add_result(result)

    async def _execute_sequential_trades(self, session: TradingSession):
        """–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫"""
        for i, amount in enumerate(session.amounts):
            result = await self._execute_single_trade(
                session.token_address, i, amount, session.source_info
            )
            session.add_result(result)

    async def _execute_single_trade(self, token_address: str, trade_index: int,
                                    amount_sol: float, source_info: Dict) -> TradeResult:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–∏ —á–µ—Ä–µ–∑ Jupiter - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        start_time = time.time()

        try:
            # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            from config.settings import settings
            from solders.pubkey import Pubkey

            logger.debug(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–¥–µ–ª–∫–∏ {trade_index + 1}: {amount_sol} SOL -> {token_address}")

            # –ù–û–í–û–ï: –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ –î–û –ø–æ–∫—É–ø–∫–∏
            token_mint = Pubkey.from_string(token_address)
            # balance_before = await self._get_token_balance_with_decimals(self.wallet_keypair.pubkey(), token_mint)

            # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ç–∏—Ä–æ–≤–∫—É –æ—Ç Jupiter
            quote = await self.jupiter_client.get_quote(
                input_mint=settings.trading.base_token,  # SOL
                output_mint=token_address,
                amount=int(amount_sol * 1e9),  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ lamports
                slippage_bps=settings.trading.slippage_bps
            )

            if not quote:
                return self._create_failed_result("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫—É",
                                                  amount_sol, trade_index, start_time)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º price impact
            price_impact = quote.price_impact_float
            if price_impact > settings.security.max_price_impact:
                return self._create_failed_result(
                    f"–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ: {price_impact}%",
                    amount_sol, trade_index, start_time
                )

            logger.debug(
                f"üíπ –°–¥–µ–ª–∫–∞ {trade_index + 1} –∫–æ—Ç–∏—Ä–æ–≤–∫–∞: {quote.out_amount} —Ç–æ–∫–µ–Ω–æ–≤, {price_impact}% –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ")

            # –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ swap —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            swap_request = SwapRequest(
                quote_response=quote,
                user_public_key=str(self.wallet_keypair.pubkey()),
                priority_fee_lamports=settings.trading.priority_fee,
                destination_token_account=None
            )

            # –®–∞–≥ 3: –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –æ–±–º–µ–Ω–∞
            swap_transaction = await self.jupiter_client.get_swap_transaction(swap_request)

            if not swap_transaction:
                return self._create_failed_result("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –æ–±–º–µ–Ω–∞",
                                                  amount_sol, trade_index, start_time)

            # –®–∞–≥ 4: –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            signature = await self._send_transaction(swap_transaction)

            if signature:
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
                # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                # await asyncio.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ

                # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ü–û–°–õ–ï –ø–æ–∫—É–ø–∫–∏
                # balance_after = await self._get_token_balance_with_decimals(self.wallet_keypair.pubkey(), token_mint)

                # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∞–ª—å–Ω–æ –∫—É–ø–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                # actual_tokens_bought = balance_after - balance_before

                execution_time = (time.time() - start_time) * 1000

                logger.success(f"‚úÖ –°–¥–µ–ª–∫–∞ {trade_index + 1} –£–°–ü–ï–®–ù–ê: {signature} ({execution_time:.0f}ms)")
                # logger.info(f"ü™ô –†–µ–∞–ª—å–Ω–æ –∫—É–ø–ª–µ–Ω–æ: {actual_tokens_bought:,.6f} —Ç–æ–∫–µ–Ω–æ–≤")

                return TradeResult(
                    success=True,
                    signature=signature,
                    error=None,
                    input_amount=amount_sol,
                    output_amount=0.0,
                    price_impact=price_impact,
                    execution_time_ms=execution_time,
                    trade_index=trade_index
                )
            else:
                return self._create_failed_result("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞—Å—å",
                                                  amount_sol, trade_index, start_time)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–¥–µ–ª–∫–∏ {trade_index + 1}: {e}")
            return self._create_failed_result(str(e), amount_sol, trade_index, start_time)

    # –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–ª–∞—Å—Å JupiterExecutor
    # async def _get_token_decimals(self, token_mint: Pubkey) -> int:
    #     """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ decimals –¥–ª—è —Ç–æ–∫–µ–Ω–∞ - –ö–û–ü–ò–Ø –ò–ó TRANSFER_MANAGER"""
    #     try:
    #         from solana.rpc.commitment import Confirmed
    #
    #         # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ mint –∞–∫–∫–∞—É–Ω—Ç–µ
    #         mint_info = await self.solana_client.get_account_info(token_mint, commitment=Confirmed)
    #
    #         if not mint_info.value:
    #             logger.debug(f"üìä Mint –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º 6 decimals –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    #             return 6  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    #
    #         data = mint_info.value.data
    #
    #         if len(data) < 44:
    #             return 6
    #
    #         # SPL Token Mint layout:
    #         # 0-4: mint_authority option (4 bytes)
    #         # 4-8: supply (8 bytes)
    #         # 36: decimals (1 byte)
    #         decimals = data[44]  # decimals –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ 44
    #
    #         logger.debug(f"üí∞ Decimals –¥–ª—è —Ç–æ–∫–µ–Ω–∞: {decimals}")
    #         return decimals
    #
    #     except Exception as e:
    #         logger.debug(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è decimals: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º 6")
    #         return 6  # Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

    def _create_failed_result(self, error: str, amount: float, trade_index: int, start_time: float) -> TradeResult:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ—É–¥–∞—á–Ω–æ–π —Å–¥–µ–ª–∫–∏"""
        return TradeResult(
            success=False,
            signature=None,
            error=error,
            input_amount=amount,
            output_amount=None,
            price_impact=None,
            execution_time_ms=(time.time() - start_time) * 1000,
            trade_index=trade_index
        )

    async def _send_transaction(self, swap_transaction_b64: str) -> Optional[str]:
        """–ü–æ–¥–ø–∏—Å—å –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ Solana - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –î–ò–ê–ì–ù–û–°–¢–ò–ö–û–ô"""
        try:
            # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            from config.settings import settings

            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            transaction_bytes = base64.b64decode(swap_transaction_b64)
            raw_transaction = VersionedTransaction.from_bytes(transaction_bytes)

            logger.debug(f"üîç –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: message={raw_transaction.message}")

            # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –°–ü–û–°–û–ë: –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ keypair.sign_message()
            message_bytes = to_bytes_versioned(raw_transaction.message)
            signature = self.wallet_keypair.sign_message(message_bytes)

            logger.debug(f"üîê –ü–æ–¥–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞: {signature}")

            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ populate()
            signed_transaction = VersionedTransaction.populate(raw_transaction.message, [signature])

            logger.debug(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

            # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–ö–õ–Æ–ß–ê–ï–ú preflight –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫
            opts = TxOpts(
                skip_preflight=False,  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                preflight_commitment=Confirmed,
                max_retries=settings.trading.max_retries
            )

            logger.debug(f"üîç –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å preflight –ø—Ä–æ–≤–µ—Ä–∫–æ–π...")

            # –°–Ω–∞—á–∞–ª–∞ —Å–∏–º—É–ª–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            try:
                simulation_result = await self.solana_client.simulate_transaction(
                    signed_transaction,
                    commitment=Confirmed
                )

                if simulation_result.value.err:
                    logger.error(f"‚ùå –°–∏–º—É–ª—è—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ù–ï–£–î–ê–ß–ù–ê:")
                    logger.error(f"   –û—à–∏–±–∫–∞: {simulation_result.value.err}")
                    if simulation_result.value.logs:
                        logger.error(f"   –õ–æ–≥–∏:")
                        for log in simulation_result.value.logs:
                            logger.error(f"     {log}")
                    return None
                else:
                    logger.debug(f"‚úÖ –°–∏–º—É–ª—è—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–∞")
                    if simulation_result.value.logs:
                        for log in simulation_result.value.logs[-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ª–æ–≥–∞
                            logger.debug(f"   üìù {log}")

            except Exception as sim_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏: {sim_error}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–∏–º—É–ª—è—Ü–∏–∏

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            response = await self.solana_client.send_transaction(signed_transaction, opts=opts)

            if response.value:
                signature_str = str(response.value)
                logger.debug(f"üì§ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {signature_str}")

                # –ù–û–í–û–ï: –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                try:
                    await asyncio.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    confirmed_result = await self.solana_client.get_transaction(
                        response.value,
                        commitment=Confirmed,
                        encoding='json',
                        max_supported_transaction_version=0
                    )

                    if confirmed_result.value:
                        if confirmed_result.value.meta and confirmed_result.value.meta.err:
                            logger.error(f"‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –Ω–æ –ù–ï–£–î–ê–ß–ù–ê:")
                            logger.error(f"   –ü–æ–¥–ø–∏—Å—å: {signature_str}")
                            logger.error(f"   –û—à–∏–±–∫–∞: {confirmed_result.value.meta.err}")

                            if confirmed_result.value.meta.log_messages:
                                logger.error(f"   –õ–æ–≥–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:")
                                for log in confirmed_result.value.meta.log_messages:
                                    logger.error(f"     {log}")
                            return None
                        else:
                            logger.success(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –£–°–ü–ï–®–ù–û –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: {signature_str}")
                            return signature_str
                    else:
                        logger.warning(f"‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –Ω–æ —Å—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω: {signature_str}")
                        return signature_str

                except Exception as confirm_error:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {confirm_error}")
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–¥–ø–∏—Å—å –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
                    return signature_str

            else:
                logger.error("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞—Å—å")
                return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
            logger.error(f"üîç –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            try:
                logger.error(f"üîç –î–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: message_type={type(raw_transaction.message)}")
                logger.error(f"üîç Wallet pubkey: {self.wallet_keypair.pubkey()}")
            except:
                pass

            return None

    def _update_global_stats(self, session: TradingSession):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.total_trades += len(session.results)
        self.successful_trades += session.successful_trades
        self.failed_trades += session.failed_trades
        self.total_sol_spent += session.total_sol_spent
        self.total_tokens_bought += session.total_tokens_bought

    def _log_session_summary(self, session: TradingSession):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        total_time = (time.time() - session.start_time) * 1000

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
        total_tokens_bought = 0.0
        successful_trades_with_tokens = 0

        for result in session.results:
            if result.success and result.output_amount is not None and result.output_amount > 0:
                total_tokens_bought += result.output_amount
                successful_trades_with_tokens += 1

        logger.critical("üéØ –ò–¢–û–ì–ò –°–ù–ê–ô–ü–ï–† –ê–¢–ê–ö–ò:")
        logger.info(f"  üìç –ö–æ–Ω—Ç—Ä–∞–∫—Ç: {session.token_address}")
        logger.info(
            f"  üì± –ò—Å—Ç–æ—á–Ω–∏–∫: {session.source_info.get('platform', 'unknown')} - {session.source_info.get('source', 'unknown')}")
        logger.info(f"  ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {session.successful_trades}/{len(session.results)}")
        logger.info(f"  üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ SOL: {session.total_sol_spent:.4f}")
        logger.info(f"  ü™ô –ö—É–ø–ª–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {total_tokens_bought:,.6f}")  # –ò–°–ü–†–ê–í–õ–ï–ù–û

        if successful_trades_with_tokens < session.successful_trades:
            logger.warning(
                f"  ‚ö†Ô∏è {session.successful_trades - successful_trades_with_tokens} —Å–¥–µ–ª–æ–∫ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–∫–µ–Ω–∞—Ö")

        logger.info(f"  ‚ö° –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.0f}ms")

        if len(session.results) > 0:
            logger.info(f"  üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Å–¥–µ–ª–∫—É: {total_time / len(session.results):.0f}ms")
            logger.info(f"  üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {session.success_rate:.1f}%")

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∏ —É—Å–ø–µ—à–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        signatures = session.get_signatures()
        if signatures:
            logger.info("  üìù –ü–æ–¥–ø–∏—Å–∏ —É—Å–ø–µ—à–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:")
            for i, sig in enumerate(signatures):
                logger.info(f"    {i + 1}. {sig}")

        # –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª—è–µ–º session —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        session.total_tokens_bought = total_tokens_bought

    async def get_sol_balance(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ SOL"""
        try:
            response = await self.solana_client.get_balance(self.wallet_keypair.pubkey())
            if response.value:
                return response.value / 1e9  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º lamports –≤ SOL
            return 0.0
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ SOL: {e}")
            return 0.0

    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        return {
            "total_trades": self.total_trades,
            "successful_trades": self.successful_trades,
            "failed_trades": self.failed_trades,
            "success_rate": self.successful_trades / max(self.total_trades, 1) * 100,
            "total_sol_spent": self.total_sol_spent,
            "total_tokens_bought": self.total_tokens_bought,
            "wallet_address": str(self.wallet_keypair.pubkey()) if self.wallet_keypair else "unknown"
        }

    def reset_stats(self):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.total_trades = 0
        self.successful_trades = 0
        self.failed_trades = 0
        self.total_sol_spent = 0.0
        self.total_tokens_bought = 0.0
        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å–±—Ä–æ—à–µ–Ω–∞")

    # async def _get_token_balance_with_decimals(self, wallet_pubkey: Pubkey, token_mint: Pubkey) -> float:
    #     """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —É—á–µ—Ç–æ–º decimals - –ö–û–ü–ò–Ø –ò–ó TRANSFER_MANAGER"""
    #     try:
    #         from spl.token.instructions import get_associated_token_address
    #         from solana.rpc.commitment import Confirmed
    #
    #         # –ü–æ–ª—É—á–∞–µ–º associated token account
    #         ata = get_associated_token_address(wallet_pubkey, token_mint)
    #
    #         # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
    #         account_info = await self.solana_client.get_account_info(ata, commitment=Confirmed)
    #
    #         if not account_info.value:
    #             logger.debug(f"üí∞ ATA –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {str(wallet_pubkey)[:8]}...")
    #             return 0.0
    #
    #         data = account_info.value.data
    #
    #         if len(data) < 72:
    #             logger.debug(f"üí∞ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ATA –¥–ª—è {str(wallet_pubkey)[:8]}...")
    #             return 0.0
    #
    #         # SPL Token Account layout:
    #         # 0-32: mint (32 bytes)
    #         # 32-64: owner (32 bytes)
    #         # 64-72: amount (8 bytes little-endian uint64)
    #         # 72-73: delegate option (1 byte)
    #         # 73-74: state (1 byte)
    #
    #         # –ò–∑–≤–ª–µ–∫–∞–µ–º amount (–ø–æ–∑–∏—Ü–∏—è 64-72)
    #         amount_bytes = data[64:72]
    #         amount_raw = int.from_bytes(amount_bytes, byteorder='little')
    #
    #         if amount_raw == 0:
    #             return 0.0
    #
    #         # –ü–æ–ª—É—á–∞–µ–º decimals –¥–ª—è —Ç–æ–∫–µ–Ω–∞
    #         decimals = await self._get_token_decimals(token_mint)
    #
    #         # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    #         balance = amount_raw / (10 ** decimals)
    #
    #         logger.debug(f"üí∞ –ë–∞–ª–∞–Ω—Å {str(wallet_pubkey)[:8]}...: {balance:.6f} —Ç–æ–∫–µ–Ω–æ–≤")
    #         return balance
    #
    #     except Exception as e:
    #         logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–∞: {e}")
    #         return 0.0


    async def _execute_single_trade_without_balance_check(self, token_address: str, trade_index: int,
                                                          amount_sol: float, source_info: Dict) -> TradeResult:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–∏ —á–µ—Ä–µ–∑ Jupiter –ë–ï–ó –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ (–¥–ª—è –º—É–ª—å—Ç–∏–∫–æ—à–µ–ª—å–∫–æ–≤)"""
        start_time = time.time()

        try:
            # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            from config.settings import settings

            logger.debug(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–¥–µ–ª–∫–∏ {trade_index + 1}: {amount_sol} SOL -> {token_address}")

            # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ç–∏—Ä–æ–≤–∫—É –æ—Ç Jupiter
            quote = await self.jupiter_client.get_quote(
                input_mint=settings.trading.base_token,  # SOL
                output_mint=token_address,
                amount=int(amount_sol * 1e9),  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ lamports
                slippage_bps=settings.trading.slippage_bps
            )

            if not quote:
                return self._create_failed_result("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫—É",
                                                  amount_sol, trade_index, start_time)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º price impact
            price_impact = quote.price_impact_float
            if price_impact > settings.security.max_price_impact:
                return self._create_failed_result(
                    f"–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ: {price_impact}%",
                    amount_sol, trade_index, start_time
                )

            logger.debug(
                f"üíπ –°–¥–µ–ª–∫–∞ {trade_index + 1} –∫–æ—Ç–∏—Ä–æ–≤–∫–∞: {quote.out_amount} —Ç–æ–∫–µ–Ω–æ–≤, {price_impact}% –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ")

            # –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ swap —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            swap_request = SwapRequest(
                quote_response=quote,
                user_public_key=str(self.wallet_keypair.pubkey()),
                priority_fee_lamports=settings.trading.priority_fee,
                destination_token_account=None
            )

            # –®–∞–≥ 3: –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –æ–±–º–µ–Ω–∞
            swap_transaction = await self.jupiter_client.get_swap_transaction(swap_request)

            if not swap_transaction:
                return self._create_failed_result("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –æ–±–º–µ–Ω–∞",
                                                  amount_sol, trade_index, start_time)

            # –®–∞–≥ 4: –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            signature = await self._send_transaction(swap_transaction)

            if signature:
                execution_time = (time.time() - start_time) * 1000

                logger.success(f"‚úÖ –°–¥–µ–ª–∫–∞ {trade_index + 1} –£–°–ü–ï–®–ù–ê: {signature} ({execution_time:.0f}ms)")

                # –í–ê–ñ–ù–û: –ù–ï –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∑–¥–µ—Å—å - —ç—Ç–æ –¥–µ–ª–∞–µ—Ç –≤—ã–∑—ã–≤–∞—é—â–∏–π –∫–æ–¥
                return TradeResult(
                    success=True,
                    signature=signature,
                    error=None,
                    input_amount=amount_sol,
                    output_amount=0.0,  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤—ã–∑—ã–≤–∞—é—â–∏–º –∫–æ–¥–æ–º
                    price_impact=price_impact,
                    execution_time_ms=execution_time,
                    trade_index=trade_index
                )
            else:
                return self._create_failed_result("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞—Å—å",
                                                  amount_sol, trade_index, start_time)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–¥–µ–ª–∫–∏ {trade_index + 1}: {e}")
            return self._create_failed_result(str(e), amount_sol, trade_index, start_time)