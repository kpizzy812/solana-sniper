"""
üìä MORI Sniper Bot - Jupiter Models –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
–ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Jupiter DEX API
"""

from typing import Dict, List, Optional
from dataclasses import dataclass, field


@dataclass
class TradeResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å–¥–µ–ª–∫–∏"""
    success: bool
    signature: Optional[str]
    error: Optional[str]
    input_amount: float
    output_amount: Optional[float]
    price_impact: Optional[float]
    execution_time_ms: float
    trade_index: int
    gas_used: Optional[int] = None

    def __str__(self):
        if self.success:
            return f"Trade {self.trade_index + 1}: ‚úÖ {self.signature} ({self.execution_time_ms:.0f}ms)"
        else:
            return f"Trade {self.trade_index + 1}: ‚ùå {self.error}"


@dataclass
class QuoteResponse:
    """–û—Ç–≤–µ—Ç –æ—Ç Jupiter API —Å –∫–æ—Ç–∏—Ä–æ–≤–∫–æ–π - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê"""
    input_mint: str
    output_mint: str
    in_amount: str
    out_amount: str
    other_amount_threshold: str  # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ï –ü–û–õ–ï!
    swap_mode: str  # ExactIn –∏–ª–∏ ExactOut
    slippage_bps: int
    platform_fee: Optional[Dict] = None
    price_impact_pct: str = "0"
    route_plan: List[Dict] = field(default_factory=list)

    @property
    def price_impact_float(self) -> float:
        """–ü—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞"""
        try:
            return float(self.price_impact_pct)
        except (ValueError, TypeError):
            return 0.0

    @property
    def in_amount_lamports(self) -> int:
        """–í—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞ –≤ lamports"""
        try:
            return int(self.in_amount)
        except (ValueError, TypeError):
            return 0

    @property
    def out_amount_lamports(self) -> int:
        """–í—ã—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞ –≤ lamports"""
        try:
            return int(self.out_amount)
        except (ValueError, TypeError):
            return 0

    @property
    def in_amount_sol(self) -> float:
        """–í—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞ –≤ SOL"""
        return self.in_amount_lamports / 1e9

    @property
    def out_amount_tokens(self) -> float:
        """–í—ã—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞ –≤ —Ç–æ–∫–µ–Ω–∞—Ö (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)"""
        return self.out_amount_lamports / 1e9  # –ú–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–¥ decimals —Ç–æ–∫–µ–Ω–∞


@dataclass
class SwapRequest:
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ swap —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø JUPITER V6/V1"""
    quote_response: QuoteResponse
    user_public_key: str
    wrap_and_unwrap_sol: bool = True
    fee_account: Optional[str] = None
    as_legacy_transaction: bool = False
    use_token_ledger: bool = False
    destination_token_account: Optional[str] = None
    dynamic_compute_unit_limit: bool = True
    priority_fee_lamports: int = 100000

    def to_dict(self) -> Dict:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        payload = {
            'quoteResponse': {
                'inputMint': self.quote_response.input_mint,
                'outputMint': self.quote_response.output_mint,
                'inAmount': self.quote_response.in_amount,
                'outAmount': self.quote_response.out_amount,
                'otherAmountThreshold': self.quote_response.other_amount_threshold,
                'swapMode': self.quote_response.swap_mode,
                'slippageBps': self.quote_response.slippage_bps,
                'platformFee': self.quote_response.platform_fee,
                'priceImpactPct': self.quote_response.price_impact_pct,
                'routePlan': self.quote_response.route_plan
            },
            'userPublicKey': self.user_public_key,
            'wrapAndUnwrapSol': self.wrap_and_unwrap_sol,
            'asLegacyTransaction': self.as_legacy_transaction,
            'useTokenLedger': self.use_token_ledger,
            'dynamicComputeUnitLimit': self.dynamic_compute_unit_limit,
        }

        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê prioritizationFeeLamports –¥–ª—è Jupiter V6
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ –∫–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
        payload['prioritizationFeeLamports'] = self.priority_fee_lamports

        # –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–û –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç (–µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç):
        # payload['prioritizationFeeLamports'] = {
        #     'priorityLevelWithMaxLamports': {
        #         'maxLamports': self.priority_fee_lamports,
        #         'priorityLevel': 'veryHigh'
        #     }
        # }

        # –ù–ï –î–û–ë–ê–í–õ–Ø–ï–ú destinationTokenAccount - –ø—É—Å—Ç—å Jupiter —Å–∞–º —Å–æ–∑–¥–∞–µ—Ç ATA
        if self.fee_account:
            payload['feeAccount'] = self.fee_account

        return payload


@dataclass
class PoolInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞ (–∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)"""
    liquidity_sol: float
    price: float
    market_cap: float = 0.0
    volume_24h: float = 0.0
    holders_count: int = 100

    @property
    def is_liquid_enough(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏"""
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        try:
            from config.settings import settings
            return self.liquidity_sol >= settings.security.min_liquidity_sol
        except ImportError:
            # Fallback –∑–Ω–∞—á–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
            return self.liquidity_sol >= 5.0

    def __str__(self):
        return f"Pool(liquidity={self.liquidity_sol:.2f} SOL, price={self.price:.8f})"


@dataclass
class TradingSession:
    """–°–µ—Å—Å–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã —Å–¥–µ–ª–æ–∫"""
    token_address: str
    source_info: Dict
    start_time: float
    amounts: List[float]
    results: List[TradeResult] = field(default_factory=list)
    total_sol_spent: float = 0.0
    total_tokens_bought: float = 0.0

    @property
    def successful_trades(self) -> int:
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
        return sum(1 for result in self.results if result.success)

    @property
    def failed_trades(self) -> int:
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
        return len(self.results) - self.successful_trades

    @property
    def success_rate(self) -> float:
        """–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
        if not self.results:
            return 0.0
        return (self.successful_trades / len(self.results)) * 100

    @property
    def average_execution_time(self) -> float:
        """–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
        successful = [r for r in self.results if r.success]
        if not successful:
            return 0.0
        return sum(r.execution_time_ms for r in successful) / len(successful)

    def get_signatures(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–¥–ø–∏—Å–∏ —É—Å–ø–µ—à–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        return [r.signature for r in self.results if r.success and r.signature]

    def add_result(self, result: TradeResult):
        """–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏"""
        self.results.append(result)
        if result.success:
            self.total_sol_spent += result.input_amount
            if result.output_amount:
                self.total_tokens_bought += result.output_amount