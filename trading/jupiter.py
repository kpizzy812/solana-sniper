import asyncio
import time
import json
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from decimal import Decimal

import aiohttp
from solana.rpc.async_api import AsyncClient
from solana.rpc.commitment import Confirmed
from solana.rpc.types import TxOpts
from solders.keypair import Keypair
from solders.pubkey import Pubkey
from solders.transaction import VersionedTransaction
from solders.system_program import TransferParams, transfer
from solders.compute_budget import set_compute_unit_limit, set_compute_unit_price
import base64
import base58
from loguru import logger

from config.settings import settings


@dataclass
class TradeResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å–¥–µ–ª–∫–∏"""
    success: bool
    signature: Optional[str]
    error: Optional[str]
    input_amount: float
    output_amount: Optional[float]
    price_impact: Optional[float]
    execution_time_ms: float
    trade_index: int
    gas_used: Optional[int] = None


@dataclass
class QuoteResponse:
    """–û—Ç–≤–µ—Ç –æ—Ç Jupiter API —Å –∫–æ—Ç–∏—Ä–æ–≤–∫–æ–π"""
    input_mint: str
    output_mint: str
    in_amount: str
    out_amount: str
    price_impact_pct: str
    route_plan: List[Dict]
    other_amount_threshold: Optional[str] = None
    swap_mode: Optional[str] = None


@dataclass
class PoolInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –ø—É–ª–∞"""
    liquidity_sol: float
    price: float
    market_cap: float
    volume_24h: float
    holders_count: int


class UltraFastJupiterTrader:
    """–£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ Jupiter"""

    def __init__(self):
        self.solana_client: Optional[AsyncClient] = None
        self.session: Optional[aiohttp.ClientSession] = None
        self.wallet_keypair: Optional[Keypair] = None

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.total_trades = 0
        self.successful_trades = 0
        self.failed_trades = 0
        self.total_sol_spent = 0.0
        self.total_tokens_bought = 0.0

        # –ö—ç—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        self.quote_cache = {}
        self.pool_cache = {}

        self.setup_wallet()

    def setup_wallet(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—à–µ–ª—å–∫–∞ –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞"""
        try:
            if settings.solana.private_key:
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base58 –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
                private_key_bytes = base58.b58decode(settings.solana.private_key)
                self.wallet_keypair = Keypair.from_bytes(private_key_bytes)
                logger.info(f"üí∞ –ö–æ—à–µ–ª–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω: {self.wallet_keypair.pubkey()}")
            else:
                logger.error("‚ùå –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—à–µ–ª—å–∫–∞: {e}")

    async def start(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Solana RPC –∫–ª–∏–µ–Ω—Ç–∞
            self.solana_client = AsyncClient(
                endpoint=settings.solana.rpc_url,
                commitment=Confirmed
            )

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HTTP —Å–µ—Å—Å–∏–∏ –¥–ª—è Jupiter API
            timeout = aiohttp.ClientTimeout(total=settings.jupiter.timeout)
            connector = aiohttp.TCPConnector(
                limit=settings.jupiter.max_concurrent_requests,
                limit_per_host=settings.jupiter.max_concurrent_requests
            )
            self.session = aiohttp.ClientSession(
                timeout=timeout,
                connector=connector
            )

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            health = await self.health_check()
            if health['status'] != 'healthy':
                raise Exception(f"–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º: {health}")

            logger.success("‚úÖ Jupiter —Ç—Ä–µ–π–¥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Jupiter —Ç—Ä–µ–π–¥–µ—Ä–∞: {e}")
            return False

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.session:
            await self.session.close()
        if self.solana_client:
            await self.solana_client.close()
        logger.info("üõë Jupiter —Ç—Ä–µ–π–¥–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def execute_sniper_trades(self, token_address: str, source_info: Dict) -> List[TradeResult]:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–Ω–∞–π–ø–µ—Ä—Å–∫–∏—Ö —Å–¥–µ–ª–æ–∫
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ –æ–¥–Ω—É –ø–æ–∫—É–ø–∫—É, —Ç–∞–∫ –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ
        """
        logger.critical(f"üéØ –°–ù–ê–ô–ü–ï–† –ê–¢–ê–ö–ê –ù–ê –¢–û–ö–ï–ù: {token_address}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–∫—É–ø–∫–∏
        num_trades = settings.trading.num_purchases
        amount_per_trade = settings.trading.trade_amount_sol

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —É–º–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        if settings.trading.smart_split and num_trades > 1:
            # –£–º–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è
            amounts = self.calculate_smart_amounts(
                total_amount=num_trades * amount_per_trade,
                num_trades=num_trades
            )
        else:
            amounts = [amount_per_trade] * num_trades

        logger.info(f"üìä –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è {num_trades} —Å–¥–µ–ª–æ–∫ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏: {amounts}")

        start_time = time.time()

        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
        if not await self.security_check(token_address):
            logger.error("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
            return []

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if settings.trading.concurrent_trades:
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫
            trade_tasks = []
            for i in range(num_trades):
                task = asyncio.create_task(
                    self.execute_single_trade(token_address, i, amounts[i], source_info)
                )
                trade_tasks.append(task)

            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Å–¥–µ–ª–∫–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            results = await asyncio.gather(*trade_tasks, return_exceptions=True)
        else:
            # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            results = []
            for i in range(num_trades):
                result = await self.execute_single_trade(token_address, i, amounts[i], source_info)
                results.append(result)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        trade_results = []
        successful_count = 0
        total_tokens_bought = 0
        total_sol_spent = 0

        for i, result in enumerate(results):
            if isinstance(result, Exception):
                logger.error(f"‚ùå –°–¥–µ–ª–∫–∞ {i + 1} —É–ø–∞–ª–∞ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º: {result}")
                trade_results.append(TradeResult(
                    success=False,
                    signature=None,
                    error=str(result),
                    input_amount=amounts[i] if i < len(amounts) else amount_per_trade,
                    output_amount=None,
                    price_impact=None,
                    execution_time_ms=0,
                    trade_index=i
                ))
            else:
                trade_results.append(result)
                if result.success:
                    successful_count += 1
                    total_sol_spent += result.input_amount
                    if result.output_amount:
                        total_tokens_bought += result.output_amount

        total_time = (time.time() - start_time) * 1000

        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–∏
        self.log_sniper_summary(
            token_address, successful_count, num_trades,
            total_sol_spent, total_tokens_bought, total_time, source_info
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.total_trades += len(trade_results)
        self.successful_trades += successful_count
        self.failed_trades += (len(trade_results) - successful_count)
        self.total_sol_spent += total_sol_spent
        self.total_tokens_bought += total_tokens_bought

        return trade_results

    def calculate_smart_amounts(self, total_amount: float, num_trades: int) -> List[float]:
        """
        –£–º–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Å–¥–µ–ª–æ–∫ –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è
        –ü–µ—Ä–≤—ã–µ —Å–¥–µ–ª–∫–∏ –±–æ–ª—å—à–µ, –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ–Ω—å—à–µ
        """
        if num_trades == 1:
            return [total_amount]

        # –°–æ–∑–¥–∞–µ–º —É–±—ã–≤–∞—é—â—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        # 40% –≤ –ø–µ—Ä–≤–æ–π —Å–¥–µ–ª–∫–µ, –∑–∞—Ç–µ–º —É–±—ã–≤–∞–Ω–∏–µ
        amounts = []
        remaining = total_amount

        for i in range(num_trades):
            if i == num_trades - 1:
                # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞ - –æ—Å—Ç–∞—Ç–æ–∫
                amounts.append(remaining)
            else:
                # –£–º–µ–Ω—å—à–∞—é—â–∏–π—Å—è —Ä–∞–∑–º–µ—Ä
                factor = (num_trades - i) / num_trades
                amount = (total_amount / num_trades) * (1 + factor * 0.5)
                amount = min(amount, remaining * 0.6)  # –ù–µ –±–æ–ª—å—à–µ 60% –æ—Å—Ç–∞—Ç–∫–∞
                amounts.append(round(amount, 4))
                remaining -= amount

        return amounts

    async def execute_single_trade(self, token_address: str, trade_index: int,
                                   amount_sol: float, source_info: Dict) -> TradeResult:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–∏ —á–µ—Ä–µ–∑ Jupiter"""
        start_time = time.time()

        try:
            logger.debug(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–¥–µ–ª–∫–∏ {trade_index + 1}: {amount_sol} SOL -> {token_address}")

            # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ç–∏—Ä–æ–≤–∫—É –æ—Ç Jupiter
            quote = await self.get_quote(
                input_mint=settings.trading.base_token,  # SOL
                output_mint=token_address,
                amount=int(amount_sol * 1e9),  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ lamports
                slippage_bps=settings.trading.slippage_bps
            )

            if not quote:
                return self.create_failed_result("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫—É",
                                                 amount_sol, trade_index, start_time)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º price impact
            price_impact = float(quote.price_impact_pct)
            if price_impact > settings.security.max_price_impact:
                return self.create_failed_result(
                    f"–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ: {price_impact}%",
                    amount_sol, trade_index, start_time
                )

            logger.debug(
                f"üíπ –°–¥–µ–ª–∫–∞ {trade_index + 1} –∫–æ—Ç–∏—Ä–æ–≤–∫–∞: {quote.out_amount} —Ç–æ–∫–µ–Ω–æ–≤, {price_impact}% –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ")

            # –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –æ–±–º–µ–Ω–∞
            swap_transaction = await self.get_swap_transaction(quote)

            if not swap_transaction:
                return self.create_failed_result("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –æ–±–º–µ–Ω–∞",
                                                 amount_sol, trade_index, start_time)

            # –®–∞–≥ 3: –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            signature = await self.send_transaction(swap_transaction)

            if signature:
                output_amount = float(quote.out_amount) / 1e9  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ lamports
                execution_time = (time.time() - start_time) * 1000

                logger.success(f"‚úÖ –°–¥–µ–ª–∫–∞ {trade_index + 1} –£–°–ü–ï–®–ù–ê: {signature} ({execution_time:.0f}ms)")

                return TradeResult(
                    success=True,
                    signature=signature,
                    error=None,
                    input_amount=amount_sol,
                    output_amount=output_amount,
                    price_impact=price_impact,
                    execution_time_ms=execution_time,
                    trade_index=trade_index
                )
            else:
                return self.create_failed_result("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞—Å—å",
                                                 amount_sol, trade_index, start_time)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–¥–µ–ª–∫–∏ {trade_index + 1}: {e}")
            return self.create_failed_result(str(e), amount_sol, trade_index, start_time)

    def create_failed_result(self, error: str, amount: float, trade_index: int, start_time: float) -> TradeResult:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ—É–¥–∞—á–Ω–æ–π —Å–¥–µ–ª–∫–∏"""
        return TradeResult(
            success=False,
            signature=None,
            error=error,
            input_amount=amount,
            output_amount=None,
            price_impact=None,
            execution_time_ms=(time.time() - start_time) * 1000,
            trade_index=trade_index
        )

    async def get_quote(self, input_mint: str, output_mint: str, amount: int,
                        slippage_bps: int) -> Optional[QuoteResponse]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –æ—Ç Jupiter API"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            cache_key = f"{input_mint}:{output_mint}:{amount}:{slippage_bps}"
            if cache_key in self.quote_cache:
                cached_time, quote = self.quote_cache[cache_key]
                if time.time() - cached_time < 2:  # –ö—ç—à –Ω–∞ 2 —Å–µ–∫—É–Ω–¥—ã
                    return quote

            url = f"{settings.jupiter.api_url}/quote"
            params = {
                'inputMint': input_mint,
                'outputMint': output_mint,
                'amount': amount,
                'slippageBps': slippage_bps,
                'onlyDirectRoutes': False,
                'asLegacyTransaction': False,
                'platformFeeBps': 0,
                'maxAccounts': 64
            }

            async with self.session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    quote = QuoteResponse(
                        input_mint=data['inputMint'],
                        output_mint=data['outputMint'],
                        in_amount=data['inAmount'],
                        out_amount=data['outAmount'],
                        price_impact_pct=data.get('priceImpactPct', '0'),
                        route_plan=data.get('routePlan', []),
                        other_amount_threshold=data.get('otherAmountThreshold'),
                        swap_mode=data.get('swapMode')
                    )

                    # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    self.quote_cache[cache_key] = (time.time(), quote)

                    return quote
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ Quote API {response.status}: {error_text}")
                    return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ç–∏—Ä–æ–≤–∫–∏: {e}")
            return None

    async def get_swap_transaction(self, quote: QuoteResponse) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ–±–º–µ–Ω–∞ –æ—Ç Jupiter API"""
        try:
            url = f"{settings.jupiter.swap_api_url}"
            payload = {
                'quoteResponse': {
                    'inputMint': quote.input_mint,
                    'outputMint': quote.output_mint,
                    'inAmount': quote.in_amount,
                    'outAmount': quote.out_amount,
                    'priceImpactPct': quote.price_impact_pct,
                    'routePlan': quote.route_plan
                },
                'userPublicKey': str(self.wallet_keypair.pubkey()),
                'wrapAndUnwrapSol': True,
                'useSharedAccounts': True,
                'feeAccount': None,
                'prioritizationFeeLamports': settings.trading.priority_fee,
                'asLegacyTransaction': False,
                'useTokenLedger': False,
                'destinationTokenAccount': None
            }

            async with self.session.post(url, json=payload) as response:
                if response.status == 200:
                    data = await response.json()
                    return data.get('swapTransaction')
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ Swap API {response.status}: {error_text}")
                    return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ–±–º–µ–Ω–∞: {e}")
            return None

    async def send_transaction(self, swap_transaction_b64: str) -> Optional[str]:
        """–ü–æ–¥–ø–∏—Å—å –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ Solana"""
        try:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            transaction_bytes = base64.b64decode(swap_transaction_b64)
            transaction = VersionedTransaction.from_bytes(transaction_bytes)

            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            transaction.sign([self.wallet_keypair])

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
            opts = TxOpts(
                skip_preflight=True,  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                preflight_commitment=Confirmed,
                max_retries=settings.trading.max_retries
            )

            response = await self.solana_client.send_raw_transaction(
                bytes(transaction), opts=opts
            )

            if response.value:
                signature = str(response.value)
                logger.debug(f"üì§ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {signature}")
                return signature
            else:
                logger.error("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞—Å—å")
                return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
            return None

    async def security_check(self, token_address: str) -> bool:
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞"""
        try:
            if not settings.security.enable_security_checks:
                return True

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –ø—É–ª–∞
            pool_info = await self.get_pool_info(token_address)
            if not pool_info:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É–ª–µ –¥–ª—è {token_address}")
                return False

            if pool_info.liquidity_sol < settings.security.min_liquidity_sol:
                logger.warning(
                    f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {pool_info.liquidity_sol} SOL < {settings.security.min_liquidity_sol} SOL")
                return False

            logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–∞: {pool_info.liquidity_sol} SOL –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
            return False

    async def get_pool_info(self, token_address: str) -> Optional[PoolInfo]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –ø—É–ª–∞"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—É–ª–µ
            # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Jupiter API –∏–ª–∏ –ø—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ DEX

            # –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å
            return PoolInfo(
                liquidity_sol=10.0,  # –ü—Ä–∏–º–µ—Ä
                price=0.001,
                market_cap=1000000,
                volume_24h=50000,
                holders_count=100
            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—É–ª–µ: {e}")
            return None

    def log_sniper_summary(self, token_address: str, successful: int, total: int,
                           sol_spent: float, tokens_bought: float, total_time: float, source_info: Dict):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ —Å–Ω–∞–π–ø–µ—Ä—Å–∫–æ–π –∞—Ç–∞–∫–∏"""
        logger.critical("üéØ –ò–¢–û–ì–ò –°–ù–ê–ô–ü–ï–† –ê–¢–ê–ö–ò:")
        logger.info(f"  üìç –ö–æ–Ω—Ç—Ä–∞–∫—Ç: {token_address}")
        logger.info(f"  üì± –ò—Å—Ç–æ—á–Ω–∏–∫: {source_info.get('platform', 'unknown')} - {source_info.get('source', 'unknown')}")
        logger.info(f"  ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {successful}/{total}")
        logger.info(f"  üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ SOL: {sol_spent:.4f}")
        logger.info(f"  ü™ô –ö—É–ø–ª–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {tokens_bought:,.0f}")
        logger.info(f"  ‚ö° –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.0f}ms")

        if total > 0:
            logger.info(f"  üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Å–¥–µ–ª–∫—É: {total_time / total:.0f}ms")
            success_rate = (successful / total) * 100
            logger.info(f"  üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")

    async def get_sol_balance(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ SOL"""
        try:
            response = await self.solana_client.get_balance(self.wallet_keypair.pubkey())
            if response.value:
                return response.value / 1e9  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º lamports –≤ SOL
            return 0.0
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ SOL: {e}")
            return 0.0

    async def health_check(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Solana (–∏—Å–ø–æ–ª—å–∑—É–µ–º get_version –≤–º–µ—Å—Ç–æ get_health)
            try:
                response = await self.solana_client.get_version()
                solana_healthy = response.value is not None
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Solana RPC: {e}")
                solana_healthy = False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Jupiter API
            try:
                async with self.session.get(
                        f"{settings.jupiter.api_url}/quote?inputMint=So11111111111111111111111111111111111111112&outputMint=EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v&amount=1000000&slippageBps=50") as resp:
                    jupiter_healthy = resp.status == 200
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Jupiter API: {e}")
                jupiter_healthy = False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
            try:
                sol_balance = await self.get_sol_balance()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
                sol_balance = 0.0

            status = "healthy" if solana_healthy and jupiter_healthy else "degraded"

            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if not solana_healthy:
                logger.warning("‚ö†Ô∏è Solana RPC –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            if not jupiter_healthy:
                logger.warning("‚ö†Ô∏è Jupiter API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

            return {
                "status": status,
                "solana_rpc": "healthy" if solana_healthy else "error",
                "jupiter_api": "healthy" if jupiter_healthy else "error",
                "wallet_address": str(self.wallet_keypair.pubkey()) if self.wallet_keypair else "unknown",
                "sol_balance": sol_balance,
                "stats": {
                    "total_trades": self.total_trades,
                    "successful_trades": self.successful_trades,
                    "failed_trades": self.failed_trades,
                    "success_rate": self.successful_trades / max(self.total_trades, 1) * 100,
                    "total_sol_spent": self.total_sol_spent,
                    "total_tokens_bought": self.total_tokens_bought
                }
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ health check: {e}")
            return {"status": "error", "message": str(e)}


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–µ–π–¥–µ—Ä–∞
jupiter_trader = UltraFastJupiterTrader()