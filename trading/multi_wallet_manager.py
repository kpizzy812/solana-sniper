import asyncio
import time
import random
from typing import List, Dict, Optional, Tuple
from dataclasses import dataclass
from loguru import logger

from solana.rpc.async_api import AsyncClient
from solana.rpc.commitment import Confirmed

from config.multi_wallet import MultiWalletConfig, MultiWalletInfo
from trading.jupiter.models import TradeResult


@dataclass
class MultiWalletTradeResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∫–æ—à–µ–ª—å–∫–∞–º–∏"""
    token_address: str
    total_trades: int
    successful_trades: int
    failed_trades: int
    total_sol_spent: float
    total_tokens_bought: float
    execution_time_ms: float
    wallet_results: List[Tuple[str, TradeResult]]  # (wallet_address, result)
    delayed_start: bool = False

    @property
    def success_rate(self) -> float:
        """–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
        if self.total_trades == 0:
            return 0.0
        return (self.successful_trades / self.total_trades) * 100


class MultiWalletManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∫–æ—à–µ–ª—å–∫–∞–º–∏"""

    def __init__(self, solana_client: AsyncClient, jupiter_trader):
        self.solana_client = solana_client
        self.jupiter_trader = jupiter_trader
        self.config = MultiWalletConfig()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_sessions = 0
        self.total_successful_trades = 0
        self.total_failed_trades = 0

        logger.info(f"üé≠ MultiWallet Manager: {len(self.config.wallets)} –∫–æ—à–µ–ª—å–∫–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")

    async def start(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        if not self.config.is_enabled():
            logger.info("üì± –°–∏—Å—Ç–µ–º–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º")
            return True

        logger.info("üé≠ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
        await self.update_all_balances()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ
        available_wallets = self.config.get_available_wallets()
        total_balance = self.config.get_total_available_balance()

        if len(available_wallets) == 0:
            logger.error("‚ùå –ù–µ—Ç –∫–æ—à–µ–ª—å–∫–æ–≤ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏")
            return False

        logger.success(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –≥–æ—Ç–æ–≤–∞:")
        logger.info(f"   üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏: {len(available_wallets)}/{len(self.config.wallets)}")
        logger.info(f"   üíé –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance:.4f} SOL")
        logger.info(f"   ‚è±Ô∏è –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {self.config.initial_delay_seconds}s")
        logger.info(f"   üé≤ –†–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—è: {self.config.randomize_amounts}")

        return True

    async def execute_multi_wallet_trades(self, token_address: str,
                                          base_trade_amount: float,
                                          num_trades: int,
                                          source_info: Dict) -> MultiWalletTradeResult:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤

        Args:
            token_address: –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
            base_trade_amount: –ë–∞–∑–æ–≤–∞—è —Å—É–º–º–∞ –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–∏
            num_trades: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫
            source_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ —Å–∏–≥–Ω–∞–ª–∞
        """
        start_time = time.time()

        if not self.config.is_enabled():
            # Fallback –∫ –æ–±—ã—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ
            logger.warning("‚ö†Ô∏è –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º")
            return await self._fallback_to_single_wallet(
                token_address, base_trade_amount, num_trades, source_info
            )

        logger.critical(f"üé≠ –ó–ê–ü–£–°–ö –ú–£–õ–¨–¢–ò-–ö–û–®–ï–õ–¨–ö–û–í–û–ì–û –°–ù–ê–ô–ü–ò–ù–ì–ê!")
        logger.critical(f"üéØ –¢–æ–∫–µ–Ω: {token_address}")
        logger.critical(f"üí∞ –ü–ª–∞–Ω: {num_trades} —Å–¥–µ–ª–æ–∫ –ø–æ ~{base_trade_amount} SOL")

        # –ó–ê–î–ï–†–ñ–ö–ê –ü–ï–†–ï–î –ù–ê–ß–ê–õ–û–ú –¢–û–†–ì–û–í–õ–ò
        if self.config.initial_delay_seconds > 0:
            logger.warning(f"‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Ç–æ—Ä–≥–æ–≤–ª–µ–π: {self.config.initial_delay_seconds} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(self.config.initial_delay_seconds)
            logger.critical("üöÄ –ó–ê–î–ï–†–ñ–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê - –ù–ê–ß–ò–ù–ê–ï–ú –¢–û–†–ì–û–í–õ–Æ!")

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–µ—Ä–µ–¥ —Ç–æ—Ä–≥–æ–≤–ª–µ–π
        await self.update_all_balances()

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏ –ø–æ –∫–æ—à–µ–ª—å–∫–∞–º
        trade_plan = self._create_trade_plan(base_trade_amount, num_trades)

        if not trade_plan:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω —Ç–æ—Ä–≥–æ–≤–ª–∏ - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
            return self._create_empty_result(token_address, start_time)

        logger.info(f"üìã –ü–ª–∞–Ω —Ç–æ—Ä–≥–æ–≤–ª–∏: {len(trade_plan)} —Å–¥–µ–ª–æ–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø–æ –∫–æ—à–µ–ª—å–∫–∞–º")

        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
        wallet_results = await self._execute_trade_plan(token_address, trade_plan, source_info)

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        result = self._compile_results(token_address, wallet_results, start_time, True)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.total_sessions += 1
        self.total_successful_trades += result.successful_trades
        self.total_failed_trades += result.failed_trades

        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–∏
        self._log_multi_wallet_summary(result)

        return result

    def _create_trade_plan(self, base_amount: float, num_trades: int) -> List[Tuple[MultiWalletInfo, float]]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫ –ø–æ –∫–æ—à–µ–ª—å–∫–∞–º
        –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç—Ä–∞—Ç –≤—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        """
        trade_plan = []

        if self.config.use_max_available_balance:
            # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –¢—Ä–∞—Ç–∏–º –≤–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å –∫–∞–∂–¥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
            logger.critical("üí∞ –†–ï–ñ–ò–ú: –¢—Ä–∞—Ç–∞ –≤—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å –∫–æ—à–µ–ª—å–∫–æ–≤!")

            available_wallets = self.config.get_available_wallets()

            for wallet in available_wallets:
                # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
                max_trade_amount = self.config.get_max_trade_amount_for_wallet(wallet)

                if max_trade_amount > 0.001:  # –ú–∏–Ω–∏–º—É–º 0.001 SOL –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
                    logger.info(f"üìä –ö–æ—à–µ–ª–µ–∫ {wallet.address[:8]}...: {max_trade_amount:.6f} SOL (–≤–µ—Å—å –±–∞–ª–∞–Ω—Å)")
                    trade_plan.append((wallet, max_trade_amount))
                else:
                    logger.debug(f"‚è≠Ô∏è –ö–æ—à–µ–ª–µ–∫ {wallet.address[:8]}... –ø—Ä–æ–ø—É—â–µ–Ω: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")

            logger.critical(f"üíé –ò–¢–û–ì–û: {len(trade_plan)} –∫–æ—à–µ–ª—å–∫–æ–≤ –≥–æ—Ç–æ–≤—ã –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –≤–µ—Å—å –±–∞–ª–∞–Ω—Å")

        else:
            # –°–¢–ê–†–ê–Ø –õ–û–ì–ò–ö–ê: –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—É–º–º—ã —Å–¥–µ–ª–æ–∫
            logger.info("üí∞ –†–ï–ñ–ò–ú: –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—É–º–º—ã —Å–¥–µ–ª–æ–∫")

            used_wallets = set()

            for i in range(num_trades):
                # –†–∞–Ω–¥–æ–º–∏–∑–∏—Ä—É–µ–º —Å—É–º–º—É —Å–¥–µ–ª–∫–∏
                trade_amount = self.config.randomize_trade_amount(base_amount)

                # –í—ã–±–∏—Ä–∞–µ–º –∫–æ—à–µ–ª–µ–∫ –¥–ª—è —Å–¥–µ–ª–∫–∏
                wallet = self.config.select_wallet_for_trade(trade_amount)

                if not wallet:
                    logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ—à–µ–ª–µ–∫ –¥–ª—è —Å–¥–µ–ª–∫–∏ {i + 1} –Ω–∞ {trade_amount} SOL")
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Å–¥–µ–ª–æ–∫ –Ω–∞ –∫–æ—à–µ–ª–µ–∫
                if wallet.address in used_wallets:
                    wallet_usage = sum(1 for w, _ in trade_plan if w.address == wallet.address)
                    if wallet_usage >= self.config.max_trades_per_wallet:
                        logger.debug(f"‚è≠Ô∏è –ö–æ—à–µ–ª–µ–∫ {wallet.address[:8]}... –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ —Å–¥–µ–ª–æ–∫")
                        continue

                trade_plan.append((wallet, trade_amount))
                used_wallets.add(wallet.address)

                logger.debug(f"üìù –°–¥–µ–ª–∫–∞ {i + 1}: {trade_amount} SOL —á–µ—Ä–µ–∑ {wallet.address[:8]}...")

        return trade_plan

    async def _execute_trade_plan(self, token_address: str,
                                  trade_plan: List[Tuple[MultiWalletInfo, float]],
                                  source_info: Dict) -> List[Tuple[str, TradeResult]]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        from solders.pubkey import Pubkey

        wallet_results = []
        token_mint = Pubkey.from_string(token_address)

        for i, (wallet, amount) in enumerate(trade_plan):
            try:
                logger.info(f"üîÑ –°–¥–µ–ª–∫–∞ {i + 1}/{len(trade_plan)}: {amount} SOL —á–µ—Ä–µ–∑ {wallet.address[:8]}...")

                # –ù–û–í–û–ï: –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ –î–û –ø–æ–∫—É–ø–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
                balance_before = await self._get_token_balance_with_decimals(wallet.keypair.pubkey(), token_mint)

                # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–µ–Ω—è–µ–º –∫–æ—à–µ–ª–µ–∫ –≤ Jupiter trader
                original_keypair = self.jupiter_trader.executor.wallet_keypair
                self.jupiter_trader.executor.wallet_keypair = wallet.keypair

                # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–¥–Ω—É —Å–¥–µ–ª–∫—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, —Ç–∞–∫ –∫–∞–∫ —Ñ–∏–∫—Å —É–∂–µ –≤ executor)
                results = await self.jupiter_trader.executor._execute_single_trade(
                    token_address=token_address,
                    trade_index=i,
                    amount_sol=amount,
                    source_info=source_info
                )

                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫
                self.jupiter_trader.executor.wallet_keypair = original_keypair

                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ï—Å–ª–∏ —Å–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–∞, –Ω–æ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–∫–µ–Ω–∞—Ö, –ø–æ–ª—É—á–∞–µ–º –∏—Ö —Å–∞–º–∏
                if results.success and (not results.output_amount or results.output_amount <= 0):
                    # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    await asyncio.sleep(2)

                    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ü–û–°–õ–ï –ø–æ–∫—É–ø–∫–∏
                    balance_after = await self._get_token_balance_with_decimals(wallet.keypair.pubkey(), token_mint)

                    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∞–ª—å–Ω–æ –∫—É–ø–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    actual_tokens_bought = balance_after - balance_before

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–∫–µ–Ω–æ–≤
                    results.output_amount = actual_tokens_bought

                    logger.info(f"ü™ô –ö–æ—à–µ–ª–µ–∫ {wallet.address[:8]}... –∫—É–ø–∏–ª: {actual_tokens_bought:,.6f} —Ç–æ–∫–µ–Ω–æ–≤")

                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—à–µ–ª—å–∫–µ
                if results.success:
                    wallet.mark_used(amount)

                wallet_results.append((wallet.address, results))

                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
                if i < len(trade_plan) - 1:
                    delay = self.config.get_inter_trade_delay()
                    logger.debug(f"‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π —Å–¥–µ–ª–∫–æ–π: {delay:.1f}s")
                    await asyncio.sleep(delay)

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–¥–µ–ª–∫–∏ {i + 1} —á–µ—Ä–µ–∑ {wallet.address[:8]}...: {e}")

                # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—à–∏–±–∫–∏
                error_result = TradeResult(
                    success=False,
                    signature=None,
                    error=str(e),
                    input_amount=amount,
                    output_amount=None,
                    price_impact=None,
                    execution_time_ms=0,
                    trade_index=i
                )

                wallet_results.append((wallet.address, error_result))

        return wallet_results

    # –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–ª–∞—Å—Å MultiWalletManager
    async def _get_token_balance_with_decimals(self, wallet_pubkey, token_mint) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —É—á–µ—Ç–æ–º decimals - –ö–û–ü–ò–Ø –ò–ó TRANSFER_MANAGER"""
        try:
            from spl.token.instructions import get_associated_token_address
            from solana.rpc.commitment import Confirmed
            from solders.pubkey import Pubkey

            # –ü–æ–ª—É—á–∞–µ–º associated token account
            ata = get_associated_token_address(wallet_pubkey, token_mint)

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
            account_info = await self.jupiter_trader.executor.solana_client.get_account_info(ata, commitment=Confirmed)

            if not account_info.value:
                # –ñ–¥–µ–º —Å–æ–∑–¥–∞–Ω–∏—è ATA –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑
                await asyncio.sleep(3)
                account_info = await self.solana_client.get_account_info(ata, commitment=Confirmed)

                if not account_info.value:
                    logger.debug(f"üí∞ ATA –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {str(wallet_pubkey)[:8]}...")
                    return 0.0

            data = account_info.value.data

            data = account_info.value.data

            if len(data) < 72:
                logger.debug(f"üí∞ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ATA –¥–ª—è {str(wallet_pubkey)[:8]}...")
                return 0.0

            # SPL Token Account layout:
            # 64-72: amount (8 bytes little-endian uint64)
            amount_bytes = data[64:72]
            amount_raw = int.from_bytes(amount_bytes, byteorder='little')

            if amount_raw == 0:
                return 0.0

            # –ü–æ–ª—É—á–∞–µ–º decimals –¥–ª—è —Ç–æ–∫–µ–Ω–∞
            decimals = await self._get_token_decimals(token_mint)

            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
            balance = amount_raw / (10 ** decimals)

            logger.debug(f"üí∞ –ë–∞–ª–∞–Ω—Å {str(wallet_pubkey)[:8]}...: {balance:.6f} —Ç–æ–∫–µ–Ω–æ–≤")
            return balance

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–∞: {e}")
            return 0.0

    # –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–ª–∞—Å—Å MultiWalletManager
    async def _get_token_decimals(self, token_mint) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ decimals –¥–ª—è —Ç–æ–∫–µ–Ω–∞ - –ö–û–ü–ò–Ø –ò–ó TRANSFER_MANAGER"""
        try:
            from solana.rpc.commitment import Confirmed

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ mint –∞–∫–∫–∞—É–Ω—Ç–µ
            mint_info = await self.jupiter_trader.executor.solana_client.get_account_info(token_mint,
                                                                                          commitment=Confirmed)

            if not mint_info.value:
                logger.debug(f"üìä Mint –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º 6 decimals –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                return 6

            data = mint_info.value.data

            if len(data) < 44:
                return 6

            # SPL Token Mint layout: decimals –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ 44
            decimals = data[44]

            logger.debug(f"üí∞ Decimals –¥–ª—è —Ç–æ–∫–µ–Ω–∞: {decimals}")
            return decimals

        except Exception as e:
            logger.debug(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è decimals: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º 6")
            return 6

    async def _fallback_to_single_wallet(self, token_address: str, base_amount: float,
                                         num_trades: int, source_info: Dict) -> MultiWalletTradeResult:
        """Fallback –∫ –æ–±—ã—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ –æ–¥–Ω–∏–º –∫–æ—à–µ–ª—å–∫–æ–º"""
        start_time = time.time()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ç–æ—Ä–≥–æ–≤–ª—é Jupiter
        results = await self.jupiter_trader.execute_sniper_trades(token_address, source_info)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç MultiWalletTradeResult
        successful = sum(1 for r in results if r.success)
        failed = len(results) - successful
        total_sol = sum(r.input_amount for r in results if r.success)
        total_tokens = sum(r.output_amount or 0 for r in results if r.success)

        wallet_results = [(str(self.jupiter_trader.executor.wallet_keypair.pubkey()), r) for r in results]

        return MultiWalletTradeResult(
            token_address=token_address,
            total_trades=len(results),
            successful_trades=successful,
            failed_trades=failed,
            total_sol_spent=total_sol,
            total_tokens_bought=total_tokens,
            execution_time_ms=(time.time() - start_time) * 1000,
            wallet_results=wallet_results,
            delayed_start=False
        )

    def _compile_results(self, token_address: str, wallet_results: List[Tuple[str, TradeResult]],
                         start_time: float, delayed_start: bool) -> MultiWalletTradeResult:
        """–ö–æ–º–ø–∏–ª—è—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        successful = sum(1 for _, r in wallet_results if r.success)
        failed = len(wallet_results) - successful

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç SOL –∏ —Ç–æ–∫–µ–Ω–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ None
        total_sol = 0.0
        total_tokens = 0.0

        for _, r in wallet_results:
            if r.success:
                # SOL –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π —Å–¥–µ–ª–∫–µ
                total_sol += r.input_amount

                # –¢–æ–∫–µ–Ω—ã –º–æ–≥—É—Ç –±—ã—Ç—å None, –ø—Ä–æ–≤–µ—Ä—è–µ–º
                if r.output_amount is not None and r.output_amount > 0:
                    total_tokens += r.output_amount
                else:
                    logger.warning(f"‚ö†Ô∏è –°–¥–µ–ª–∫–∞ {r.signature or 'unknown'} –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–∫–µ–Ω–∞—Ö")

        logger.info(f"üìä –ö–æ–º–ø–∏–ª—è—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        logger.info(f"  ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {successful}/{len(wallet_results)}")
        logger.info(f"  üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ SOL: {total_sol:.6f}")
        logger.info(f"  ü™ô –ö—É–ø–ª–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {total_tokens:,.6f}")

        return MultiWalletTradeResult(
            token_address=token_address,
            total_trades=len(wallet_results),
            successful_trades=successful,
            failed_trades=failed,
            total_sol_spent=total_sol,
            total_tokens_bought=total_tokens,  # –£–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–¥—Å—á–∏—Ç–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
            execution_time_ms=(time.time() - start_time) * 1000,
            wallet_results=wallet_results,
            delayed_start=delayed_start
        )

    def _create_empty_result(self, token_address: str, start_time: float) -> MultiWalletTradeResult:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
        return MultiWalletTradeResult(
            token_address=token_address,
            total_trades=0,
            successful_trades=0,
            failed_trades=0,
            total_sol_spent=0.0,
            total_tokens_bought=0.0,
            execution_time_ms=(time.time() - start_time) * 1000,
            wallet_results=[],
            delayed_start=False
        )

    def _log_multi_wallet_summary(self, result: MultiWalletTradeResult):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ –º—É–ª—å—Ç–∏-–∫–æ—à–µ–ª—å–∫–æ–≤–æ–≥–æ —Å–Ω–∞–π–ø–∏–Ω–≥–∞"""
        logger.critical("üé≠ –ò–¢–û–ì–ò –ú–£–õ–¨–¢–ò-–ö–û–®–ï–õ–¨–ö–û–í–û–ì–û –°–ù–ê–ô–ü–ò–ù–ì–ê:")
        logger.info(f"  üéØ –ö–æ–Ω—Ç—Ä–∞–∫—Ç: {result.token_address}")
        logger.info(f"  ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {result.successful_trades}/{result.total_trades}")
        logger.info(f"  üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ SOL: {result.total_sol_spent:.4f}")
        logger.info(f"  ü™ô –ö—É–ø–ª–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {result.total_tokens_bought:,.0f}")
        logger.info(f"  ‚ö° –û–±—â–µ–µ –≤—Ä–µ–º—è: {result.execution_time_ms:.0f}ms")
        logger.info(f"  üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {result.success_rate:.1f}%")

        if result.delayed_start:
            logger.info(f"  ‚è±Ô∏è –í–∫–ª—é—á–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞: {self.config.initial_delay_seconds}s")

        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ—à–µ–ª—å–∫–∏ —É—á–∞—Å—Ç–≤–æ–≤–∞–≤—à–∏–µ –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ
        unique_wallets = set(addr for addr, _ in result.wallet_results)
        logger.info(f"  üé≠ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∫–æ—à–µ–ª—å–∫–æ–≤: {len(unique_wallets)}")

        # –ü–æ–¥–ø–∏—Å–∏ —É—Å–ø–µ—à–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        signatures = [r.signature for _, r in result.wallet_results if r.success and r.signature]
        if signatures:
            logger.info("  üìù –ü–æ–¥–ø–∏—Å–∏ —É—Å–ø–µ—à–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:")
            for i, sig in enumerate(signatures):
                logger.info(f"    {i + 1}. {sig}")

    async def update_all_balances(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤"""
        if not self.config.wallets:
            return

        logger.debug("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤...")

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        balance_tasks = []
        for wallet in self.config.wallets:
            task = asyncio.create_task(self._get_wallet_balance(wallet))
            balance_tasks.append(task)

        results = await asyncio.gather(*balance_tasks, return_exceptions=True)

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã
        for wallet, result in zip(self.config.wallets, results):
            if isinstance(result, Exception):
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ {wallet.address[:8]}...: {result}")
            else:
                wallet.update_balance(result)

        total_balance = sum(w.balance_sol for w in self.config.wallets)
        available_balance = sum(w.available_balance for w in self.config.wallets)

        logger.debug(f"üí∞ –û–±–Ω–æ–≤–ª–µ–Ω—ã –±–∞–ª–∞–Ω—Å—ã: {total_balance:.4f} SOL –æ–±—â–∏–π, {available_balance:.4f} SOL –¥–æ—Å—Ç—É–ø–Ω–æ")

    async def _get_wallet_balance(self, wallet: MultiWalletInfo) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞"""
        try:
            response = await self.solana_client.get_balance(wallet.keypair.pubkey())
            if response.value:
                return response.value / 1e9  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º lamports –≤ SOL
            return 0.0
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ {wallet.address[:8]}...: {e}")
            return 0.0

    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        base_stats = {
            "multi_wallet_enabled": self.config.is_enabled(),
            "total_sessions": self.total_sessions,
            "total_successful_trades": self.total_successful_trades,
            "total_failed_trades": self.total_failed_trades
        }

        if self.config.is_enabled():
            base_stats.update(self.config.get_stats())

        return base_stats

    async def health_check(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤"""
        if not self.config.is_enabled():
            return {"status": "disabled", "message": "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã"}

        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã
            await self.update_all_balances()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ—à–µ–ª—å–∫–æ–≤
            available_wallets = self.config.get_available_wallets()
            total_balance = self.config.get_total_available_balance()

            status = "healthy" if len(available_wallets) > 0 else "degraded"

            return {
                "status": status,
                "total_wallets": len(self.config.wallets),
                "available_wallets": len(available_wallets),
                "total_balance_sol": total_balance,
                "min_balance_threshold": self.config.min_balance,
                "ready_for_trading": len(available_wallets) > 0
            }

        except Exception as e:
            return {"status": "error", "message": str(e)}