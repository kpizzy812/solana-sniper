#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∞–π—Ç—É https://morico.in/
–ü—Ä–æ–≤–µ—Ä—è–µ–º Cloudflare –∑–∞—â–∏—Ç—É –∏ –∏—â–µ–º –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å –ú–û–†–ò"
"""

import asyncio
import aiohttp
import time
from bs4 import BeautifulSoup


class MoricoSiteTester:
    """–¢–µ—Å—Ç–µ—Ä —Å–∞–π—Ç–∞ MORICO"""

    def __init__(self):
        self.url = "https://morico.in/"
        self.session = None

    async def test_site_access(self):
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∞–π—Ç—É"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ https://morico.in/")
        print("=" * 60)

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å —Ä–∞–∑–Ω—ã–º–∏ User-Agent
        await self.test_with_different_headers()

    async def test_with_different_headers(self):
        """–¢–µ—Å—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏"""

        # –†–∞–∑–Ω—ã–µ User-Agent –¥–ª—è –æ–±—Ö–æ–¥–∞ Cloudflare
        user_agents = [
            # –û–±—ã—á–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            # Firefox
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/121.0',
            # Safari
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Version/17.1 Safari/537.36',
        ]

        for i, ua in enumerate(user_agents):
            print(f"\nüîç –¢–µ—Å—Ç {i + 1}: {ua[:50]}...")

            try:
                timeout = aiohttp.ClientTimeout(total=30)
                headers = {
                    'User-Agent': ua,
                    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                    'Accept-Language': 'en-US,en;q=0.5',
                    'Accept-Encoding': 'gzip, deflate, br',
                    'DNT': '1',
                    'Connection': 'keep-alive',
                    'Upgrade-Insecure-Requests': '1',
                }

                async with aiohttp.ClientSession(timeout=timeout, headers=headers) as session:
                    start_time = time.time()

                    async with session.get(self.url) as response:
                        response_time = (time.time() - start_time) * 1000
                        content = await response.text()

                        print(f"   üìä –°—Ç–∞—Ç—É—Å: {response.status}")
                        print(f"   ‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time:.0f}ms")
                        print(f"   üìè –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ Cloudflare
                        if 'cloudflare' in content.lower() or 'checking your browser' in content.lower():
                            print("   üõ°Ô∏è Cloudflare –∑–∞—â–∏—Ç–∞: –ê–ö–¢–ò–í–ù–ê")
                            print("   ‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ö–æ–¥ –∑–∞—â–∏—Ç—ã")
                        else:
                            print("   ‚úÖ Cloudflare –∑–∞—â–∏—Ç–∞: –æ–±–æ–π–¥–µ–Ω–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

                            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                            await self.analyze_content(content)
                            return  # –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç

            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

        print("\n‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ—É–¥–∞—á–Ω—ã")

    async def analyze_content(self, content: str):
        """–ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–∞–π—Ç–∞"""
        print("\nüîç –ê–ù–ê–õ–ò–ó –°–û–î–ï–†–ñ–ò–ú–û–ì–û –°–ê–ô–¢–ê:")

        try:
            soup = BeautifulSoup(content, 'html.parser')

            # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            title = soup.find('title')
            if title:
                print(f"üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title.get_text().strip()}")

            # –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å" –∏–ª–∏ "Buy"
            buy_buttons = []

            # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
            possible_selectors = [
                'button', 'a', '.btn', '.button', '[class*="buy"]', '[class*="purchase"]',
                '[id*="buy"]', '[id*="purchase"]', 'input[type="button"]'
            ]

            for selector in possible_selectors:
                elements = soup.select(selector)
                for element in elements:
                    text = element.get_text().strip().lower()
                    if any(word in text for word in ['buy', '–∫—É–ø–∏—Ç—å', 'purchase', '–º–æ—Ä–∏', 'mori']):
                        buy_buttons.append(element)

            print(f"\nüîò –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –ø–æ–∫—É–ø–∫–∏: {len(buy_buttons)}")

            for i, button in enumerate(buy_buttons):
                print(f"\n   –ö–Ω–æ–ø–∫–∞ {i + 1}:")
                print(f"   üìù –¢–µ–∫—Å—Ç: {button.get_text().strip()}")
                print(f"   üè∑Ô∏è Tag: {button.name}")
                print(f"   üé® Class: {button.get('class', [])}")
                print(f"   üÜî ID: {button.get('id', '–Ω–µ—Ç')}")
                print(f"   üîó Href: {button.get('href', '–Ω–µ—Ç')}")
                print(f"   üéØ Onclick: {button.get('onclick', '–Ω–µ—Ç')}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∏–ª–∏
                style = button.get('style', '')
                if style:
                    print(f"   üé® Style: {style}")
                    if 'display:none' in style or 'opacity:0' in style:
                        print("   üëª –ö–ù–û–ü–ö–ê –°–ö–†–´–¢–ê!")

            # –ò—â–µ–º –ª—é–±—ã–µ Solana –∞–¥—Ä–µ—Å–∞ –≤ –∫–æ–¥–µ
            import re
            solana_pattern = r'\b[1-9A-HJ-NP-Za-km-z]{32,44}\b'
            addresses = re.findall(solana_pattern, content)

            if addresses:
                print(f"\nüéØ –ù–∞–π–¥–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ Solana –∞–¥—Ä–µ—Å–∞: {len(addresses)}")
                for addr in addresses[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    print(f"   üìç {addr}")
            else:
                print("\n‚ùå Solana –∞–¥—Ä–µ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

            # –ò—â–µ–º JavaScript –∫–æ–¥ —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –ø–æ–∫—É–ø–∫–æ–π
            scripts = soup.find_all('script')
            print(f"\nüìú JavaScript —Å–∫—Ä–∏–ø—Ç–æ–≤: {len(scripts)}")

            for script in scripts:
                script_content = script.get_text()
                if any(word in script_content.lower() for word in ['buy', 'purchase', 'contract', 'solana', 'jupiter']):
                    print("   üéØ –ù–∞–π–¥–µ–Ω JS –∫–æ–¥ —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –ø–æ–∫—É–ø–∫–æ–π")
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                    lines = script_content.split('\n')
                    for line in lines:
                        if any(word in line.lower() for word in ['buy', 'contract', 'solana']):
                            print(f"      üìú {line.strip()[:100]}")
                    break

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")

    async def test_with_selenium_headers(self):
        """–¢–µ—Å—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –ø–æ—Ö–æ–∂–∏–º–∏ –Ω–∞ Selenium (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)"""
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ –µ—Å–ª–∏ aiohttp –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
        pass


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = MoricoSiteTester()
    await tester.test_site_access()


if __name__ == "__main__":
    asyncio.run(main())