#!/usr/bin/env python3
"""
üßô‚Äç‚ôÇÔ∏è MORI Sniper Bot Configuration Wizard
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import os
import sys
from pathlib import Path
from typing import Dict, Optional


class ConfigWizard:
    """–ú–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""

    def __init__(self):
        self.config = {}
        self.env_file_path = Path('.env')

    def print_header(self):
        """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        print("üßô‚Äç‚ôÇÔ∏è MORI Sniper Bot - –ú–∞—Å—Ç–µ—Ä –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        print("=" * 50)
        print()
        print("–≠—Ç–æ—Ç –º–∞—Å—Ç–µ—Ä –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞ –ø–æ—à–∞–≥–æ–≤–æ")
        print("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        print()

    def ask_input(self, prompt: str, default: str = "", required: bool = False, secret: bool = False) -> str:
        """–ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if default:
            display_prompt = f"{prompt} [{default}]: "
        else:
            display_prompt = f"{prompt}: "

        while True:
            if secret:
                import getpass
                value = getpass.getpass(display_prompt)
            else:
                value = input(display_prompt).strip()

            if value:
                return value
            elif default:
                return default
            elif required:
                print("‚ùå –≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
                continue
            else:
                return ""

    def ask_yes_no(self, prompt: str, default: bool = True) -> bool:
        """–ó–∞–ø—Ä–æ—Å –¥–∞/–Ω–µ—Ç"""
        default_str = "Y/n" if default else "y/N"
        response = input(f"{prompt} [{default_str}]: ").strip().lower()

        if not response:
            return default

        return response in ['y', 'yes', '–¥–∞', '–¥']

    def choose_option(self, prompt: str, options: Dict[str, str], default: str = None) -> str:
        """–í—ã–±–æ—Ä –æ–ø—Ü–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞"""
        print(f"\n{prompt}")
        for key, description in options.items():
            marker = " (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)" if key == default else ""
            print(f"  {key}) {description}{marker}")

        while True:
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: ").strip()

            if choice in options:
                return choice
            elif not choice and default:
                return default
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    def configure_solana(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Solana"""
        print("‚õìÔ∏è –ù–ê–°–¢–†–û–ô–ö–ê SOLANA –ë–õ–û–ö–ß–ï–ô–ù–ê")
        print("-" * 30)

        # –í—ã–±–æ—Ä —Å–µ—Ç–∏
        networks = {
            "1": "Mainnet (–†–ï–ê–õ–¨–ù–´–ï –î–ï–ù–¨–ì–ò)",
            "2": "Devnet (–¢–ï–°–¢–û–í–ê–Ø –°–ï–¢–¨)"
        }

        network_choice = self.choose_option(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å Solana:",
            networks,
            "2"
        )

        if network_choice == "1":
            self.config['SOLANA_RPC_URL'] = 'https://api.mainnet-beta.solana.com'
            print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í—ã –≤—ã–±—Ä–∞–ª–∏ mainnet —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–µ–Ω—å–≥–∞–º–∏!")
        else:
            self.config['SOLANA_RPC_URL'] = 'https://api.devnet.solana.com'
            print("‚úÖ Devnet –≤—ã–±—Ä–∞–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

        # –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏–ª–∏ seed phrase
        key_methods = {
            "1": "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á (base58)",
            "2": "Seed phrase (12/24 —Å–ª–æ–≤–∞)"
        }

        key_method = self.choose_option(
            "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∫–ª—é—á –∫–æ—à–µ–ª—å–∫–∞:",
            key_methods,
            "1"
        )

        if key_method == "1":
            private_key = self.ask_input(
                "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á (base58 –∏–∑ Phantom)",
                required=True,
                secret=True
            )
            self.config['SOLANA_PRIVATE_KEY'] = private_key
        else:
            seed_phrase = self.ask_input(
                "–í–≤–µ–¥–∏—Ç–µ seed phrase (12-24 —Å–ª–æ–≤–∞)",
                required=True,
                secret=True
            )
            self.config['SOLANA_SEED_PHRASE'] = seed_phrase

        print("‚úÖ Solana –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

    def configure_trading(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        print("\nüí∞ –ù–ê–°–¢–†–û–ô–ö–ê –¢–û–†–ì–û–í–õ–ò")
        print("-" * 20)

        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        strategies = {
            "1": "–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è (–Ω–æ–≤–∏—á–∫–∏) - 0.05 SOL x 1",
            "2": "–£–º–µ—Ä–µ–Ω–Ω–∞—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è) - 0.1 SOL x 3",
            "3": "–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è (–æ–ø—ã—Ç–Ω—ã–µ) - 0.2 SOL x 5",
            "4": "–ö–∞—Å—Ç–æ–º–Ω–∞—è (–Ω–∞—Å—Ç—Ä–æ—é —Å–∞–º)"
        }

        strategy = self.choose_option(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ç–æ—Ä–≥–æ–≤–ª–∏:",
            strategies,
            "2"
        )

        if strategy == "1":
            self.config['TRADE_AMOUNT_SOL'] = '0.05'
            self.config['NUM_PURCHASES'] = '1'
            self.config['SLIPPAGE_BPS'] = '1000'
        elif strategy == "2":
            self.config['TRADE_AMOUNT_SOL'] = '0.1'
            self.config['NUM_PURCHASES'] = '3'
            self.config['SLIPPAGE_BPS'] = '500'
        elif strategy == "3":
            self.config['TRADE_AMOUNT_SOL'] = '0.2'
            self.config['NUM_PURCHASES'] = '5'
            self.config['SLIPPAGE_BPS'] = '500'
        else:
            # –ö–∞—Å—Ç–æ–º–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
            self.config['TRADE_AMOUNT_SOL'] = self.ask_input(
                "–†–∞–∑–º–µ—Ä –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–∏ (SOL)", "0.1"
            )
            self.config['NUM_PURCHASES'] = self.ask_input(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫", "3"
            )
            self.config['SLIPPAGE_BPS'] = self.ask_input(
                "–ü—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ (BPS, 500 = 5%)", "500"
            )

        print(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {self.config['NUM_PURCHASES']} x {self.config['TRADE_AMOUNT_SOL']} SOL")

    def configure_telegram(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram"""
        print("\nüì± –ù–ê–°–¢–†–û–ô–ö–ê TELEGRAM –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
        print("-" * 35)

        # –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞
        if self.ask_yes_no("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Telegram User Bot (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)?", True):
            self.config['USE_TELEGRAM_USER_BOT'] = 'true'

            print("\nüìã –î–ª—è User Bot –Ω—É–∂–Ω—ã API –∫–ª—é—á–∏ —Å https://my.telegram.org/apps")
            print("1. –ò–¥–∏—Ç–µ –Ω–∞ https://my.telegram.org/apps")
            print("2. –í–æ–π–¥–∏—Ç–µ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
            print("3. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
            print("4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ API ID –∏ API Hash")
            print()

            api_id = self.ask_input("API ID", required=True)
            api_hash = self.ask_input("API Hash", required=True)
            phone = self.ask_input("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+1234567890)", required=True)

            self.config['TELEGRAM_API_ID'] = api_id
            self.config['TELEGRAM_API_HASH'] = api_hash
            self.config['TELEGRAM_PHONE_NUMBER'] = phone

            # –ö–∞–Ω–∞–ª—ã –∏ –≥—Ä—É–ø–ø—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            print("\nüì∫ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:")
            channel1 = self.ask_input("–ö–∞–Ω–∞–ª 1 (@username –∏–ª–∏ —Å—Å—ã–ª–∫–∞)", "@example_channel")
            if channel1:
                self.config['USER_BOT_CHANNEL_1'] = channel1

            channel2 = self.ask_input("–ö–∞–Ω–∞–ª 2 (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
            if channel2:
                self.config['USER_BOT_CHANNEL_2'] = channel2

            print("\nüë• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä—É–ø–ø –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:")
            group1 = self.ask_input("–ì—Ä—É–ø–ø–∞ 1 (@username –∏–ª–∏ ID)")
            if group1:
                self.config['USER_BOT_GROUP_1'] = group1

            print("\nüëë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–º–∏–Ω–æ–≤ (–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è):")
            admin1 = self.ask_input("–ê–¥–º–∏–Ω 1 (username –±–µ–∑ @)", required=True)
            self.config['USER_BOT_ADMIN_1'] = admin1

            admin2 = self.ask_input("–ê–¥–º–∏–Ω 2 (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
            if admin2:
                self.config['USER_BOT_ADMIN_2'] = admin2

        else:
            self.config['USE_TELEGRAM_USER_BOT'] = 'false'

        # Bot API –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤
        if self.ask_yes_no("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å Telegram Bot API –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤?", False):
            self.config['USE_TELEGRAM_BOT_API'] = 'true'

            print("\nü§ñ –î–ª—è Bot API –Ω—É–∂–µ–Ω —Ç–æ–∫–µ–Ω –æ—Ç @BotFather")
            bot_token = self.ask_input("Bot Token", required=True)
            self.config['TELEGRAM_BOT_TOKEN'] = bot_token
        else:
            self.config['USE_TELEGRAM_BOT_API'] = 'false'

        print("‚úÖ Telegram –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

    def configure_additional(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        print("\nüîß –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò")
        print("-" * 25)

        # Twitter
        if self.ask_yes_no("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Twitter?", False):
            print("üìã –ù—É–∂–µ–Ω Bearer Token —Å https://developer.twitter.com")
            twitter_token = self.ask_input("Twitter Bearer Token")
            if twitter_token:
                self.config['TWITTER_BEARER_TOKEN'] = twitter_token

                username1 = self.ask_input("Twitter –∞–∫–∫–∞—É–Ω—Ç 1 (–±–µ–∑ @)")
                if username1:
                    self.config['TWITTER_USERNAME_1'] = username1

        # Website –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        if self.ask_yes_no("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–µ–±-—Å–∞–π—Ç–æ–≤?", False):
            website1 = self.ask_input("URL —Å–∞–π—Ç–∞ 1")
            if website1:
                self.config['WEBSITE_URL_1'] = website1

        # AI –∞–Ω–∞–ª–∏–∑
        if self.ask_yes_no("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å AI –∞–Ω–∞–ª–∏–∑ (OpenAI)?", False):
            print("üìã –ù—É–∂–µ–Ω API –∫–ª—é—á —Å https://platform.openai.com/api-keys")
            openai_key = self.ask_input("OpenAI API Key")
            if openai_key:
                self.config['OPENAI_API_KEY'] = openai_key

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        print("\nüõ°Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:")
        self.config['MIN_LIQUIDITY'] = self.ask_input(
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å (SOL)", "5"
        )
        self.config['MAX_PRICE_IMPACT'] = self.ask_input(
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ (%)", "15.0"
        )

        print("‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")

    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ .env"""
        print("\nüíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
        print("-" * 25)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω
        if not Path('.env.example').exists():
            print("‚ùå –§–∞–π–ª .env.example –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False

        with open('.env.example', 'r', encoding='utf-8') as f:
            content = f.read()

        # –ó–∞–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        for key, value in self.config.items():
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫–ª—é—á–æ–º
            lines = content.split('\n')
            for i, line in enumerate(lines):
                if line.startswith(f'{key}=') or line.startswith(f'#{key}='):
                    lines[i] = f'{key}={value}'
                    break

            content = '\n'.join(lines)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        try:
            with open('.env', 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {self.env_file_path}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False

    def show_summary(self):
        """–ü–æ–∫–∞–∑ –∏—Ç–æ–≥–æ–≤"""
        print("\nüìä –ò–¢–û–ì–ò –ù–ê–°–¢–†–û–ô–ö–ò")
        print("=" * 20)

        print(f"‚õìÔ∏è –°–µ—Ç—å: {'Mainnet' if 'mainnet' in self.config.get('SOLANA_RPC_URL', '') else 'Devnet'}")
        print(f"üí∞ –¢–æ—Ä–≥–æ–≤–ª—è: {self.config.get('NUM_PURCHASES', '?')} x {self.config.get('TRADE_AMOUNT_SOL', '?')} SOL")

        telegram_method = "User Bot" if self.config.get('USE_TELEGRAM_USER_BOT') == 'true' else "Bot API"
        print(f"üì± Telegram: {telegram_method}")

        if self.config.get('TWITTER_BEARER_TOKEN'):
            print("üê¶ Twitter: –í–∫–ª—é—á–µ–Ω")

        if self.config.get('OPENAI_API_KEY'):
            print("üß† AI –∞–Ω–∞–ª–∏–∑: –í–∫–ª—é—á–µ–Ω")

        print("\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("1. python test_telegram_user.py - —Ç–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        print("2. python test_sniper.py - —Ç–µ—Å—Ç –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã")
        print("3. python main.py - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞")

        print("\n‚ö†Ô∏è –í–ê–ñ–ù–û:")
        print("- –ù–∞—á–Ω–∏—Ç–µ —Å devnet –¥–ª—è —Ç–µ—Å—Ç–æ–≤")
        print("- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞–ª—ã–µ —Å—É–º–º—ã")
        print("- –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ª–æ–≥–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        self.print_header()

        try:
            # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.configure_solana()
            self.configure_trading()
            self.configure_telegram()
            self.configure_additional()

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            if self.save_config():
                self.show_summary()
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
                return False

        except KeyboardInterrupt:
            print("\n‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return False
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
            return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    wizard = ConfigWizard()

    if wizard.env_file_path.exists():
        print("‚ö†Ô∏è –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        if not input("–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? [y/N]: ").lower().startswith('y'):
            print("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return

    success = wizard.run()
    if success:
        print("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        sys.exit(1)


if __name__ == "__main__":
    main()