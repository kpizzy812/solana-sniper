#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç Telegram User Bot
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É User Bot –ø–µ—Ä–µ–¥ –æ—Å–Ω–æ–≤–Ω—ã–º –∑–∞–ø—É—Å–∫–æ–º
"""

import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PATH
sys.path.append(str(Path(__file__).parent))

from loguru import logger
from config.settings import settings

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telethon
try:
    from telethon import TelegramClient
    from monitors.telegram_user import telegram_user_monitor, TELETHON_AVAILABLE

    IMPORTS_OK = True
except ImportError as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    IMPORTS_OK = False


class TelegramUserBotTester:
    """–¢–µ—Å—Ç–µ—Ä Telegram User Bot"""

    def __init__(self):
        self.test_results = {}

    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram User Bot")
        logger.info("=" * 50)

        # –¢–µ—Å—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
        await self.test_dependencies()

        # –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        await self.test_configuration()

        # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if self.test_results.get('dependencies', False) and self.test_results.get('configuration', False):
            await self.test_connection()

        # –¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if self.test_results.get('connection', False):
            await self.test_monitoring()

        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.print_summary()

    async def test_dependencies(self):
        """–¢–µ—Å—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        logger.info("üì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")

        try:
            if not IMPORTS_OK:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
                logger.info("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install telethon")
                self.test_results['dependencies'] = False
                return

            if not TELETHON_AVAILABLE:
                logger.error("‚ùå Telethon –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                self.test_results['dependencies'] = False
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Telethon
            import telethon
            logger.info(f"‚úÖ Telethon –≤–µ—Ä—Å–∏—è: {telethon.__version__}")

            self.test_results['dependencies'] = True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
            self.test_results['dependencies'] = False

    async def test_configuration(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        logger.info("‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")

        try:
            errors = []

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if not settings.monitoring.telegram_api_id:
                errors.append("TELEGRAM_API_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

            if not settings.monitoring.telegram_api_hash:
                errors.append("TELEGRAM_API_HASH –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

            if not settings.monitoring.telegram_phone_number:
                errors.append("TELEGRAM_PHONE_NUMBER –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª—ã/–≥—Ä—É–ø–ø—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            channels = [ch for ch in settings.monitoring.user_bot_channels if ch]
            groups = [gr for gr in settings.monitoring.user_bot_groups if gr]

            if not channels and not groups:
                errors.append("–ù—É–∂–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")

            if errors:
                logger.error(f"‚ùå –û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
                for error in errors:
                    logger.error(f"  - {error}")
                self.test_results['configuration'] = False
            else:
                logger.success("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                logger.info(f"üì∫ –ö–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {len(channels)}")
                logger.info(f"üë• –ì—Ä—É–ø–ø –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {len(groups)}")
                self.test_results['configuration'] = True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            self.test_results['configuration'] = False

    async def test_connection(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram"""
        logger.info("üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")

        try:
            if not telegram_user_monitor:
                logger.error("‚ùå User Bot –º–æ–Ω–∏—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                self.test_results['connection'] = False
                return

            # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            logger.info("üì± –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
            success = await telegram_user_monitor.start()

            if success:
                logger.success("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
                health = await telegram_user_monitor.health_check()
                logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{health.get('username', 'Unknown')}")
                logger.info(f"üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–º—ã—Ö —á–∞—Ç–æ–≤: {health.get('monitored_chats', 0)}")

                self.test_results['connection'] = True

                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–æ–≤
                await telegram_user_monitor.stop()

            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
                self.test_results['connection'] = False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            logger.info("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            logger.info("  - –ù–µ–≤–µ—Ä–Ω—ã–µ API_ID/API_HASH")
            logger.info("  - –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
            logger.info("  - –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
            logger.info("  - –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
            self.test_results['connection'] = False

    async def test_monitoring(self):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("üëÅÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")

        try:
            if not telegram_user_monitor:
                self.test_results['monitoring'] = False
                return

            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
            success = await telegram_user_monitor.start()

            if success:
                logger.info("‚è±Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω (—Ç–µ—Å—Ç 5 —Å–µ–∫—É–Ω–¥)...")

                # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                await asyncio.sleep(5)

                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats = telegram_user_monitor.get_stats()
                logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 5 —Å–µ–∫—É–Ω–¥:")
                logger.info(f"  - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats.get('messages_processed', 0)}")
                logger.info(f"  - –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: {stats.get('contracts_found', 0)}")
                logger.info(f"  - –û—à–∏–±–æ–∫: {stats.get('errors', 0)}")

                self.test_results['monitoring'] = True

                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
                await telegram_user_monitor.stop()

            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
                self.test_results['monitoring'] = False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            self.test_results['monitoring'] = False

    def print_summary(self):
        """–ü–µ—á–∞—Ç—å –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        logger.info("\n" + "=" * 50)
        logger.info("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø TELEGRAM USER BOT")
        logger.info("=" * 50)

        total_tests = 0
        passed_tests = 0

        for test_name, result in self.test_results.items():
            if result is None:
                status = "‚è≠Ô∏è –ü–†–û–ü–£–©–ï–ù"
            elif result:
                status = "‚úÖ –ü–†–û–ô–î–ï–ù"
                passed_tests += 1
                total_tests += 1
            else:
                status = "‚ùå –ü–†–û–í–ê–õ–ï–ù"
                total_tests += 1

            logger.info(f"{test_name.replace('_', ' ').title():<20} {status}")

        logger.info("=" * 50)

        if total_tests == 0:
            logger.warning("‚ö†Ô∏è –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã")
        elif passed_tests == total_tests:
            logger.success(f"üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ ({passed_tests}/{total_tests})")
            logger.success("üöÄ Telegram User Bot –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            logger.info("")
            logger.info("üî• –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞:")
            logger.info("  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º/–≥—Ä—É–ø–ø–∞–º")
            logger.info("  2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö")
            logger.info("  3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω—ã–π –±–æ—Ç: python main.py")
        else:
            logger.warning(f"‚ö†Ô∏è –¢–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —á–∞—Å—Ç–∏—á–Ω–æ ({passed_tests}/{total_tests})")
            logger.info("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")

        logger.info("\nüí° –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ User Bot –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å:")
        logger.info("  - –í–≤–æ–¥ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ SMS")
        logger.info("  - –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        logger.info("  - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Ö–æ–¥–∞ —Å –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –¢–µ—Å—Ç Telegram User Bot –¥–ª—è MORI Sniper")
    print("=" * 50)

    tester = TelegramUserBotTester()
    await tester.run_all_tests()


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    asyncio.run(main())