import asyncio
import time
from typing import Dict, List, Optional, Set
from dataclasses import dataclass
from datetime import datetime, timedelta

# Python Telegram Bot –∏–º–ø–æ—Ä—Ç—ã
try:
    from telegram import Bot, Update
    from telegram.ext import Application, MessageHandler, filters, CallbackContext
    from telegram.error import TelegramError, Forbidden, BadRequest

    TELEGRAM_BOT_AVAILABLE = True
except ImportError:
    TELEGRAM_BOT_AVAILABLE = False

from loguru import logger

from config.settings import settings, is_admin_message
from ai.analyzer import analyzer


@dataclass
class TelegramBotPost:
    """–î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Bot API"""
    message_id: int
    chat_id: int
    chat_title: str
    chat_username: str
    author_id: int
    author_username: str
    author_first_name: str
    content: str
    timestamp: datetime
    url: str
    message_type: str  # 'channel', 'group', 'private'
    is_admin: bool = False


class TelegramBotAPIMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Telegram —á–µ—Ä–µ–∑ Bot API (—Ä–µ–∑–µ—Ä–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)"""

    def __init__(self, trading_callback=None):
        self.trading_callback = trading_callback
        self.application: Optional[Application] = None
        self.bot: Optional[Bot] = None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        if not TELEGRAM_BOT_AVAILABLE:
            logger.error("‚ùå python-telegram-bot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-telegram-bot")
            return

        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.processed_messages: Set[str] = set()  # chat_id:message_id
        self.last_message_time = {}  # chat_id -> timestamp

        # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        self.running = False
        self.polling_task_handle = None  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è polling –∑–∞–¥–∞—á–∏

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'messages_processed': 0,
            'contracts_found': 0,
            'channels_monitored': 0,
            'groups_monitored': 0,
            'errors': 0
        }

    async def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Telegram Bot API"""
        if not TELEGRAM_BOT_AVAILABLE:
            logger.error("‚ùå Telegram Bot API –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return False

        if not settings.monitoring.telegram_bot_token:
            logger.warning("‚ö†Ô∏è Telegram Bot Token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False

        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bot API
            logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Bot API...")

            self.application = Application.builder().token(settings.monitoring.telegram_bot_token).build()
            self.bot = self.application.bot

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
            bot_info = await self.bot.get_me()
            logger.info(f"‚úÖ Bot –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username}")

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self.setup_handlers()

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            await self.application.initialize()
            await self.application.start()

            # –ù–∞—á–∏–Ω–∞–µ–º polling –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            self.running = True
            self.polling_task_handle = asyncio.create_task(self.polling_task())

            logger.success("‚úÖ Telegram Bot API –∑–∞–ø—É—â–µ–Ω")
            logger.warning("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: Bot API –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≥–¥–µ –±–æ—Ç —É–ø–æ–º—è–Ω—É—Ç –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—ã")

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram Bot API: {e}")
            return False

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∞"""
        self.running = False

        # –û—Ç–º–µ–Ω—è–µ–º polling –∑–∞–¥–∞—á—É
        if self.polling_task_handle and not self.polling_task_handle.done():
            logger.debug("–û—Ç–º–µ–Ω—è–µ–º polling –∑–∞–¥–∞—á—É...")
            self.polling_task_handle.cancel()
            try:
                await self.polling_task_handle
            except asyncio.CancelledError:
                logger.debug("Polling –∑–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

        if self.application:
            try:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º updater –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
                if (hasattr(self.application, 'updater') and
                        self.application.updater and
                        hasattr(self.application.updater, 'running') and
                        self.application.updater.running):
                    logger.debug("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram updater...")
                    await self.application.updater.stop()

                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                logger.debug("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram application...")
                await self.application.stop()
                await self.application.shutdown()

            except RuntimeError as e:
                if "not running" in str(e).lower():
                    logger.debug(f"Updater —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
                else:
                    logger.warning(f"RuntimeError –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Telegram Bot API: {e}")

        logger.info("üõë Telegram Bot API –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""

        async def message_handler(update: Update, context: CallbackContext):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
            try:
                if update.message:
                    await self.process_message(update.message)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                self.stats['errors'] += 1

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT, message_handler))

    async def polling_task(self):
        """–ó–∞–¥–∞—á–∞ polling –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            await self.application.updater.start_polling()

            while self.running:
                await asyncio.sleep(1)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ polling: {e}")
        finally:
            # –ù–ï –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º updater –∑–¥–µ—Å—å - —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç –º–µ—Ç–æ–¥ stop()
            logger.debug("Polling –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    async def process_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
            message_key = f"{message.chat_id}:{message.message_id}"
            if message_key in self.processed_messages:
                return

            # Rate limiting
            now = time.time()
            last_time = self.last_message_time.get(message.chat_id, 0)
            if now - last_time < 1.0:  # –ù–µ —á–∞—â–µ 1 —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥—É –Ω–∞ —á–∞—Ç
                return
            self.last_message_time[message.chat_id] = now

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            chat = message.chat
            user = message.from_user

            if not user:
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
            post = TelegramBotPost(
                message_id=message.message_id,
                chat_id=message.chat_id,
                chat_title=chat.title or 'Private',
                chat_username=chat.username or '',
                author_id=user.id,
                author_username=user.username or '',
                author_first_name=user.first_name or '',
                content=message.text or '',
                timestamp=message.date,
                url=f"https://t.me/{chat.username}/{message.message_id}" if chat.username else f"https://t.me/c/{abs(message.chat_id)}/{message.message_id}",
                message_type='channel' if chat.type == 'channel' else 'group' if chat.type in ['group',
                                                                                               'supergroup'] else 'private',
                is_admin=is_admin_message(user.username, user.id)
            )

            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            logger.debug(f"üí¨ Bot API —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {post.chat_title}: @{post.author_username} - {post.content[:50]}...")

            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∞–¥–º–∏–Ω–∞–º –≤ –≥—Ä—É–ø–ø–∞—Ö
            if post.message_type == 'group' and not post.is_admin:
                logger.debug(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–µ-–∞–¥–º–∏–Ω–∞ @{post.author_username}")
                return

            # –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
            analysis_result = await analyzer.analyze_post(
                content=post.content,
                platform="telegram_bot",
                author=post.author_username,
                url=post.url
            )

            logger.info(f"ü§ñ Telegram Bot @{post.author_username} –≤ {post.chat_title}: "
                        f"–∫–æ–Ω—Ç—Ä–∞–∫—Ç={analysis_result.has_contract}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å={analysis_result.confidence:.2f}")

            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Å –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
            if analysis_result.has_contract and analysis_result.confidence > 0.6:
                logger.critical(f"üö® –ö–û–ù–¢–†–ê–ö–¢ –í TELEGRAM BOT API!")
                logger.critical(f"üìç –ê–≤—Ç–æ—Ä: @{post.author_username} –≤ {post.chat_title}")
                logger.critical(f"üéØ –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã: {analysis_result.addresses}")

                if self.trading_callback:
                    await self.trigger_trading(analysis_result, post)

                self.stats['contracts_found'] += 1

            # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
            self.processed_messages.add(message_key)
            self.stats['messages_processed'] += 1

            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ø–∞–º—è—Ç–∏
            if len(self.processed_messages) > 1000:
                old_messages = list(self.processed_messages)[:200]
                for old_msg in old_messages:
                    self.processed_messages.discard(old_msg)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è Bot API: {e}")
            self.stats['errors'] += 1

    async def trigger_trading(self, analysis_result, post: TelegramBotPost):
        """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            trading_data = {
                'platform': 'telegram_bot',
                'source': f"{post.chat_title} (@{post.chat_username})",
                'author': post.author_username,
                'author_id': post.author_id,
                'chat_id': post.chat_id,
                'message_id': post.message_id,
                'url': post.url,
                'contracts': analysis_result.addresses,
                'confidence': analysis_result.confidence,
                'urgency': analysis_result.urgency,
                'timestamp': post.timestamp,
                'content_preview': post.content[:200],
                'message_type': post.message_type,
                'is_admin': post.is_admin
            }

            # –í—ã–∑—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Ç–æ—Ä–≥–æ–≤–ª–∏
            await self.trading_callback(trading_data)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}")

    async def health_check(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –º–æ–Ω–∏—Ç–æ—Ä–∞"""
        try:
            if not TELEGRAM_BOT_AVAILABLE:
                return {"status": "error", "message": "python-telegram-bot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}

            if not self.bot:
                return {"status": "error", "message": "Bot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
            try:
                bot_info = await self.bot.get_me()
                bot_username = bot_info.username
                bot_accessible = True
            except Exception as e:
                bot_username = "Unknown"
                bot_accessible = False

            return {
                "status": "healthy" if bot_accessible else "error",
                "bot_accessible": bot_accessible,
                "bot_username": bot_username,
                "running": self.running,
                "stats": self.stats,
                "limitation": "Bot API –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≥–¥–µ –±–æ—Ç —É–ø–æ–º—è–Ω—É—Ç"
            }

        except Exception as e:
            return {"status": "error", "message": str(e)}

    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        return {
            **self.stats,
            "processed_messages_cache": len(self.processed_messages),
            "running": self.running,
            "api_type": "bot_api"
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Bot API –º–æ–Ω–∏—Ç–æ—Ä–∞
telegram_monitor = TelegramBotAPIMonitor() if TELEGRAM_BOT_AVAILABLE else None