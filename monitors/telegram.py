import asyncio
import time
from typing import Dict, List, Optional, Set
from dataclasses import dataclass
from datetime import datetime, timedelta

from telegram import Bot, Update
from telegram.ext import Application, MessageHandler, filters
from loguru import logger
import aiohttp

from config.settings import settings
from ai.analyzer import analyzer


@dataclass
class TelegramPost:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞ Telegram"""
    message_id: int
    chat_id: int
    chat_username: str
    content: str
    author: str
    timestamp: datetime
    url: str
    is_edit: bool = False
    media_urls: List[str] = None
    is_admin: bool = False
    thread_id: Optional[int] = None


class HighSpeedTelegramMonitor:
    """–£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Telegram —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 1 —Å–µ–∫—É–Ω–¥–∞"""

    def __init__(self, trading_callback=None):
        self.bot: Optional[Bot] = None
        self.app: Optional[Application] = None
        self.trading_callback = trading_callback

        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
        self.monitored_chats: Set[str] = set()
        self.last_message_ids: Dict[int, int] = {}  # chat_id -> last_message_id
        self.processed_messages: Set[str] = set()  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è

        # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        self.running = False
        self.last_check_time = 0
        self.check_interval = settings.monitoring.telegram_interval

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'messages_processed': 0,
            'contracts_found': 0,
            'admin_messages': 0,
            'regular_messages': 0,
            'errors': 0,
            'avg_processing_time': 0
        }

    async def start(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Telegram"""
        if not settings.monitoring.telegram_bot_token:
            logger.warning("‚ö†Ô∏è Telegram bot token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False

        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
            self.bot = Bot(token=settings.monitoring.telegram_bot_token)
            self.app = Application.builder().token(settings.monitoring.telegram_bot_token).build()

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            self.setup_handlers()

            # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            await self.app.initialize()
            await self.app.start()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞
            me = await self.bot.get_me()
            logger.info(f"üì± Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{me.username}")

            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–Ω–∞–ª–∞–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            await self.setup_monitoring_channels()

            # –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            self.running = True
            asyncio.create_task(self.monitoring_loop())

            logger.success("‚úÖ –í—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–π Telegram –º–æ–Ω–∏—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –º–æ–Ω–∏—Ç–æ—Ä–∞: {e}")
            return False

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∞"""
        self.running = False
        if self.app:
            await self.app.stop()
            await self.app.shutdown()
        logger.info("üõë Telegram –º–æ–Ω–∏—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–∞–Ω–∞–ª—ã –∏ –≥—Ä—É–ø–ø—ã)
        self.app.add_handler(MessageHandler(
            filters.ALL,
            self.handle_message
        ))

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.app.add_handler(MessageHandler(
            filters.ALL,
            self.handle_edited_message
        ))

    async def setup_monitoring_channels(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
        for channel in settings.monitoring.telegram_channels:
            if not channel:
                continue
            try:
                if channel.startswith('@'):
                    chat = await self.bot.get_chat(channel)
                    self.monitored_chats.add(channel)
                    logger.info(f"üì∫ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Telegram –∫–∞–Ω–∞–ª–∞: {channel}")
                else:
                    # –ü—Ä–æ–±—É–µ–º –∫–∞–∫ chat ID
                    chat_id = int(channel)
                    chat = await self.bot.get_chat(chat_id)
                    self.monitored_chats.add(str(chat_id))
                    logger.info(f"üì∫ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Telegram —á–∞—Ç–∞: {chat_id}")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ {channel}: {e}")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä—É–ø–ø (–≤–∫–ª—é—á–∞—è —Ç–æ–ø–∏–∫–∏)
        for group in settings.monitoring.telegram_groups:
            if not group:
                continue
            try:
                if group.startswith('@'):
                    chat = await self.bot.get_chat(group)
                    self.monitored_chats.add(group)
                    logger.info(f"üë• –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Telegram –≥—Ä—É–ø–ø—ã: {group}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ç–æ–ø–∏–∫–æ–≤
                    if hasattr(chat, 'is_forum') and chat.is_forum:
                        logger.info(f"üìç –ì—Ä—É–ø–ø–∞ {group} –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ø–∏–∫–∏")
                else:
                    # –ü—Ä–æ–±—É–µ–º –∫–∞–∫ chat ID
                    chat_id = int(group)
                    chat = await self.bot.get_chat(chat_id)
                    self.monitored_chats.add(str(chat_id))
                    logger.info(f"üë• –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Telegram –≥—Ä—É–ø–ø—ã: {chat_id}")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥—Ä—É–ø–ø—ã {group}: {e}")

        logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è {len(self.monitored_chats)} —á–∞—Ç–æ–≤")

    async def monitoring_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É"""
        logger.info("üîç –ó–∞–ø—É—Å–∫ –≤—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª 1 —Å–µ–∫—É–Ω–¥–∞)")

        while self.running:
            try:
                start_time = time.time()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —á–∞—Ç–∞—Ö
                await self.check_new_messages()

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Ä–µ–º–µ–Ω–∏
                processing_time = time.time() - start_time
                self.stats['avg_processing_time'] = (
                        self.stats['avg_processing_time'] * 0.9 + processing_time * 0.1
                )

                # –ñ–¥–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤ 1 —Å–µ–∫—É–Ω–¥—É
                sleep_time = max(0, self.check_interval - processing_time)
                if sleep_time > 0:
                    await asyncio.sleep(sleep_time)
                else:
                    logger.warning(f"‚ö†Ô∏è –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –≤—Ä–µ–º—è: {processing_time:.3f}s")

            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                self.stats['errors'] += 1
                await asyncio.sleep(1)  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–∞ –æ—à–∏–±–æ–∫

    async def check_new_messages(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ –≤—Å–µ—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —á–∞—Ç–∞—Ö"""
        tasks = []

        for channel in self.monitored_chats:
            task = asyncio.create_task(self.check_channel_messages(channel))
            tasks.append(task)

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
        if tasks:
            await asyncio.gather(*tasks, return_exceptions=True)

    async def check_channel_messages(self, channel: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∫–∞–Ω–∞–ª–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
            updates = await self.bot.get_updates(
                offset=-1,  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                limit=100,
                timeout=1
            )

            for update in updates:
                if update.message or update.edited_message:
                    message = update.message or update.edited_message

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–º—É —á–∞—Ç—É
                    if self.is_monitored_chat(message.chat):
                        await self.process_message(message, update.edited_message is not None)

        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel}: {e}")

    def is_monitored_chat(self, chat) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —á–∞—Ç"""
        chat_identifier = f"@{chat.username}" if chat.username else str(chat.id)
        return chat_identifier in self.monitored_chats

    async def handle_message(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if update.message:
            await self.process_message(update.message, is_edit=False)

    async def handle_edited_message(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if update.edited_message:
            await self.process_message(update.edited_message, is_edit=True)

    async def process_message(self, message, is_edit: bool = False):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é"""
        try:
            start_time = time.time()

            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
            message_key = f"{message.chat.id}:{message.message_id}:{is_edit}"

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
            if message_key in self.processed_messages:
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø)
            is_admin_msg = False
            if message.chat.type in ['group', 'supergroup']:
                is_admin_msg = await self.check_if_admin_message(message)
                if not is_admin_msg:
                    logger.debug(f"üì± –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç –∞–¥–º–∏–Ω–∞ –≤ {message.chat.title or message.chat.id}")
                    self.stats['regular_messages'] += 1
                    return
                else:
                    self.stats['admin_messages'] += 1

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ø–∏–∫–∏ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è)
            thread_id = None
            if hasattr(message, 'message_thread_id') and message.message_thread_id:
                thread_id = message.message_thread_id
                logger.info(f"üìç –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ–ø–∏–∫–µ {thread_id}")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
            post = await self.extract_post_data(message, is_edit, is_admin_msg, thread_id)

            # –£–õ–¨–¢–†–ê-–ë–´–°–¢–†–´–ô –ê–ù–ê–õ–ò–ó
            analysis_result = await analyzer.analyze_post(
                content=post.content,
                platform="telegram",
                author=post.author,
                url=post.url
            )

            processing_time = (time.time() - start_time) * 1000

            logger.info(f"üì± –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞ {processing_time:.1f}ms | "
                        f"–ö–æ–Ω—Ç—Ä–∞–∫—Ç: {analysis_result.has_contract} | "
                        f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis_result.confidence:.2f} | "
                        f"–ê–¥–º–∏–Ω: {is_admin_msg}")

            # –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Å –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
            if analysis_result.has_contract and analysis_result.confidence > 0.6:
                logger.critical(f"üö® –ö–û–ù–¢–†–ê–ö–¢ –û–ë–ù–ê–†–£–ñ–ï–ù: {analysis_result.addresses}")

                if self.trading_callback:
                    # Fire and forget - –Ω–µ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
                    asyncio.create_task(self.trigger_trading(analysis_result, post))

                self.stats['contracts_found'] += 1

            # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
            self.processed_messages.add(message_key)
            self.stats['messages_processed'] += 1

            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏)
            if len(self.processed_messages) > 10000:
                # –£–¥–∞–ª—è–µ–º 1000 —Å–∞–º—ã—Ö —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
                old_messages = list(self.processed_messages)[:1000]
                for old_msg in old_messages:
                    self.processed_messages.discard(old_msg)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.stats['errors'] += 1

    async def check_if_admin_message(self, message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞"""
        try:
            # –î–ª—è –∫–∞–Ω–∞–ª–æ–≤ - –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—á–∏—Ç–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–º–∏
            if message.chat.type == 'channel':
                return True

            # –î–ª—è –≥—Ä—É–ø–ø - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            if message.from_user:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ username
                username = message.from_user.username
                if username:
                    from config.settings import is_admin_message
                    if is_admin_message(username, message.from_user.id):
                        return True

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —á–∞—Ç–µ
                try:
                    member = await self.bot.get_chat_member(message.chat.id, message.from_user.id)
                    if member.status in ['creator', 'administrator']:
                        logger.info(f"‚úÖ –ê–¥–º–∏–Ω —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{username or 'unknown'} ({member.status})")
                        return True
                except:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Å–ø–∏—Å–∫—É –∞–¥–º–∏–Ω–æ–≤
                    pass

            return False

        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞: {e}")
            return False  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –∞–¥–º–∏–Ω

    async def extract_post_data(self, message, is_edit: bool, is_admin: bool, thread_id: Optional[int]) -> TelegramPost:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram"""
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        content = message.text or message.caption or ""

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ
        author = "Unknown"
        if message.from_user:
            author = message.from_user.username or f"{message.from_user.first_name}"
        elif message.sender_chat:
            author = message.sender_chat.title or "Channel"

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL —Å–æ–æ–±—â–µ–Ω–∏—è
        chat_username = message.chat.username
        url = ""
        if chat_username:
            url = f"https://t.me/{chat_username}/{message.message_id}"

        # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –º–µ–¥–∏–∞
        media_urls = []
        if message.photo:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Å–∞–º–æ–≥–æ –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            photo = max(message.photo, key=lambda p: p.file_size or 0)
            try:
                file = await self.bot.get_file(photo.file_id)
                media_urls.append(file.file_path)
            except:
                pass

        if message.document:
            try:
                file = await self.bot.get_file(message.document.file_id)
                media_urls.append(file.file_path)
            except:
                pass

        return TelegramPost(
            message_id=message.message_id,
            chat_id=message.chat.id,
            chat_username=chat_username or str(message.chat.id),
            content=content,
            author=author,
            timestamp=message.date,
            url=url,
            is_edit=is_edit,
            media_urls=media_urls,
            is_admin=is_admin,
            thread_id=thread_id
        )

    async def trigger_trading(self, analysis_result, post: TelegramPost):
        """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ"""
        try:
            trading_data = {
                'platform': 'telegram',
                'source': post.chat_username,
                'author': post.author,
                'url': post.url,
                'contracts': analysis_result.addresses,
                'confidence': analysis_result.confidence,
                'urgency': analysis_result.urgency,
                'timestamp': post.timestamp,
                'content_preview': post.content[:200],
                'is_admin': post.is_admin,
                'thread_id': post.thread_id
            }

            # –í—ã–∑—ã–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
            await self.trading_callback(trading_data)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞: {e}")

    async def health_check(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –º–æ–Ω–∏—Ç–æ—Ä–∞"""
        try:
            if not self.bot:
                return {"status": "error", "message": "–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞
            me = await self.bot.get_me()

            return {
                "status": "healthy",
                "bot_username": me.username,
                "monitored_channels": len(self.monitored_chats),
                "running": self.running,
                "stats": self.stats
            }

        except Exception as e:
            return {"status": "error", "message": str(e)}

    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        return {
            **self.stats,
            "monitored_channels": len(self.monitored_chats),
            "processed_messages_cache": len(self.processed_messages),
            "running": self.running,
            "check_interval": self.check_interval
        }


# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–æ–Ω–∏—Ç–æ—Ä–∞
telegram_monitor = HighSpeedTelegramMonitor()