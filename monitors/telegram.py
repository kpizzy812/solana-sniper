import asyncio
import time
from typing import Dict, List, Optional, Set
from dataclasses import dataclass
from datetime import datetime, timedelta

from telegram import Bot, Update
from telegram.ext import Application, MessageHandler, filters, CallbackContext
from loguru import logger

from config.settings import settings
from ai.analyzer import analyzer


@dataclass
class TelegramPost:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞ Telegram"""
    message_id: int
    chat_id: int
    chat_username: str
    content: str
    author: str
    timestamp: datetime
    url: str
    is_edit: bool = False
    media_urls: List[str] = None
    is_admin: bool = False
    thread_id: Optional[int] = None


class HighSpeedTelegramMonitor:
    """–ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Telegram"""

    def __init__(self, trading_callback=None):
        self.bot: Optional[Bot] = None
        self.app: Optional[Application] = None
        self.trading_callback = trading_callback

        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
        self.monitored_chats: Set[str] = set()
        self.processed_messages: Set[str] = set()

        # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        self.running = False

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'messages_processed': 0,
            'contracts_found': 0,
            'admin_messages': 0,
            'regular_messages': 0,
            'errors': 0,
            'avg_processing_time': 0
        }

    async def start(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Telegram"""
        if not settings.monitoring.telegram_bot_token:
            logger.warning("‚ö†Ô∏è Telegram bot token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False

        try:
            # –ü—Ä–æ—Å—Ç–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
            self.bot = Bot(token=settings.monitoring.telegram_bot_token)

            # –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            self.app = Application.builder().token(settings.monitoring.telegram_bot_token).build()

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            self.setup_handlers()

            # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            await self.app.initialize()
            await self.app.start()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞
            me = await self.bot.get_me()
            logger.info(f"üì± Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{me.username}")

            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–Ω–∞–ª–∞–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            await self.setup_monitoring_channels()

            # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            self.running = True
            asyncio.create_task(self.run_bot())

            logger.success("‚úÖ Telegram –º–æ–Ω–∏—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –º–æ–Ω–∏—Ç–æ—Ä–∞: {e}")
            return False

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∞"""
        self.running = False
        if self.app:
            try:
                await self.app.updater.stop()
                await self.app.stop()
                await self.app.shutdown()
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ app: {e}")
        logger.info("üõë Telegram –º–æ–Ω–∏—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        message_handler = MessageHandler(filters.ALL, self.handle_message)
        self.app.add_handler(message_handler)

    async def setup_monitoring_channels(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
        for channel in settings.monitoring.telegram_channels:
            if not channel:
                continue
            try:
                if channel.startswith('@'):
                    chat = await self.bot.get_chat(channel)
                    self.monitored_chats.add(channel)
                    logger.info(f"üì∫ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Telegram –∫–∞–Ω–∞–ª–∞: {channel}")
                else:
                    # –ü—Ä–æ–±—É–µ–º –∫–∞–∫ chat ID
                    chat_id = int(channel)
                    chat = await self.bot.get_chat(chat_id)
                    self.monitored_chats.add(str(chat_id))
                    logger.info(f"üì∫ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Telegram —á–∞—Ç–∞: {chat_id}")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ {channel}: {e}")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä—É–ø–ø
        for group in settings.monitoring.telegram_groups:
            if not group:
                continue
            try:
                if group.startswith('@'):
                    chat = await self.bot.get_chat(group)
                    self.monitored_chats.add(group)
                    logger.info(f"üë• –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Telegram –≥—Ä—É–ø–ø—ã: {group}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ç–æ–ø–∏–∫–æ–≤
                    if hasattr(chat, 'is_forum') and chat.is_forum:
                        logger.info(f"üìç –ì—Ä—É–ø–ø–∞ {group} –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ø–∏–∫–∏")
                else:
                    # –ü—Ä–æ–±—É–µ–º –∫–∞–∫ chat ID
                    chat_id = int(group)
                    chat = await self.bot.get_chat(chat_id)
                    self.monitored_chats.add(str(chat_id))
                    logger.info(f"üë• –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Telegram –≥—Ä—É–ø–ø—ã: {chat_id}")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥—Ä—É–ø–ø—ã {group}: {e}")

        logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è {len(self.monitored_chats)} —á–∞—Ç–æ–≤")

    async def run_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å polling"""
        logger.info("üîç –ó–∞–ø—É—Å–∫ Telegram polling...")

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            await self.app.updater.start_polling(
                poll_interval=2.0,  # –ö–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
                timeout=20,
                bootstrap_retries=-1
            )

            # –ñ–¥–µ–º –ø–æ–∫–∞ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
            while self.running:
                await asyncio.sleep(1)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ polling: {e}")
            # Fallback –Ω–∞ manual polling –µ—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            await self.manual_polling()
        finally:
            try:
                await self.app.updater.stop()
            except:
                pass

    async def manual_polling(self):
        """–†—É—á–Ω–æ–π polling –µ—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"""
        logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ä—É—á–Ω–æ–π polling...")

        last_update_id = 0

        while self.running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                updates = await self.bot.get_updates(
                    offset=last_update_id + 1,
                    timeout=10,
                    limit=100
                )

                for update in updates:
                    last_update_id = update.update_id

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                    if update.message:
                        await self.handle_message_direct(update.message, is_edit=False)
                    elif update.edited_message:
                        await self.handle_message_direct(update.edited_message, is_edit=True)

                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(1)

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ manual polling: {e}")
                await asyncio.sleep(5)

    def is_monitored_chat(self, chat) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —á–∞—Ç"""
        chat_identifier = f"@{chat.username}" if chat.username else str(chat.id)
        return chat_identifier in self.monitored_chats

    async def handle_message(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ handler"""
        if update.message and self.is_monitored_chat(update.message.chat):
            await self.handle_message_direct(update.message, is_edit=False)
        elif update.edited_message and self.is_monitored_chat(update.edited_message.chat):
            await self.handle_message_direct(update.edited_message, is_edit=True)

    async def handle_message_direct(self, message, is_edit: bool = False):
        """–ü—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            start_time = time.time()

            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
            message_key = f"{message.chat.id}:{message.message_id}:{is_edit}"

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
            if message_key in self.processed_messages:
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø)
            is_admin_msg = False
            if message.chat.type in ['group', 'supergroup']:
                is_admin_msg = await self.check_if_admin_message(message)
                if not is_admin_msg:
                    logger.debug(f"üì± –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç –∞–¥–º–∏–Ω–∞ –≤ {message.chat.title or message.chat.id}")
                    self.stats['regular_messages'] += 1
                    return
                else:
                    self.stats['admin_messages'] += 1

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ø–∏–∫–∏
            thread_id = None
            if hasattr(message, 'message_thread_id') and message.message_thread_id:
                thread_id = message.message_thread_id
                logger.info(f"üìç –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ–ø–∏–∫–µ {thread_id}")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
            post = await self.extract_post_data(message, is_edit, is_admin_msg, thread_id)

            # –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑
            analysis_result = await analyzer.analyze_post(
                content=post.content,
                platform="telegram",
                author=post.author,
                url=post.url
            )

            processing_time = (time.time() - start_time) * 1000

            logger.info(f"üì± Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ ({processing_time:.1f}ms): "
                        f"–∫–æ–Ω—Ç—Ä–∞–∫—Ç={analysis_result.has_contract} | "
                        f"—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å={analysis_result.confidence:.2f}")

            # –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Å –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
            if analysis_result.has_contract and analysis_result.confidence > 0.6:
                logger.critical(f"üö® –ö–û–ù–¢–†–ê–ö–¢ –û–ë–ù–ê–†–£–ñ–ï–ù: {analysis_result.addresses}")

                if self.trading_callback:
                    asyncio.create_task(self.trigger_trading(analysis_result, post))

                self.stats['contracts_found'] += 1

            # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
            self.processed_messages.add(message_key)
            self.stats['messages_processed'] += 1

            # –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
            if len(self.processed_messages) > 1000:
                old_messages = list(self.processed_messages)[:200]
                for old_msg in old_messages:
                    self.processed_messages.discard(old_msg)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.stats['errors'] += 1

    async def check_if_admin_message(self, message) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞"""
        try:
            # –î–ª—è –∫–∞–Ω–∞–ª–æ–≤ - –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—á–∏—Ç–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–º–∏
            if message.chat.type == 'channel':
                return True

            # –î–ª—è –≥—Ä—É–ø–ø - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            if message.from_user:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ username
                username = message.from_user.username
                if username:
                    from config.settings import is_admin_message
                    if is_admin_message(username, message.from_user.id):
                        return True

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —á–∞—Ç–µ (—Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫)
                try:
                    member = await self.bot.get_chat_member(message.chat.id, message.from_user.id)
                    if member.status in ['creator', 'administrator']:
                        logger.info(f"‚úÖ –ê–¥–º–∏–Ω —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{username or 'unknown'} ({member.status})")
                        return True
                except Exception as e:
                    logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ —á–∞—Ç–µ: {e}")

            return False

        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞: {e}")
            return False

    async def extract_post_data(self, message, is_edit: bool, is_admin: bool, thread_id: Optional[int]) -> TelegramPost:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram"""
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        content = message.text or message.caption or ""

        # –í–ê–ñ–ù–û: –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ entities (–≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏)
        full_content = content

        if message.entities:
            for entity in message.entities:
                if entity.type in ['url', 'text_link']:
                    if entity.type == 'url':
                        # –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ
                        url_text = content[entity.offset:entity.offset + entity.length]
                        full_content += f" {url_text}"
                        logger.debug(f"üìé –ù–∞–π–¥–µ–Ω–∞ URL –≤ —Ç–µ–∫—Å—Ç–µ: {url_text}")
                    elif entity.type == 'text_link':
                        # –ì–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º
                        url_text = entity.url
                        full_content += f" {url_text}"
                        logger.debug(f"üìé –ù–∞–π–¥–µ–Ω–∞ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞: {url_text}")

        # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º caption entities –¥–ª—è –º–µ–¥–∏–∞
        if message.caption_entities:
            for entity in message.caption_entities:
                if entity.type in ['url', 'text_link']:
                    if entity.type == 'url':
                        url_text = (message.caption or "")[entity.offset:entity.offset + entity.length]
                        full_content += f" {url_text}"
                        logger.debug(f"üìé –ù–∞–π–¥–µ–Ω–∞ URL –≤ caption: {url_text}")
                    elif entity.type == 'text_link':
                        url_text = entity.url
                        full_content += f" {url_text}"
                        logger.debug(f"üìé –ù–∞–π–¥–µ–Ω–∞ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞ –≤ caption: {url_text}")

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.debug(f"üìù –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {full_content}")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ
        author = "Unknown"
        if message.from_user:
            author = message.from_user.username or f"{message.from_user.first_name}"
        elif message.sender_chat:
            author = message.sender_chat.title or "Channel"

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL —Å–æ–æ–±—â–µ–Ω–∏—è
        chat_username = message.chat.username
        url = ""
        if chat_username:
            url = f"https://t.me/{chat_username}/{message.message_id}"

        # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –º–µ–¥–∏–∞ (—Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫)
        media_urls = []
        try:
            if message.photo:
                photo = max(message.photo, key=lambda p: p.file_size or 0)
                file = await self.bot.get_file(photo.file_id)
                media_urls.append(file.file_path)
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")

        try:
            if message.document:
                file = await self.bot.get_file(message.document.file_id)
                media_urls.append(file.file_path)
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")

        return TelegramPost(
            message_id=message.message_id,
            chat_id=message.chat.id,
            chat_username=chat_username or str(message.chat.id),
            content=full_content,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å URL
            author=author,
            timestamp=message.date,
            url=url,
            is_edit=is_edit,
            media_urls=media_urls,
            is_admin=is_admin,
            thread_id=thread_id
        )

    async def trigger_trading(self, analysis_result, post: TelegramPost):
        """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        try:
            trading_data = {
                'platform': 'telegram',
                'source': post.chat_username,
                'author': post.author,
                'url': post.url,
                'contracts': analysis_result.addresses,
                'confidence': analysis_result.confidence,
                'urgency': analysis_result.urgency,
                'timestamp': post.timestamp,
                'content_preview': post.content[:200],
                'is_admin': post.is_admin,
                'thread_id': post.thread_id
            }

            await self.trading_callback(trading_data)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞: {e}")

    async def health_check(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –º–æ–Ω–∏—Ç–æ—Ä–∞"""
        try:
            if not self.bot:
                return {"status": "error", "message": "–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}

            try:
                me = await asyncio.wait_for(self.bot.get_me(), timeout=5.0)
                bot_healthy = True
            except:
                bot_healthy = False

            return {
                "status": "healthy" if bot_healthy else "degraded",
                "bot_username": me.username if bot_healthy else "unknown",
                "monitored_channels": len(self.monitored_chats),
                "running": self.running,
                "stats": self.stats
            }

        except Exception as e:
            return {"status": "error", "message": str(e)}

    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        return {
            **self.stats,
            "monitored_channels": len(self.monitored_chats),
            "processed_messages_cache": len(self.processed_messages),
            "running": self.running
        }


# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–æ–Ω–∏—Ç–æ—Ä–∞
telegram_monitor = HighSpeedTelegramMonitor()