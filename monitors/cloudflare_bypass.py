"""
üõ°Ô∏è MORI Sniper Bot - Cloudflare Bypass
–°–∏—Å—Ç–µ–º–∞ –æ–±—Ö–æ–¥–∞ Cloudflare –∑–∞—â–∏—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∞–π—Ç–æ–≤
"""

import asyncio
import time
import random
from typing import Optional, Dict
from loguru import logger

try:
    import undetected_chromedriver as uc
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    UNDETECTED_AVAILABLE = True
    logger.debug("‚úÖ undetected-chromedriver –¥–æ—Å—Ç—É–ø–µ–Ω")
except ImportError:
    UNDETECTED_AVAILABLE = False
    logger.debug("‚ö†Ô∏è undetected-chromedriver –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è –æ–±—Ö–æ–¥–∞ Cloudflare
CLOUDSCRAPER_AVAILABLE = False
PLAYWRIGHT_AVAILABLE = False

try:
    import cloudscraper

    CLOUDSCRAPER_AVAILABLE = True
    logger.debug("‚úÖ cloudscraper –¥–æ—Å—Ç—É–ø–µ–Ω")
except ImportError:
    logger.debug("‚ö†Ô∏è cloudscraper –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

try:
    from playwright.async_api import async_playwright

    PLAYWRIGHT_AVAILABLE = True
    logger.debug("‚úÖ playwright –¥–æ—Å—Ç—É–ø–µ–Ω")
except ImportError:
    logger.debug("‚ö†Ô∏è playwright –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

import aiohttp
from bs4 import BeautifulSoup


class CloudflareBypass:
    """–°–∏—Å—Ç–µ–º–∞ –æ–±—Ö–æ–¥–∞ Cloudflare –∑–∞—â–∏—Ç—ã"""

    def __init__(self):
        self.scraper = None
        self.playwright = None
        self.browser = None
        self.method = "none"  # none, cloudscraper, playwright, basic

    async def start(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±—Ö–æ–¥–∞"""
        logger.info("üõ°Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Cloudflare bypass...")

        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: Playwright > CloudScraper > Basic
        if PLAYWRIGHT_AVAILABLE:
            try:
                await self._init_playwright()
                self.method = "playwright"
                logger.success("‚úÖ Cloudflare bypass: Playwright")
                return True
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Playwright –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å: {e}")

        if CLOUDSCRAPER_AVAILABLE:
            try:
                self._init_cloudscraper()
                self.method = "cloudscraper"
                logger.success("‚úÖ Cloudflare bypass: CloudScraper")
                return True
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è CloudScraper –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å: {e}")

        # Fallback –∫ –±–∞–∑–æ–≤—ã–º –º–µ—Ç–æ–¥–∞–º
        self.method = "basic"
        logger.warning("‚ö†Ô∏è Cloudflare bypass: Basic (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å)")
        return True

    async def _init_playwright(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Playwright"""
        self.playwright = await async_playwright().start()
        self.browser = await self.playwright.chromium.launch(
            headless=True,
            args=[
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--disable-accelerated-2d-canvas',
                '--disable-gpu',
                '--window-size=1920x1080'
            ]
        )

    def _init_cloudscraper(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CloudScraper"""
        self.scraper = cloudscraper.create_scraper(
            browser={
                'browser': 'chrome',
                'platform': 'windows',
                'desktop': True
            }
        )

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ö–æ–¥–∞"""
        if self.browser:
            await self.browser.close()
        if self.playwright:
            await self.playwright.stop()

    async def get_page_content(self, url: str, wait_for_changes: bool = False) -> Optional[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –æ–±—Ö–æ–¥–æ–º Cloudflare

        Args:
            url: URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            wait_for_changes: –ñ–¥–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)

        Returns:
            str: HTML –∫–æ–Ω—Ç–µ–Ω—Ç –∏–ª–∏ None
        """
        try:
            # –ü—Ä–æ–±—É–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
            methods = []

            if self.method == "playwright":
                methods = ["undetected", "flaresolverr", "playwright", "proxies", "stealth", "cloudscraper", "basic"]
            elif self.method == "cloudscraper":
                methods = ["undetected", "flaresolverr", "cloudscraper", "proxies", "stealth", "basic"]
            else:
                methods = ["undetected", "flaresolverr", "proxies", "stealth", "basic"]


            for method in methods:
                try:
                    logger.debug(f"üîÑ –ü—Ä–æ–±—É–µ–º –º–µ—Ç–æ–¥: {method}")

                    if method == "undetected" and UNDETECTED_AVAILABLE:
                        content = await self._get_content_undetected(url)
                    elif method == "flaresolverr":
                        content = await self._get_content_flaresolverr(url)
                    elif method == "proxies":
                        content = await self._get_content_with_proxies(url)
                    elif method == "cloudscraper" and CLOUDSCRAPER_AVAILABLE:
                        content = await self._get_content_cloudscraper(url)
                    elif method == "stealth":
                        content = await self._get_content_stealth(url)
                    elif method == "basic":
                        content = await self._get_content_basic(url)
                    else:
                        continue

                    if content and len(content) > 1000:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ Cloudflare –±–ª–æ–∫
                        if not ('just a moment' in content.lower() or 'checking your browser' in content.lower()):
                            logger.debug(f"‚úÖ –£—Å–ø–µ—Ö —Å –º–µ—Ç–æ–¥–æ–º: {method}")
                            return content
                        else:
                            logger.debug(f"‚ö†Ô∏è Cloudflare –±–ª–æ–∫ —Å –º–µ—Ç–æ–¥–æ–º: {method}")

                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –º–µ—Ç–æ–¥–∞ {method}: {e}")
                    continue

            logger.warning("‚ö†Ô∏è –í—Å–µ –º–µ—Ç–æ–¥—ã –æ–±—Ö–æ–¥–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")
            return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ {url}: {e}")
            return None

    async def _get_content_undetected(self, url: str) -> Optional[str]:
        """–û–±—Ö–æ–¥ —á–µ—Ä–µ–∑ undetected-chromedriver"""
        try:
            logger.debug(f"ü§ñ Undetected Chrome –∑–∞–≥—Ä—É–∑–∫–∞ {url}...")

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—Ö–æ–¥–∞
            options = uc.ChromeOptions()
            options.add_argument('--no-sandbox')
            options.add_argument('--disable-dev-shm-usage')
            options.add_argument('--disable-gpu')
            options.add_argument('--disable-extensions')
            options.add_argument('--disable-plugins')
            options.add_argument('--disable-images')  # –ë—ã—Å—Ç—Ä–µ–µ –∑–∞–≥—Ä—É–∑–∫–∞
            options.add_argument('--disable-javascript')  # –û—Ç–∫–ª—é—á–∞–µ–º JS –¥–µ—Ç–µ–∫—Ü–∏—é
            options.add_argument(
                '--user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')

            driver = uc.Chrome(options=options, version_main=120)

            try:
                # –ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
                driver.get(url)

                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                await asyncio.sleep(5)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Cloudflare –ø—Ä–æ–π–¥–µ–Ω
                for i in range(10):  # –ú–∞–∫—Å–∏–º—É–º 10 –ø–æ–ø—ã—Ç–æ–∫
                    page_source = driver.page_source

                    if 'just a moment' not in page_source.lower() and 'checking your browser' not in page_source.lower():
                        logger.debug(f"‚úÖ Cloudflare –æ–±–æ–π–¥–µ–Ω –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {i + 1}")
                        return page_source

                    logger.debug(f"‚è±Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {i + 1}: –∂–¥–µ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è Cloudflare...")
                    await asyncio.sleep(2)

                # –ï—Å–ª–∏ –Ω–µ –ø—Ä–æ—à–ª–∏ –∑–∞ 20 —Å–µ–∫—É–Ω–¥, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á—Ç–æ –µ—Å—Ç—å
                logger.warning("‚ö†Ô∏è Cloudflare –Ω–µ –ø—Ä–æ–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç")
                return driver.page_source

            finally:
                driver.quit()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ undetected-chromedriver: {e}")
            return None

    async def _get_content_flaresolverr(self, url: str) -> Optional[str]:
        """–û–±—Ö–æ–¥ —á–µ—Ä–µ–∑ FlareSolverr —Å–µ—Ä–≤–∏—Å"""
        try:
            logger.debug(f"üî• FlareSolverr –∑–∞–≥—Ä—É–∑–∫–∞ {url}...")

            # FlareSolverr API endpoint (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ)
            flaresolverr_url = "http://localhost:8191/v1"

            payload = {
                "cmd": "request.get",
                "url": url,
                "maxTimeout": 60000
            }

            timeout = aiohttp.ClientTimeout(total=70)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.post(flaresolverr_url, json=payload) as response:
                    if response.status == 200:
                        data = await response.json()
                        if data.get('status') == 'ok':
                            content = data['solution']['response']
                            logger.debug(f"‚úÖ FlareSolverr —É—Å–ø–µ—Ö: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                            return content

            return None

        except Exception as e:
            logger.debug(f"FlareSolverr –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return None

    async def _get_content_with_proxies(self, url: str) -> Optional[str]:
        """–û–±—Ö–æ–¥ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –ø—Ä–æ–∫—Å–∏"""
        try:
            # –°–ø–∏—Å–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
            proxies = [
                None,  # –ë–µ–∑ –ø—Ä–æ–∫—Å–∏
                "http://proxy1.com:8080",
                "http://proxy2.com:3128",
                # –î–æ–±–∞–≤—å —Å–≤–æ–∏ –ø—Ä–æ–∫—Å–∏
            ]

            for i, proxy in enumerate(proxies):
                try:
                    logger.debug(f"üåê –ü–æ–ø—ã—Ç–∫–∞ {i + 1} —Å –ø—Ä–æ–∫—Å–∏: {proxy or 'direct'}")

                    connector = aiohttp.ProxyConnector.from_url(proxy) if proxy else None
                    timeout = aiohttp.ClientTimeout(total=30)

                    headers = {
                        'User-Agent': f'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.{i}.0.0 Safari/537.36',
                        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
                        'Accept-Language': 'en-US,en;q=0.5',
                        'Accept-Encoding': 'gzip, deflate',
                        'Connection': 'keep-alive',
                    }

                    async with aiohttp.ClientSession(connector=connector, timeout=timeout, headers=headers) as session:
                        await asyncio.sleep(random.uniform(5, 15))  # –ë–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

                        async with session.get(url) as response:
                            content = await response.text()

                            if response.status == 200 and len(content) > 5000:
                                if not (
                                        'just a moment' in content.lower() or 'checking your browser' in content.lower()):
                                    logger.debug(f"‚úÖ –£—Å–ø–µ—Ö —Å –ø—Ä–æ–∫—Å–∏ {i + 1}")
                                    return content

                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏ {i + 1}: {e}")
                    continue

            return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏ —Ä–æ—Ç–∞—Ü–∏–∏: {e}")
            return None

    async def _get_content_playwright(self, url: str, wait_for_changes: bool = False) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Playwright"""
        try:
            # –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context = await self.browser.new_context(
                viewport={'width': 1920, 'height': 1080},
                user_agent='Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                locale='en-US',
                timezone_id='America/New_York',
                extra_http_headers={
                    'Accept-Language': 'en-US,en;q=0.9',
                    'Accept-Encoding': 'gzip, deflate, br',
                    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                    'DNT': '1',
                    'Connection': 'keep-alive',
                    'Upgrade-Insecure-Requests': '1',
                    'Sec-Fetch-Dest': 'document',
                    'Sec-Fetch-Mode': 'navigate',
                    'Sec-Fetch-Site': 'none',
                    'Cache-Control': 'max-age=0',
                }
            )

            page = await context.new_page()

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            logger.debug(f"üåê –ó–∞–≥—Ä—É–∑–∫–∞ {url} —á–µ—Ä–µ–∑ Playwright...")
            response = await page.goto(url, wait_until='domcontentloaded', timeout=30000)

            logger.debug(f"üìä Response status: {response.status}")

            # –ñ–¥–µ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è Cloudflare (—É–≤–µ–ª–∏—á–∏–ª –≤—Ä–µ–º—è)
            try:
                await page.wait_for_function(
                    "!document.title.includes('Just a moment') && !document.body.textContent.includes('Checking your browser') && !document.body.textContent.includes('Please wait')",
                    timeout=20000  # 20 —Å–µ–∫—É–Ω–¥
                )
                logger.debug("‚úÖ Cloudflare –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞")
            except:
                logger.debug("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ Cloudflare –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞")

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            await page.wait_for_timeout(3000)

            # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∂–¥–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π (–¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–Ω–æ–ø–∫–∏)
            if wait_for_changes:
                await self._wait_for_button_changes(page)

            content = await page.content()
            await context.close()

            logger.debug(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
            return content

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Playwright: {e}")
            return None

    async def _get_content_cloudscraper(self, url: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ CloudScraper"""
        try:
            logger.debug(f"üåê –ó–∞–≥—Ä—É–∑–∫–∞ {url} —á–µ—Ä–µ–∑ CloudScraper...")

            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ CloudScraper
            configs = [
                {'browser': 'chrome', 'platform': 'darwin'},  # macOS
                {'browser': 'chrome', 'platform': 'windows'},
                {'browser': 'firefox', 'platform': 'windows'},
                {'browser': 'chrome', 'platform': 'linux'},
            ]

            for i, config in enumerate(configs):
                try:
                    logger.debug(f"üîÑ –ü—Ä–æ–±—É–µ–º –∫–æ–Ω—Ñ–∏–≥ {i + 1}: {config}")
                    scraper = cloudscraper.create_scraper(browser=config)

                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                    await asyncio.sleep(random.uniform(2, 5))

                    response = scraper.get(url, timeout=30)

                    if response.status_code == 200:
                        logger.debug(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç: {len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤")
                        return response.text
                    elif response.status_code == 403:
                        logger.debug(f"‚ö†Ô∏è 403 —Å –∫–æ–Ω—Ñ–∏–≥–æ–º {config}, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π...")
                        continue
                    else:
                        logger.warning(f"‚ö†Ô∏è CloudScraper —Å—Ç–∞—Ç—É—Å: {response.status_code}")

                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞ {config}: {e}")
                    continue

            logger.warning("‚ö†Ô∏è –í—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ CloudScraper –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")
            return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ CloudScraper: {e}")
            return None

    async def _get_content_stealth(self, url: str) -> Optional[str]:
        """–°—Ç–µ–ª—Å-—Ä–µ–∂–∏–º —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        try:
            logger.debug(f"ü•∑ –°—Ç–µ–ª—Å-–∑–∞–≥—Ä—É–∑–∫–∞ {url}...")

            # –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ User-Agent
            user_agents = [
                'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.1 Safari/605.1.15',
                'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/121.0',
            ]

            for i, ua in enumerate(user_agents):
                try:
                    logger.debug(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {i + 1} —Å UA: {ua[:50]}...")

                    headers = {
                        'User-Agent': ua,
                        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                        'Accept-Language': 'en-US,en;q=0.5',
                        'Accept-Encoding': 'gzip, deflate, br',
                        'DNT': '1',
                        'Connection': 'keep-alive',
                        'Upgrade-Insecure-Requests': '1',
                        'Sec-Fetch-Dest': 'document',
                        'Sec-Fetch-Mode': 'navigate',
                        'Sec-Fetch-Site': 'none',
                        'Cache-Control': 'max-age=0',
                        'Pragma': 'no-cache',
                    }

                    timeout = aiohttp.ClientTimeout(total=30)

                    async with aiohttp.ClientSession(timeout=timeout, headers=headers) as session:
                        # –ë–æ–ª—å—à–∞—è —Å–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                        await asyncio.sleep(random.uniform(3, 8))

                        async with session.get(url) as response:
                            content = await response.text()

                            logger.debug(f"üìä –°—Ç–∞—Ç—É—Å: {response.status}, —Ä–∞–∑–º–µ—Ä: {len(content)}")

                            if response.status == 200 and len(content) > 5000:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ Cloudflare —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                                if not (
                                        'just a moment' in content.lower() or 'checking your browser' in content.lower()):
                                    logger.debug(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç")
                                    return content

                            if response.status == 403:
                                logger.debug(f"‚ö†Ô∏è 403 —Å UA {i + 1}, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π...")
                                continue

                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ —Å UA {i + 1}: {e}")
                    continue

            logger.warning("‚ö†Ô∏è –í—Å–µ User-Agent –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")
            return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–µ–ª—Å-—Ä–µ–∂–∏–º–∞: {e}")
            return None

    async def _get_content_basic(self, url: str) -> Optional[str]:
        """–ë–∞–∑–æ–≤–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (fallback)"""
        try:
            logger.debug(f"üåê –ó–∞–≥—Ä—É–∑–∫–∞ {url} –±–∞–∑–æ–≤—ã–º –º–µ—Ç–æ–¥–æ–º...")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                'Accept-Language': 'en-US,en;q=0.5',
                'Accept-Encoding': 'gzip, deflate, br',
                'DNT': '1',
                'Connection': 'keep-alive',
                'Upgrade-Insecure-Requests': '1',
                'Sec-Fetch-Dest': 'document',
                'Sec-Fetch-Mode': 'navigate',
                'Sec-Fetch-Site': 'none',
                'Cache-Control': 'max-age=0',
            }

            timeout = aiohttp.ClientTimeout(total=30)

            async with aiohttp.ClientSession(timeout=timeout, headers=headers) as session:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                await asyncio.sleep(random.uniform(2, 5))

                async with session.get(url) as response:
                    content = await response.text()

                    if response.status == 200:
                        logger.debug(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                        return content
                    else:
                        logger.warning(f"‚ö†Ô∏è –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ —Å—Ç–∞—Ç—É—Å: {response.status}")
                        return content  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ 200

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞: {e}")
            return None

    async def _wait_for_button_changes(self, page):
        """–û–∂–∏–¥–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–Ω–æ–ø–∫–µ –ø–æ–∫—É–ø–∫–∏"""
        try:
            logger.debug("üëÅÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–Ω–æ–ø–∫–∏...")

            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏
            button_selectors = [
                'button:has-text("buy")',
                'button:has-text("–∫—É–ø–∏—Ç—å")',
                'a:has-text("buy")',
                'a:has-text("–∫—É–ø–∏—Ç—å")',
                '[class*="buy"]:visible',
                '[id*="buy"]:visible',
                'button[href]',
                'button[onclick]'
            ]

            for selector in button_selectors:
                try:
                    await page.wait_for_selector(selector, timeout=5000, state='visible')
                    logger.info(f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞: {selector}")
                    return
                except:
                    continue

            logger.debug("‚è±Ô∏è –ö–Ω–æ–ø–∫–∞ –Ω–µ —Å—Ç–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")

        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–Ω–æ–ø–∫–∏: {e}")

    async def health_check(self, url: str) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –æ–±—Ö–æ–¥–∞"""
        try:
            start_time = time.time()
            content = await self.get_page_content(url)
            response_time = (time.time() - start_time) * 1000

            if content and len(content) > 1000:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ Cloudflare –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                if 'just a moment' in content.lower() or 'checking your browser' in content.lower():
                    status = "blocked"
                else:
                    status = "working"
            else:
                status = "failed"

            return {
                "status": status,
                "method": self.method,
                "response_time_ms": response_time,
                "content_size": len(content) if content else 0,
                "available_methods": {
                    "playwright": PLAYWRIGHT_AVAILABLE,
                    "cloudscraper": CLOUDSCRAPER_AVAILABLE,
                    "basic": True
                }
            }

        except Exception as e:
            return {
                "status": "error",
                "method": self.method,
                "error": str(e),
                "available_methods": {
                    "playwright": PLAYWRIGHT_AVAILABLE,
                    "cloudscraper": CLOUDSCRAPER_AVAILABLE,
                    "basic": True
                }
            }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
cloudflare_bypass = CloudflareBypass()