"""
üéØ MORI Sniper Bot - –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä –¥–ª—è MORICO.IN
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—è–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å –ú–û–†–ò" –Ω–∞ —Å–∞–π—Ç–µ
"""

import asyncio
import time
import hashlib
from typing import Dict, List, Optional
from dataclasses import dataclass
from datetime import datetime
from bs4 import BeautifulSoup
from loguru import logger

from config.settings import settings
from ai.analyzer import analyzer
from .cloudflare_bypass import cloudflare_bypass


@dataclass
class MoricoButtonState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏ –ú–û–†–ò"""
    is_active: bool
    button_text: str
    button_url: str
    button_selector: str
    contracts_found: List[str]
    timestamp: datetime


class MoricoSiteMonitor:
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä –¥–ª—è —Å–∞–π—Ç–∞ MORICO.IN"""

    def __init__(self, trading_callback=None):
        self.trading_callback = trading_callback
        self.url = "https://morico.in/"

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.running = False
        self.last_content_hash = None
        self.last_button_state = None
        self.check_interval = 10  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'checks_performed': 0,
            'content_changes': 0,
            'button_activations': 0,
            'contracts_found': 0,
            'cloudflare_blocks': 0,
            'errors': 0
        }

        # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏
        self.button_selectors = [
            # –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∫–Ω–æ–ø–æ–∫
            'button', 'a.btn', '.button', '.buy-button',
            '[class*="buy"]', '[id*="buy"]', '[class*="purchase"]',

            # –ú–û–†–ò —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            'button:contains("–ú–û–†–ò")', 'button:contains("MORI")',
            'a:contains("–ú–û–†–ò")', 'a:contains("MORI")',
            'button:contains("–∫—É–ø–∏—Ç—å")', 'button:contains("buy")',

            # –ö–Ω–æ–ø–∫–∏ —Å —Å—Å—ã–ª–∫–∞–º–∏
            'button[href]', 'button[onclick]', 'a[href*="jup"]',
            'a[href*="jupiter"]', 'a[href*="raydium"]', 'a[href*="dex"]',
        ]

    async def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ MORICO —Å–∞–π—Ç–∞"""
        logger.info("üéØ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ MORICO.IN...")

        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Cloudflare bypass
            await cloudflare_bypass.start()

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å–∞–π—Ç—É
            health = await cloudflare_bypass.health_check(self.url)

            if health['status'] == 'working':
                logger.success("‚úÖ –î–æ—Å—Ç—É–ø –∫ MORICO.IN –ø–æ–ª—É—á–µ–Ω")
                logger.info(f"üõ°Ô∏è –ú–µ—Ç–æ–¥ –æ–±—Ö–æ–¥–∞: {health['method']}")
            elif health['status'] == 'blocked':
                logger.warning("‚ö†Ô∏è Cloudflare –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏")
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ MORICO.IN")
                return False

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∞–π—Ç–∞
            await self.get_initial_state()

            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            self.running = True
            asyncio.create_task(self.monitoring_loop())

            logger.success("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ MORICO.IN –∑–∞–ø—É—â–µ–Ω")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ MORICO: {e}")
            return False

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.running = False
        await cloudflare_bypass.stop()
        logger.info("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ MORICO.IN –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def get_initial_state(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∞–π—Ç–∞"""
        try:
            logger.info("üì∏ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è MORICO.IN...")

            content = await cloudflare_bypass.get_page_content(self.url)
            if content:
                self.last_content_hash = hashlib.md5(content.encode()).hexdigest()
                button_state = self.analyze_button_state(content)
                self.last_button_state = button_state

                logger.info(f"üìä –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
                logger.info(f"   –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞: {button_state.is_active}")
                logger.info(f"   –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏: {button_state.button_text}")
                if button_state.button_url:
                    logger.info(f"   URL –∫–Ω–æ–ø–∫–∏: {button_state.button_url}")
                if button_state.contracts_found:
                    logger.warning(f"üéØ –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã —É–∂–µ –Ω–∞–π–¥–µ–Ω—ã: {button_state.contracts_found}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

    async def monitoring_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ MORICO.IN...")

        while self.running:
            try:
                start_time = time.time()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ
                await self.check_site_changes()

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.stats['checks_performed'] += 1

                # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                processing_time = time.time() - start_time
                sleep_time = max(0, self.check_interval - processing_time)

                if sleep_time > 0:
                    await asyncio.sleep(sleep_time)
                else:
                    logger.warning(f"‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ MORICO –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª: {processing_time:.1f}s")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ MORICO: {e}")
                self.stats['errors'] += 1
                await asyncio.sleep(10)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def check_site_changes(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ —Å–∞–π—Ç–µ"""
        try:
            content = await cloudflare_bypass.get_page_content(self.url)

            if not content:
                logger.debug("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç MORICO")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É Cloudflare
            if 'just a moment' in content.lower() or 'checking your browser' in content.lower():
                self.stats['cloudflare_blocks'] += 1
                logger.debug("üõ°Ô∏è Cloudflare –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞")
                return

            # –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            content_hash = hashlib.md5(content.encode()).hexdigest()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if content_hash != self.last_content_hash:
                logger.info("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ MORICO.IN")
                self.stats['content_changes'] += 1
                self.last_content_hash = content_hash

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
                button_state = self.analyze_button_state(content)
                await self.handle_button_changes(button_state)

            else:
                logger.debug("üìÑ MORICO.IN –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π MORICO: {e}")
            self.stats['errors'] += 1

    def analyze_button_state(self, content: str) -> MoricoButtonState:
        """–ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏"""
        try:
            soup = BeautifulSoup(content, 'html.parser')

            # –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏
            for selector in self.button_selectors:
                try:
                    buttons = soup.select(selector)
                    for button in buttons:
                        text = button.get_text().strip()

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏
                        if self.is_buy_button(text):
                            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏
                            is_active = self.is_button_active(button)
                            button_url = self.get_button_url(button)

                            # –ò—â–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –≤ URL –∏–ª–∏ onclick
                            contracts = self.extract_contracts_from_button(button, button_url)

                            return MoricoButtonState(
                                is_active=is_active,
                                button_text=text,
                                button_url=button_url or '',
                                button_selector=selector,
                                contracts_found=contracts,
                                timestamp=datetime.now()
                            )

                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ {selector}: {e}")
                    continue

            # –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
            return MoricoButtonState(
                is_active=False,
                button_text='',
                button_url='',
                button_selector='',
                contracts_found=[],
                timestamp=datetime.now()
            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏: {e}")
            return MoricoButtonState(False, '', '', '', [], datetime.now())

    def is_buy_button(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–æ–π –ø–æ–∫—É–ø–∫–∏"""
        text_lower = text.lower()
        buy_keywords = ['buy', '–∫—É–ø–∏—Ç—å', 'purchase', '–º–æ—Ä–∏', 'mori', 'get', '–ø–æ–ª—É—á–∏—Ç—å']
        return any(keyword in text_lower for keyword in buy_keywords)

    def is_button_active(self, button) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∏–ª–∏
            style = button.get('style', '')
            if 'display:none' in style.replace(' ', '') or 'opacity:0' in style.replace(' ', ''):
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º CSS –∫–ª–∞—Å—Å—ã
            classes = button.get('class', [])
            if isinstance(classes, list):
                classes = ' '.join(classes)

            if any(cls in classes.lower() for cls in ['disabled', 'inactive', 'hidden']):
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
            if button.get('disabled'):
                return False

            # –ï—Å–ª–∏ –µ—Å—Ç—å href –∏–ª–∏ onclick - —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–∞
            if button.get('href') or button.get('onclick'):
                return True

            return True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–π

        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏: {e}")
            return False

    def get_button_url(self, button) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ URL –∏–∑ –∫–Ω–æ–ø–∫–∏"""
        # –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞
        href = button.get('href')
        if href:
            return href

        # JavaScript onclick
        onclick = button.get('onclick')
        if onclick:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å URL –∏–∑ onclick
            import re
            url_match = re.search(r'(?:window\.open|location\.href|window\.location)\s*\(\s*[\'"]([^\'"]+)[\'"]',
                                  onclick)
            if url_match:
                return url_match.group(1)

        return None

    def extract_contracts_from_button(self, button, button_url: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –∏–∑ –∫–Ω–æ–ø–∫–∏"""
        contracts = []

        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º URL –∫–Ω–æ–ø–∫–∏
            if button_url:
                from utils.addresses import extract_addresses_from_any_url
                url_contracts = extract_addresses_from_any_url(button_url)
                contracts.extend(url_contracts)

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º onclick
            onclick = button.get('onclick', '')
            if onclick:
                from utils.addresses import extract_addresses_fast
                onclick_contracts = extract_addresses_fast(onclick, settings.ai)
                contracts.extend(onclick_contracts)

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º data –∞—Ç—Ä–∏–±—É—Ç—ã
            for attr_name, attr_value in button.attrs.items():
                if 'contract' in attr_name.lower() or 'address' in attr_name.lower():
                    from utils.addresses import is_valid_solana_address
                    if is_valid_solana_address(attr_value):
                        contracts.append(attr_value)

        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –∏–∑ –∫–Ω–æ–ø–∫–∏: {e}")

        return list(set(contracts))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã

    async def handle_button_changes(self, new_state: MoricoButtonState):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏"""
        try:
            if not self.last_button_state:
                self.last_button_state = new_state
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é –∫–Ω–æ–ø–∫–∏
            if not self.last_button_state.is_active and new_state.is_active:
                logger.critical("üö® –ö–ù–û–ü–ö–ê '–ö–£–ü–ò–¢–¨ –ú–û–†–ò' –°–¢–ê–õ–ê –ê–ö–¢–ò–í–ù–û–ô!")
                self.stats['button_activations'] += 1

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
                if new_state.contracts_found:
                    logger.critical(f"üéØ –ö–û–ù–¢–†–ê–ö–¢–´ –ù–ê–ô–î–ï–ù–´ –í –ö–ù–û–ü–ö–ï: {new_state.contracts_found}")
                    await self.trigger_trading(new_state)
                elif new_state.button_url:
                    logger.info(f"üîó –ö–Ω–æ–ø–∫–∞ –≤–µ–¥–µ—Ç –Ω–∞: {new_state.button_url}")
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ —Å—Å—ã–ª–∫–µ
                    await self.analyze_button_target(new_state.button_url)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
            elif new_state.contracts_found and new_state.contracts_found != self.last_button_state.contracts_found:
                logger.critical(f"üéØ –ù–û–í–´–ï –ö–û–ù–¢–†–ê–ö–¢–´ –í –ö–ù–û–ü–ö–ï: {new_state.contracts_found}")
                await self.trigger_trading(new_state)

            self.last_button_state = new_state

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–Ω–æ–ø–∫–∏: {e}")

    async def analyze_button_target(self, target_url: str):
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤–µ–¥–µ—Ç –∫–Ω–æ–ø–∫–∞"""
        try:
            logger.info(f"üîç –ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {target_url}")

            # –ï—Å–ª–∏ —ç—Ç–æ –≤–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞ –Ω–∞ DEX - –∏–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
            if any(dex in target_url.lower() for dex in ['jup.ag', 'jupiter', 'raydium', 'dexscreener']):
                from utils.addresses import extract_addresses_from_any_url
                contracts = extract_addresses_from_any_url(target_url)

                if contracts:
                    logger.critical(f"üéØ –ö–û–ù–¢–†–ê–ö–¢ –ò–ó –°–°–´–õ–ö–ò –ö–ù–û–ü–ö–ò: {contracts}")

                    # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
                    trading_state = MoricoButtonState(
                        is_active=True,
                        button_text="External DEX Link",
                        button_url=target_url,
                        button_selector="external_link",
                        contracts_found=contracts,
                        timestamp=datetime.now()
                    )

                    await self.trigger_trading(trading_state)
                    return

            # –ï—Å–ª–∏ —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å—Å—ã–ª–∫–∞ - –∑–∞–≥—Ä—É–∂–∞–µ–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
            if target_url.startswith('/') or 'morico.in' in target_url:
                full_url = target_url if target_url.startswith('http') else f"https://morico.in{target_url}"

                content = await cloudflare_bypass.get_page_content(full_url)
                if content:
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
                    from utils.addresses import extract_addresses_fast
                    contracts = extract_addresses_fast(content, settings.ai)

                    if contracts:
                        logger.critical(f"üéØ –ö–û–ù–¢–†–ê–ö–¢ –ù–ê –¶–ï–õ–ï–í–û–ô –°–¢–†–ê–ù–ò–¶–ï: {contracts}")

                        trading_state = MoricoButtonState(
                            is_active=True,
                            button_text="Target Page",
                            button_url=full_url,
                            button_selector="target_page",
                            contracts_found=contracts,
                            timestamp=datetime.now()
                        )

                        await self.trigger_trading(trading_state)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–ª–µ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")

    async def trigger_trading(self, button_state: MoricoButtonState):
        """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            if not self.trading_callback:
                logger.warning("‚ö†Ô∏è Trading callback –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return

            self.stats['contracts_found'] += len(button_state.contracts_found)

            trading_data = {
                'platform': 'morico_website',
                'source': 'morico.in',
                'author': 'MORICO Official',
                'url': self.url,
                'contracts': button_state.contracts_found,
                'confidence': 0.95,  # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞
                'urgency': 'high',
                'timestamp': button_state.timestamp,
                'content_preview': f"Button: {button_state.button_text}",
                'button_info': {
                    'text': button_state.button_text,
                    'url': button_state.button_url,
                    'selector': button_state.button_selector,
                    'is_active': button_state.is_active
                }
            }

            logger.critical("üö® –ó–ê–ü–£–°–ö –¢–û–†–ì–û–í–õ–ò –° –°–ê–ô–¢–ê MORICO!")
            await self.trading_callback(trading_data)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}")

    async def health_check(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –º–æ–Ω–∏—Ç–æ—Ä–∞ MORICO"""
        try:
            health = await cloudflare_bypass.health_check(self.url)

            return {
                "status": "healthy" if health['status'] == 'working' else "degraded",
                "morico_accessible": health['status'] == 'working',
                "cloudflare_bypass": health['method'],
                "running": self.running,
                "last_button_active": self.last_button_state.is_active if self.last_button_state else False,
                "stats": self.stats
            }

        except Exception as e:
            return {"status": "error", "message": str(e)}

    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        return {
            **self.stats,
            "running": self.running,
            "url": self.url,
            "check_interval": self.check_interval,
            "last_check": datetime.now().isoformat() if self.running else None,
            "button_state": {
                "is_active": self.last_button_state.is_active if self.last_button_state else False,
                "text": self.last_button_state.button_text if self.last_button_state else '',
                "has_contracts": bool(self.last_button_state.contracts_found) if self.last_button_state else False
            }
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
morico_monitor = MoricoSiteMonitor()