import asyncio
import time
from typing import Dict, List, Optional, Set
from dataclasses import dataclass
from datetime import datetime, timedelta
import aiohttp
from loguru import logger

from config.settings import settings
from ai.analyzer import analyzer


@dataclass
class TwitterPost:
    """–î–∞–Ω–Ω—ã–µ —Ç–≤–∏—Ç–∞"""
    tweet_id: str
    username: str
    content: str
    created_at: datetime
    url: str
    author_verified: bool = False
    retweet_count: int = 0
    like_count: int = 0


class HighSpeedTwitterMonitor:
    """–£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Twitter/X —Å –ø–æ–∏—Å–∫–æ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤"""

    def __init__(self, trading_callback=None):
        self.trading_callback = trading_callback
        self.session: Optional[aiohttp.ClientSession] = None

        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–≤–∏—Ç–æ–≤
        self.processed_tweets: Set[str] = set()  # tweet_id
        self.last_tweet_ids: Dict[str, str] = {}  # username -> last_tweet_id

        # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        self.running = False
        self.check_interval = settings.monitoring.twitter_interval

        # Rate limiting –¥–ª—è Twitter API
        self.api_calls_count = 0
        self.api_reset_time = time.time() + 900  # 15 –º–∏–Ω—É—Ç

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'tweets_processed': 0,
            'contracts_found': 0,
            'api_calls': 0,
            'rate_limit_hits': 0,
            'errors': 0
        }

        # Headers –¥–ª—è Twitter API v2
        self.headers = {
            'Authorization': f'Bearer {settings.monitoring.twitter_bearer_token}',
            'User-Agent': 'v2UserTweetsPython'
        } if settings.monitoring.twitter_bearer_token else {}

    async def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Twitter"""
        if not settings.monitoring.twitter_bearer_token:
            logger.warning("‚ö†Ô∏è Twitter Bearer Token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False

        if not settings.monitoring.twitter_usernames:
            logger.warning("‚ö†Ô∏è Twitter –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return False

        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP —Å–µ—Å—Å–∏–∏
            timeout = aiohttp.ClientTimeout(total=10)
            self.session = aiohttp.ClientSession(
                timeout=timeout,
                headers=self.headers
            )

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ API
            await self.test_twitter_api()

            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await self.get_user_ids()

            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            self.running = True
            asyncio.create_task(self.monitoring_loop())

            logger.success("‚úÖ Twitter –º–æ–Ω–∏—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Twitter –º–æ–Ω–∏—Ç–æ—Ä–∞: {e}")
            return False

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∞"""
        self.running = False
        if self.session:
            await self.session.close()
        logger.info("üõë Twitter –º–æ–Ω–∏—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def test_twitter_api(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ Twitter API"""
        try:
            url = "https://api.twitter.com/2/users/me"

            async with self.session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    logger.info(f"‚úÖ Twitter API –¥–æ—Å—Ç—É–ø–µ–Ω")
                elif response.status == 401:
                    raise Exception("–ù–µ–≤–µ—Ä–Ω—ã–π Bearer Token")
                elif response.status == 429:
                    raise Exception("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤")
                else:
                    raise Exception(f"Twitter API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Twitter API: {e}")
            raise

    async def get_user_ids(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏—Ö –∏–º–µ–Ω–∞–º"""
        self.user_ids = {}

        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            usernames = [u for u in settings.monitoring.twitter_usernames if u]
            usernames_str = ','.join(usernames)

            url = f"https://api.twitter.com/2/users/by?usernames={usernames_str}"

            async with self.session.get(url) as response:
                if response.status == 200:
                    data = await response.json()

                    for user in data.get('data', []):
                        self.user_ids[user['username']] = user['id']
                        logger.info(f"üì± Twitter –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user['username']} (ID: {user['id']})")

                elif response.status == 429:
                    logger.warning("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {response.status}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

    async def monitoring_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info(f"üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Twitter (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.check_interval}s)")

        while self.running:
            try:
                start_time = time.time()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
                if await self.check_rate_limit():
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–≤–∏—Ç—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    await self.check_all_users()

                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                processing_time = time.time() - start_time
                sleep_time = max(0, self.check_interval - processing_time)

                if sleep_time > 0:
                    await asyncio.sleep(sleep_time)
                else:
                    logger.warning(f"‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Twitter –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª: {processing_time:.1f}s")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Twitter: {e}")
                self.stats['errors'] += 1
                await asyncio.sleep(10)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def check_rate_limit(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        current_time = time.time()

        # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
        if current_time >= self.api_reset_time:
            self.api_calls_count = 0
            self.api_reset_time = current_time + 900
            logger.debug("üîÑ –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ API –∑–∞–ø—Ä–æ—Å–æ–≤")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç (Twitter API v2 Free: 75 –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ 15 –º–∏–Ω—É—Ç)
        if self.api_calls_count >= 70:  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å
            logger.warning("‚ö†Ô∏è –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –ª–∏–º–∏—Ç—É Twitter API, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É")
            self.stats['rate_limit_hits'] += 1
            return False

        return True

    async def check_all_users(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–≤–∏—Ç–æ–≤ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        tasks = []

        for username in settings.monitoring.twitter_usernames:
            if username and username in getattr(self, 'user_ids', {}):
                task = asyncio.create_task(self.check_user_tweets(username))
                tasks.append(task)

        if tasks:
            await asyncio.gather(*tasks, return_exceptions=True)

    async def check_user_tweets(self, username: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–≤–∏—Ç–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_id = getattr(self, 'user_ids', {}).get(username)
            if not user_id:
                logger.warning(f"‚ö†Ô∏è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–≤–∏—Ç–æ–≤
            params = {
                'max_results': 10,  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç–≤–∏—Ç–æ–≤
                'tweet.fields': 'created_at,public_metrics,author_id',
                'exclude': 'retweets'  # –ò—Å–∫–ª—é—á–∞–µ–º —Ä–µ—Ç–≤–∏—Ç—ã
            }

            # –î–æ–±–∞–≤–ª—è–µ–º since_id –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–≤–∏—Ç
            last_tweet_id = self.last_tweet_ids.get(username)
            if last_tweet_id:
                params['since_id'] = last_tweet_id

            url = f"https://api.twitter.com/2/users/{user_id}/tweets"

            self.api_calls_count += 1
            self.stats['api_calls'] += 1

            async with self.session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    tweets = data.get('data', [])

                    if tweets:
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π ID —Ç–≤–∏—Ç–∞
                        self.last_tweet_ids[username] = tweets[0]['id']

                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ç–≤–∏—Ç—ã
                        for tweet_data in reversed(tweets):  # –û—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
                            await self.process_tweet(tweet_data, username)

                elif response.status == 429:
                    logger.warning(f"‚ö†Ô∏è Rate limit –¥–ª—è @{username}")
                    self.stats['rate_limit_hits'] += 1
                elif response.status == 401:
                    logger.error("‚ùå –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ Twitter API")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ç–≤–∏—Ç–æ–≤ @{username}: {response.status}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–≤–∏—Ç–æ–≤ @{username}: {e}")

    async def process_tweet(self, tweet_data: Dict, username: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ç–≤–∏—Ç–∞"""
        try:
            tweet_id = tweet_data['id']

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
            if tweet_id in self.processed_tweets:
                return

            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç–≤–∏—Ç–∞
            tweet = TwitterPost(
                tweet_id=tweet_id,
                username=username,
                content=tweet_data['text'],
                created_at=datetime.fromisoformat(tweet_data['created_at'].replace('Z', '+00:00')),
                url=f"https://twitter.com/{username}/status/{tweet_id}",
                retweet_count=tweet_data.get('public_metrics', {}).get('retweet_count', 0),
                like_count=tweet_data.get('public_metrics', {}).get('like_count', 0)
            )

            # –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
            analysis_result = await analyzer.analyze_post(
                content=tweet.content,
                platform="twitter",
                author=username,
                url=tweet.url
            )

            logger.info(f"üê¶ –¢–≤–∏—Ç @{username}: –∫–æ–Ω—Ç—Ä–∞–∫—Ç={analysis_result.has_contract}, "
                        f"—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å={analysis_result.confidence:.2f}")

            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Å –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
            if analysis_result.has_contract and analysis_result.confidence > 0.6:
                logger.critical(f"üö® –ö–û–ù–¢–†–ê–ö–¢ –í –¢–í–ò–¢–ï @{username}: {analysis_result.addresses}")

                if self.trading_callback:
                    await self.trigger_trading(analysis_result, tweet)

                self.stats['contracts_found'] += 1

            # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
            self.processed_tweets.add(tweet_id)
            self.stats['tweets_processed'] += 1

            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ç–≤–∏—Ç–æ–≤ –∏–∑ –ø–∞–º—è—Ç–∏
            if len(self.processed_tweets) > 1000:
                old_tweets = list(self.processed_tweets)[:200]
                for old_tweet in old_tweets:
                    self.processed_tweets.discard(old_tweet)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–≤–∏—Ç–∞: {e}")

    async def trigger_trading(self, analysis_result, tweet: TwitterPost):
        """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            trading_data = {
                'platform': 'twitter',
                'source': f'@{tweet.username}',
                'author': tweet.username,
                'url': tweet.url,
                'contracts': analysis_result.addresses,
                'confidence': analysis_result.confidence,
                'urgency': analysis_result.urgency,
                'timestamp': tweet.created_at,
                'content_preview': tweet.content,
                'engagement': {
                    'retweets': tweet.retweet_count,
                    'likes': tweet.like_count
                }
            }

            # –í—ã–∑—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Ç–æ—Ä–≥–æ–≤–ª–∏
            await self.trading_callback(trading_data)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}")

    async def health_check(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –º–æ–Ω–∏—Ç–æ—Ä–∞"""
        try:
            if not self.session:
                return {"status": "error", "message": "–°–µ—Å—Å–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"}

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ API
            try:
                url = "https://api.twitter.com/2/users/me"
                async with self.session.get(url) as response:
                    api_accessible = response.status in [200, 401, 429]  # –õ—é–±–æ–π –≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç
            except:
                api_accessible = False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            remaining_calls = max(0, 70 - self.api_calls_count)

            return {
                "status": "healthy" if api_accessible else "error",
                "api_accessible": api_accessible,
                "monitored_users": len([u for u in settings.monitoring.twitter_usernames if u]),
                "running": self.running,
                "rate_limit": {
                    "remaining_calls": remaining_calls,
                    "reset_time": self.api_reset_time
                },
                "stats": self.stats
            }

        except Exception as e:
            return {"status": "error", "message": str(e)}

    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        return {
            **self.stats,
            "monitored_users": len([u for u in settings.monitoring.twitter_usernames if u]),
            "processed_tweets_cache": len(self.processed_tweets),
            "user_ids_cached": len(getattr(self, 'user_ids', {})),
            "running": self.running,
            "check_interval": self.check_interval,
            "api_calls_remaining": max(0, 70 - self.api_calls_count)
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
twitter_monitor = HighSpeedTwitterMonitor()