import asyncio
import time
import re
from typing import Dict, List, Optional, Set, Union
from dataclasses import dataclass
from datetime import datetime, timedelta
from pathlib import Path

from loguru import logger

# –£–ª—É—á—à–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Telethon –∏–º–ø–æ—Ä—Ç–æ–≤
TELETHON_AVAILABLE = False
TelegramClient = None
events = None
types = None

logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telethon...")

try:
    from telethon import TelegramClient, events, types

    logger.success("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ Telethon –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º TL types
    try:
        from telethon.tl.types import Channel, Chat, User, Message

        logger.success("‚úÖ –ë–∞–∑–æ–≤—ã–µ TL types –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    except ImportError as e:
        logger.warning(f"‚ö†Ô∏è –ë–∞–∑–æ–≤—ã–µ TL types –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ–¥–∏–∞ —Ç–∏–ø—ã
    try:
        from telethon.tl.types import MessageMediaDocument, MessageMediaPhoto

        logger.success("‚úÖ –ú–µ–¥–∏–∞ TL types –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    except ImportError as e:
        logger.debug(f"‚ÑπÔ∏è –ú–µ–¥–∏–∞ TL types –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ): {e}")
        MessageMediaDocument = None
        MessageMediaPhoto = None

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º errors
    try:
        from telethon.errors import (
            SessionPasswordNeededError, PhoneCodeInvalidError,
            PhoneNumberInvalidError, FloodWaitError, ChannelPrivateError,
            AuthKeyUnregisteredError, UserDeactivatedError
        )

        logger.success("‚úÖ Telethon errors –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    except ImportError as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ Telethon errors –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")

    TELETHON_AVAILABLE = True
    logger.critical("üéØ TELETHON –î–û–°–¢–£–ü–ï–ù - User Bot –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å!")

except ImportError as e:
    logger.error(f"‚ùå Telethon –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    logger.error("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install telethon")
    TELETHON_AVAILABLE = False

from config.settings import settings, is_admin_message
from ai.analyzer import analyzer


@dataclass
class TelegramUserPost:
    """–î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç User Bot"""
    message_id: int
    chat_id: int
    chat_title: str
    chat_username: str
    author_id: int
    author_username: str
    author_first_name: str
    content: str
    timestamp: datetime
    url: str
    message_type: str  # 'channel', 'group', 'private'
    is_admin: bool = False
    has_media: bool = False
    reply_to_msg_id: Optional[int] = None
    is_topic: bool = False
    topic_id: Optional[int] = None


class UltraFastTelegramUserMonitor:
    """–£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Telegram —á–µ—Ä–µ–∑ User Bot API"""

    def __init__(self, trading_callback=None):
        self.trading_callback = trading_callback
        self.client: Optional[TelegramClient] = None

        # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        logger.info("üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ User Bot...")
        logger.info(f"üì± USE_TELEGRAM_USER_BOT: {settings.monitoring.use_user_bot}")
        logger.info(f"ü§ñ USE_TELEGRAM_BOT_API: {settings.monitoring.use_bot_api}")
        logger.info(f"üÜî TELEGRAM_API_ID: {'‚úÖ –ï—Å—Ç—å' if settings.monitoring.telegram_api_id else '‚ùå –ù–µ—Ç'}")
        logger.info(f"üîë TELEGRAM_API_HASH: {'‚úÖ –ï—Å—Ç—å' if settings.monitoring.telegram_api_hash else '‚ùå –ù–µ—Ç'}")
        logger.info(f"üìû TELEGRAM_PHONE_NUMBER: {'‚úÖ –ï—Å—Ç—å' if settings.monitoring.telegram_phone_number else '‚ùå –ù–µ—Ç'}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        if not TELETHON_AVAILABLE:
            logger.error("‚ùå Telethon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! User Bot –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
            logger.error("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install telethon")
            return

        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.processed_messages: Set[int] = set()  # message_id
        self.chat_entities: Dict[str, Union[Channel, Chat]] = {}  # username -> entity
        self.chat_entities_by_id: Dict[int, Union[Channel, Chat]] = {}  # chat_id -> entity
        self.chat_id_mapping: Dict[int, str] = {}  # chat_id -> username –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.user_entities: Dict[int, User] = {}  # user_id -> User

        # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        self.running = False
        self.session_file = f"{settings.monitoring.telegram_session_name}.session"

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'messages_processed': 0,
            'contracts_found': 0,
            'channels_monitored': 0,
            'groups_monitored': 0,
            'connections': 0,
            'errors': 0,
            'auth_attempts': 0
        }

        # Rate limiting
        self.last_message_time = {}  # chat_id -> timestamp –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Å–ø–∞–º–∞

        logger.info(f"üéØ User Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (Telethon: {TELETHON_AVAILABLE})")

    @staticmethod
    def normalize_chat_ids(original_id: int) -> List[int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã ID —á–∞—Ç–∞"""
        ids = [original_id]

        # –ï—Å–ª–∏ ID –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º -100
        if original_id > 0:
            prefixed_id = int(f"-100{original_id}")
            ids.append(prefixed_id)

        # –ï—Å–ª–∏ ID –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º -100, –¥–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
        elif str(original_id).startswith("-100"):
            clean_id = int(str(original_id)[4:])  # —É–±–∏—Ä–∞–µ–º -100
            ids.append(clean_id)

        return ids

    def test_chat_id_matching(self, test_id: int) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è ID —á–∞—Ç–∞ (–¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)"""
        logger.debug(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º ID: {test_id}")

        # –ü—Ä—è–º–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        if test_id in self.chat_entities_by_id:
            logger.debug(f"‚úÖ –ü—Ä—è–º–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è {test_id}")
            return True

        # –ü–æ–∏—Å–∫ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        all_normalized = self.normalize_chat_ids(test_id)
        logger.debug(f"üîÑ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {all_normalized}")

        for normalized_id in all_normalized:
            if normalized_id in self.chat_entities_by_id:
                logger.debug(f"‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ ID {normalized_id}")
                return True

        logger.debug(f"‚ùå –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {test_id}")
        logger.debug(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ ID: {sorted(self.chat_entities_by_id.keys())}")
        return False

    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ User Bot"""
        return TELETHON_AVAILABLE

    async def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Telegram User Bot"""
        logger.critical("üöÄ –ó–ê–ü–£–°–ö TELEGRAM USER BOT!")

        if not TELETHON_AVAILABLE:
            logger.error("‚ùå Telethon –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - User Bot –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
            return False

        if not settings.monitoring.telegram_api_id or not settings.monitoring.telegram_api_hash:
            logger.error("‚ùå Telegram API ID/Hash –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            logger.error("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ TELEGRAM_API_ID –∏ TELEGRAM_API_HASH –≤ .env")
            return False

        if not settings.monitoring.telegram_phone_number:
            logger.error("‚ùå TELEGRAM_PHONE_NUMBER –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False

        try:
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
            logger.info("üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ User Bot:")
            logger.info(f"   üìÅ Session file: {self.session_file}")
            logger.info(f"   üÜî API ID: {settings.monitoring.telegram_api_id}")
            logger.info(f"   üìû Phone: {settings.monitoring.telegram_phone_number}")
            logger.info(f"   üì∫ –ö–∞–Ω–∞–ª—ã: {[ch for ch in settings.monitoring.user_bot_channels if ch]}")
            logger.info(f"   üë• –ì—Ä—É–ø–ø—ã: {[gr for gr in settings.monitoring.user_bot_groups if gr]}")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telethon
            logger.info("‚ö° –°–æ–∑–¥–∞–µ–º Telegram –∫–ª–∏–µ–Ω—Ç...")

            self.client = TelegramClient(
                session=self.session_file,
                api_id=int(settings.monitoring.telegram_api_id),
                api_hash=settings.monitoring.telegram_api_hash,
                device_model="MORI Sniper Bot",
                system_version="1.0",
                app_version="1.0",
                lang_code="en",
                system_lang_code="en"
            )

            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
            logger.info("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram...")
            await self.client.start(phone=settings.monitoring.telegram_phone_number)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if not await self.client.is_user_authorized():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Telegram")
                logger.error("üí° –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ –∑–∞–Ω–æ–≤–æ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
                return False

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            me = await self.client.get_me()
            logger.success(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: @{me.username} ({me.first_name} {me.last_name or ''})")
            logger.success(f"üÜî User ID: {me.id}")

            # –ü–æ–ª—É—á–∞–µ–º entities –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø
            await self.get_chat_entities()

            if len(self.chat_entities) == 0:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!")
                logger.warning("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª—ã/–≥—Ä—É–ø–ø—ã")

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            self.setup_event_handlers()

            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            self.running = True

            logger.critical("üî• TELEGRAM USER BOT –ê–ö–¢–ò–í–ï–ù!")
            logger.critical(
                f"üìç –ú–æ–Ω–∏—Ç–æ—Ä–∏–º {self.stats['channels_monitored']} –∫–∞–Ω–∞–ª–æ–≤ –∏ {self.stats['groups_monitored']} –≥—Ä—É–ø–ø")
            logger.critical("üéØ –û–∂–∏–¥–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")

            return True

        except SessionPasswordNeededError:
            logger.error("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
            logger.error("üí° –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç Telegram –∞–∫–∫–∞—É–Ω—Ç–∞")
            return False
        except PhoneNumberInvalidError:
            logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
            return False
        except AuthKeyUnregisteredError:
            logger.error("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞, –Ω—É–∂–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
            logger.error("üí° –£–¥–∞–ª–∏—Ç–µ .session —Ñ–∞–π–ª –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram User Bot: {e}")
            logger.error(f"üîç –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            return False

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∞"""
        self.running = False
        if self.client:
            try:
                await self.client.disconnect()
                logger.info("üõë Telegram User Bot –æ—Ç–∫–ª—é—á–µ–Ω")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è User Bot: {e}")

    async def get_chat_entities(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ entities –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("üì° –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–∞—Ö –∏ –≥—Ä—É–ø–ø–∞—Ö...")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª—ã
        channels_to_monitor = [ch for ch in settings.monitoring.user_bot_channels if ch]
        logger.info(f"üì∫ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª—ã: {channels_to_monitor}")

        for channel in channels_to_monitor:
            try:
                logger.debug(f"üîç –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª: {channel}")
                entity = await self.client.get_entity(channel)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º entity –ø–æ username –ò –ø–æ –í–°–ï–ú –≤–æ–∑–º–æ–∂–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º ID
                self.chat_entities[channel] = entity

                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã ID
                all_ids = self.normalize_chat_ids(entity.id)
                for chat_id in all_ids:
                    self.chat_entities_by_id[chat_id] = entity
                    self.chat_id_mapping[chat_id] = channel

                self.stats['channels_monitored'] += 1

                all_ids = self.normalize_chat_ids(entity.id)
                ids_str = " / ".join(map(str, all_ids))
                logger.success(
                    f"‚úÖ –ö–∞–Ω–∞–ª: {entity.title} (@{getattr(entity, 'username', 'N/A')}) - ID: {ids_str} - {getattr(entity, 'participants_count', 'N/A')} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")

            except ChannelPrivateError:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª {channel} - –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            except ValueError as e:
                logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–∞–Ω–∞–ª {channel}: {e}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {channel}: {e}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—ã
        groups_to_monitor = [gr for gr in settings.monitoring.user_bot_groups if gr]
        logger.info(f"üë• –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—ã: {groups_to_monitor}")

        for group in groups_to_monitor:
            try:
                logger.debug(f"üîç –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É: {group}")
                entity = await self.client.get_entity(group)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º entity –ø–æ username –ò –ø–æ –í–°–ï–ú –≤–æ–∑–º–æ–∂–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–∞–º ID
                self.chat_entities[group] = entity

                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã ID
                all_ids = self.normalize_chat_ids(entity.id)
                for chat_id in all_ids:
                    self.chat_entities_by_id[chat_id] = entity
                    self.chat_id_mapping[chat_id] = group

                self.stats['groups_monitored'] += 1

                logger.success(
                    f"‚úÖ –ì—Ä—É–ø–ø–∞: {getattr(entity, 'title', 'N/A')} (@{getattr(entity, 'username', 'private')}) - ID: {entity.id} - {getattr(entity, 'participants_count', 'N/A')} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")

            except ChannelPrivateError:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–∏–≤–∞—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞ {group} - –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            except ValueError as e:
                logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –≥—Ä—É–ø–ø–∞ {group}: {e}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã {group}: {e}")

        logger.success(f"üéØ –ü–æ–ª—É—á–µ–Ω–æ {len(self.chat_entities)} —á–∞—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")

        # –ù–û–í–û–ï: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –õ–° –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if settings.monitoring.monitor_private_messages:
            dm_usernames = [dm for dm in settings.monitoring.user_bot_dm_usernames if dm]
            logger.info(f"üí¨ –ü—Ä–æ–≤–µ—Ä—è–µ–º –õ–° —Å: {dm_usernames}")

            for dm_username in dm_usernames:
                try:
                    logger.debug(f"üîç –ü–æ–ª—É—á–∞–µ–º –õ–° —Å: {dm_username}")

                    # –û—á–∏—â–∞–µ–º username –æ—Ç @
                    clean_username = dm_username.replace('@', '')

                    # –î–ª—è –õ–° –∏—Å–ø–æ–ª—å–∑—É–µ–º username –Ω–∞–ø—Ä—è–º—É—é
                    entity = await self.client.get_entity(clean_username)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º entity
                    self.chat_entities[dm_username] = entity

                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã ID –¥–ª—è –õ–°
                    all_ids = self.normalize_chat_ids(entity.id)
                    for chat_id in all_ids:
                        self.chat_entities_by_id[chat_id] = entity
                        self.chat_id_mapping[chat_id] = dm_username

                    logger.success(
                        f"‚úÖ –õ–°: {getattr(entity, 'first_name', 'Unknown')} (@{getattr(entity, 'username', dm_username)}) - ID: {entity.id}")

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –õ–° —Å {dm_username}: {e}")

        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
        logger.critical("üìç –ú–û–ù–ò–¢–û–†–ò–ú–´–ï –ß–ê–¢–´:")
        for identifier, entity in self.chat_entities.items():
            all_ids = self.normalize_chat_ids(entity.id)
            ids_str = " / ".join(map(str, all_ids))
            logger.critical(f"   üéØ {identifier} -> {getattr(entity, 'title', 'N/A')} (ID: {ids_str})")

        logger.critical("üÜî –í–°–ï –ú–ê–ü–ü–ò–ù–ì–ò ID -> USERNAME:")
        for chat_id, username in sorted(self.chat_id_mapping.items()):
            logger.critical(f"   üîó {chat_id} -> {username}")

        logger.critical(f"üìä –í–°–ï–ì–û –ú–ê–ü–ü–ò–ù–ì–û–í: {len(self.chat_id_mapping)}")

        if len(self.chat_entities_by_id) == 0:
            logger.error("‚ùå –ù–ï–¢ –î–û–°–¢–£–ü–ù–´–• –ß–ê–¢–û–í! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
            logger.error("   1. –ß—Ç–æ User Bot –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª—ã/–≥—Ä—É–ø–ø—ã")
            logger.error("   2. –ß—Ç–æ –∫–∞–Ω–∞–ª—ã/–≥—Ä—É–ø–ø—ã –ø—É–±–ª–∏—á–Ω—ã–µ –∏–ª–∏ –±–æ—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø")

    def setup_event_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π Telethon"""
        logger.info("‚ö° –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π...")

        @self.client.on(events.NewMessage())
        async def handle_new_message(event):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
            try:
                # –õ–æ–≥–∏—Ä—É–µ–º –í–°–ï –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                chat_id = event.chat_id
                message_id = event.message.id
                logger.debug(f"üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: chat_id={chat_id}, message_id={message_id}")

                # –ò—â–µ–º entity –ø–æ ID —á–∞—Ç–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û!)
                target_entity = self.chat_entities_by_id.get(chat_id)
                chat_identifier = self.chat_id_mapping.get(chat_id, f"ID:{chat_id}")

                if not target_entity:
                    # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –ù–ï –º–æ–Ω–∏—Ç–æ—Ä–∏–º—ã—Ö —á–∞—Ç–æ–≤
                    logger.debug(f"‚è≠Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ù–ï –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–º–æ–≥–æ —á–∞—Ç–∞: {chat_id}")
                    logger.debug(f"   üìã –ú–æ–Ω–∏—Ç–æ—Ä–∏–º—ã–µ ID: {sorted(self.chat_entities_by_id.keys())}")
                    logger.debug(f"   üîç –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ ID...")

                    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ ID –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                    for stored_id in self.chat_entities_by_id.keys():
                        if abs(stored_id) == abs(chat_id) or str(stored_id) in str(chat_id) or str(chat_id) in str(
                                stored_id):
                            logger.debug(f"   üîé –ü–æ—Ö–æ–∂–∏–π ID –Ω–∞–π–¥–µ–Ω: {stored_id}")

                    return

                logger.critical(f"üéØ –°–û–û–ë–©–ï–ù–ò–ï –ò–ó –ú–û–ù–ò–¢–û–†–ò–ú–û–ì–û –ß–ê–¢–ê!")
                logger.critical(f"   üìç Chat ID: {chat_id}")
                logger.critical(f"   üè∑Ô∏è Identifier: {chat_identifier}")
                logger.critical(f"   üìù Message ID: {message_id}")

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await self.process_message(event, target_entity, chat_identifier)

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                self.stats['errors'] += 1

        logger.success("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

    async def process_message(self, event, chat_entity, chat_identifier: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            message = event.message

            logger.debug(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ {message.id} –∏–∑ {chat_identifier}")

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
            message_unique_id = hash(f"{message.chat_id}:{message.id}:{message.date}")
            if message_unique_id in self.processed_messages:
                logger.debug(f"‚è≠Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ {message.id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                return

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ
            sender = await event.get_sender()
            if not sender:
                logger.debug(f"‚è≠Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –¥–ª—è {message.id}")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting –¥–ª—è —á–∞—Ç–∞
            now = time.time()
            last_time = self.last_message_time.get(message.chat_id, 0)
            if now - last_time < 0.1:  # –ù–µ —á–∞—â–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É –Ω–∞ —á–∞—Ç
                logger.debug(f"‚è≠Ô∏è Rate limiting –¥–ª—è —á–∞—Ç–∞ {message.chat_id}")
                return
            self.last_message_time[message.chat_id] = now

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
            message_type = 'group'  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            try:
                if hasattr(chat_entity, 'broadcast') and chat_entity.broadcast:
                    message_type = 'channel'
                elif hasattr(chat_entity, 'megagroup'):
                    message_type = 'group'
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç (–õ–°)
                    if not hasattr(chat_entity, 'title'):  # –£ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ –Ω–µ—Ç title
                        message_type = 'private'
            except Exception as e:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —á–∞—Ç–∞: {e}")

            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
            post = TelegramUserPost(
                message_id=message.id,
                chat_id=message.chat_id,
                chat_title=getattr(chat_entity, 'title', 'Unknown'),
                chat_username=getattr(chat_entity, 'username', ''),
                author_id=sender.id,
                author_username=getattr(sender, 'username', ''),
                author_first_name=getattr(sender, 'first_name', ''),
                content=message.text or '',
                timestamp=message.date,
                url=f"https://t.me/{getattr(chat_entity, 'username', 'c')}/{message.id}",
                message_type=message_type,
                is_admin=is_admin_message(getattr(sender, 'username', ''), sender.id),
                has_media=message.media is not None,
                reply_to_msg_id=getattr(message, 'reply_to_msg_id', None),
                is_topic=hasattr(message, 'reply_to') and hasattr(message.reply_to, 'forum_topic'),
                topic_id=getattr(getattr(message, 'reply_to', None), 'reply_to_top_id', None)
            )

            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            logger.info(f"üí¨ –ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï –≤ {post.chat_title}: @{post.author_username} - {post.content[:100]}...")

            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
            if post.message_type == 'group' and not post.is_admin:
                logger.debug(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–µ-–∞–¥–º–∏–Ω–∞ @{post.author_username}")
                return
            elif post.message_type == 'private':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –õ–° —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                from config.settings import settings
                if not settings.monitoring.is_monitored_dm(post.author_username):
                    logger.debug(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –õ–° –æ—Ç –Ω–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{post.author_username}")
                    return
                else:
                    logger.critical(f"üí¨ –õ–° –û–¢ –ú–û–ù–ò–¢–û–†–ò–ú–û–ì–û –ë–û–¢–ê: @{post.author_username}")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–µ–¥–∏–∞, –∫–Ω–æ–ø–æ–∫ –∏ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–æ–∫
            inline_urls = []
            hyperlink_urls = []
            media_text = ""

            if post.has_media:
                media_text = await self.extract_media_text(message)
                if media_text:
                    post.content += f" {media_text}"

            # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
            if hasattr(message, 'reply_markup') and message.reply_markup:
                inline_urls = self.extract_inline_button_urls(message.reply_markup)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏ –∏–∑ entities
            if hasattr(message, 'entities') and message.entities:
                hyperlink_urls = self.extract_hyperlink_urls(message)

            # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
            logger.debug(f"üß† –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤...")
            from utils.addresses import extract_addresses_from_message_data
            from config.settings import settings

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            found_addresses = extract_addresses_from_message_data(
                message_text=post.content,
                inline_urls=inline_urls,
                hyperlink_urls=hyperlink_urls,
                ai_config=settings.ai
            )

            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π analysis_result –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            class MockAnalysisResult:
                def __init__(self, addresses):
                    self.has_contract = len(addresses) > 0
                    self.addresses = addresses
                    self.confidence = 0.9 if addresses else 0.0  # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –Ω–∞—à–ª–∏ –∞–¥—Ä–µ—Å–∞
                    self.urgency = 'high' if addresses else 'low'

            analysis_result = MockAnalysisResult(found_addresses)

            logger.critical(f"üì± TELEGRAM USER: @{post.author_username} –≤ {post.chat_title}")
            logger.critical(
                f"üéØ –ö–æ–Ω—Ç—Ä–∞–∫—Ç: {analysis_result.has_contract}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis_result.confidence:.2f}")
            logger.critical(f"üìù –¢–µ–∫—Å—Ç: {post.content}")

            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Å –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
            if analysis_result.has_contract and analysis_result.confidence > 0.6:
                logger.critical(f"üö® –ö–û–ù–¢–†–ê–ö–¢ –ù–ê–ô–î–ï–ù –í TELEGRAM USER BOT!")
                logger.critical(f"üìç –ê–≤—Ç–æ—Ä: @{post.author_username} –≤ {post.chat_title}")
                logger.critical(f"üéØ –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã: {analysis_result.addresses}")

                if self.trading_callback:
                    await self.trigger_trading(analysis_result, post)

                self.stats['contracts_found'] += 1

            # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
            self.processed_messages.add(message_unique_id)
            self.stats['messages_processed'] += 1

            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ø–∞–º—è—Ç–∏
            if len(self.processed_messages) > 2000:
                old_messages = list(self.processed_messages)[:500]
                for old_msg in old_messages:
                    self.processed_messages.discard(old_msg)

        except FloodWaitError as e:
            logger.warning(f"‚ö†Ô∏è Flood wait {e.seconds}s –¥–ª—è {chat_identifier}")
            await asyncio.sleep(e.seconds)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ {chat_identifier}: {e}")
            self.stats['errors'] += 1

    async def extract_media_text(self, message) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –º–µ–¥–∏–∞ –ò –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫"""
        try:
            extracted_text = ""

            # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            if message.message:
                extracted_text += message.message + " "

            # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
            if hasattr(message, 'reply_markup') and message.reply_markup:
                button_urls = self.extract_inline_button_urls(message.reply_markup)
                if button_urls:
                    logger.info(f"üîò –ù–∞–π–¥–µ–Ω—ã –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ —Å URL: {button_urls}")
                    extracted_text += " ".join(button_urls) + " "

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏ –∏–∑ entities
            if hasattr(message, 'entities') and message.entities:
                hyperlink_urls = self.extract_hyperlink_urls(message)
                if hyperlink_urls:
                    logger.info(f"üîó –ù–∞–π–¥–µ–Ω—ã –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏: {hyperlink_urls}")
                    extracted_text += " ".join(hyperlink_urls) + " "

            return extracted_text.strip() if extracted_text.strip() else None

        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ–¥–∏–∞/–∫–Ω–æ–ø–æ–∫: {e}")
            return None

    def extract_inline_button_urls(self, reply_markup) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ URL –∏–∑ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫"""
        urls = []
        try:
            if hasattr(reply_markup, 'rows'):
                for row in reply_markup.rows:
                    if hasattr(row, 'buttons'):
                        for button in row.buttons:
                            if hasattr(button, 'url') and button.url:
                                urls.append(button.url)
                                logger.debug(f"üîò –ö–Ω–æ–ø–∫–∞ URL: {button.url}")
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫: {e}")

        return urls

    def extract_hyperlink_urls(self, message) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ URL –∏–∑ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ"""
        urls = []
        try:
            for entity in message.entities:
                if hasattr(entity, 'url') and entity.url:
                    urls.append(entity.url)
                    logger.debug(f"üîó –ì–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞: {entity.url}")
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≥–∏–ø–µ—Ä—Å—Å—ã–ª–æ–∫: {e}")

        return urls

    async def trigger_trading(self, analysis_result, post: TelegramUserPost):
        """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            trading_data = {
                'platform': 'telegram_user',
                'source': f"{post.chat_title} (@{post.chat_username})",
                'author': post.author_username,
                'author_id': post.author_id,
                'chat_id': post.chat_id,
                'message_id': post.message_id,
                'url': post.url,
                'contracts': analysis_result.addresses,
                'confidence': analysis_result.confidence,
                'urgency': analysis_result.urgency,
                'timestamp': post.timestamp,
                'content_preview': post.content[:200],
                'message_type': post.message_type,
                'is_admin': post.is_admin,
                'has_media': post.has_media,
                'topic_id': post.topic_id
            }

            # –í—ã–∑—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Ç–æ—Ä–≥–æ–≤–ª–∏
            await self.trading_callback(trading_data)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}")

    async def health_check(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –º–æ–Ω–∏—Ç–æ—Ä–∞"""
        try:
            if not TELETHON_AVAILABLE:
                return {"status": "error", "message": "Telethon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}

            if not self.client:
                return {"status": "error", "message": "–ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            try:
                is_connected = self.client.is_connected()
                is_authorized = await self.client.is_user_authorized()

                if not is_connected:
                    await self.client.connect()

            except Exception as e:
                return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}"}

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            try:
                me = await self.client.get_me()
                username = getattr(me, 'username', 'Unknown')
            except:
                username = 'Unknown'

            return {
                "status": "healthy" if is_connected and is_authorized else "degraded",
                "connected": is_connected,
                "authorized": is_authorized,
                "username": username,
                "monitored_chats": len(self.chat_entities_by_id),
                "monitored_chat_ids": list(self.chat_entities_by_id.keys()),
                "monitored_usernames": list(self.chat_entities.keys()),
                "channels": self.stats['channels_monitored'],
                "groups": self.stats['groups_monitored'],
                "running": self.running,
                "stats": self.stats
            }

        except Exception as e:
            return {"status": "error", "message": str(e)}

    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        return {
            **self.stats,
            "processed_messages_cache": len(self.processed_messages),
            "chat_entities_cached": len(self.chat_entities),
            "chat_entities_by_id_cached": len(self.chat_entities_by_id),
            "chat_id_mappings": len(self.chat_id_mapping),
            "user_entities_cached": len(self.user_entities),
            "running": self.running,
            "session_file": self.session_file,
            "telethon_available": TELETHON_AVAILABLE,
            "monitored_chat_ids": list(self.chat_entities_by_id.keys()),
            "monitored_usernames": list(self.chat_entities.keys())
        }

    async def send_message(self, chat_id: int, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç (–¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)"""
        try:
            if not self.client or not self.running:
                return False

            await self.client.send_message(chat_id, message)
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False

    async def debug_chat_info(self):
        """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–∞—Ö (–≤—ã–∑—ã–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)"""
        if not self.client:
            logger.error("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return

        logger.critical("üîç –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ß–ê–¢–ê–•:")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–∞—Ö
            async for dialog in self.client.iter_dialogs():
                if hasattr(dialog.entity, 'username') and dialog.entity.username:
                    username = f"@{dialog.entity.username}"
                    all_ids = self.normalize_chat_ids(dialog.entity.id)
                    ids_str = " / ".join(map(str, all_ids))

                    logger.critical(f"   üìç {username} -> {dialog.title} (ID: {ids_str})")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç —á–∞—Ç –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
                    if username in [ch for ch in settings.monitoring.user_bot_channels if ch] + [gr for gr in
                                                                                                 settings.monitoring.user_bot_groups
                                                                                                 if gr]:
                        logger.critical(f"      ‚úÖ –ù–ê–°–¢–†–û–ï–ù –î–õ–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
                    else:
                        logger.critical(f"      ‚è≠Ô∏è –ù–µ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤: {e}")

    async def get_chat_history(self, chat_identifier: str, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ (–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—à–ª—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)"""
        try:
            if not self.client:
                return []

            entity = await self.client.get_entity(chat_identifier)
            messages = []

            async for message in self.client.iter_messages(entity, limit=limit):
                sender = await message.get_sender()

                messages.append({
                    'id': message.id,
                    'date': message.date,
                    'text': message.text or '',
                    'sender': {
                        'id': sender.id if sender else None,
                        'username': getattr(sender, 'username', ''),
                        'first_name': getattr(sender, 'first_name', '')
                    }
                })

            return messages

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ {chat_identifier}: {e}")
            return []


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä User Bot –º–æ–Ω–∏—Ç–æ—Ä–∞
telegram_user_monitor = UltraFastTelegramUserMonitor() if TELETHON_AVAILABLE else None