import os
import random
from typing import List, Optional
from dataclasses import dataclass
from loguru import logger

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫
try:
    from solders.keypair import Keypair
    import base58

    CRYPTO_LIBS_AVAILABLE = True
except ImportError:
    CRYPTO_LIBS_AVAILABLE = False
    logger.warning("‚ö†Ô∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")


@dataclass
class MultiWalletInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–µ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    index: int
    address: str
    keypair: Keypair
    balance_sol: float = 0.0
    reserved_gas: float = 0.02
    available_balance: float = 0.0
    last_used: float = 0.0  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    trades_count: int = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫

    def update_balance(self, new_balance: float):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å —É—á–µ—Ç–æ–º —Ä–µ–∑–µ—Ä–≤–∞ –Ω–∞ –≥–∞–∑"""
        self.balance_sol = new_balance
        self.available_balance = max(0, new_balance - self.reserved_gas)

    def can_trade(self, amount: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–≤–µ—Ä—à–∏—Ç—å —Å–¥–µ–ª–∫—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É"""
        return self.available_balance >= amount

    def mark_used(self, amount: float):
        """–û—Ç–º–µ—Ç–∫–∞ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞"""
        import time
        self.last_used = time.time()
        self.trades_count += 1
        self.available_balance -= amount


@dataclass
class MultiWalletConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤"""

    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    use_multi_wallet: bool = os.getenv('USE_MULTI_WALLET', 'false').lower() in ['true', '1', 'yes']

    # –ù–û–í–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –¥–ª—è —Ç—Ä–∞—Ç –≤—Å–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    use_max_available_balance: bool = os.getenv('USE_MAX_AVAILABLE_BALANCE', 'false').lower() in ['true', '1', 'yes']

    private_keys_str: str = os.getenv('MULTI_WALLET_PRIVATE_KEYS', '')
    gas_reserve: float = float(os.getenv('WALLET_GAS_RESERVE', '0.02'))
    min_balance: float = float(os.getenv('MIN_WALLET_BALANCE', '0.05'))

    # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    distribution_strategy: str = os.getenv('WALLET_DISTRIBUTION_STRATEGY', 'balanced')  # balanced, random, sequential
    max_trades_per_wallet: int = int(os.getenv('MAX_TRADES_PER_WALLET', '3'))

    # –†–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—è –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏
    randomize_amounts: bool = os.getenv('RANDOMIZE_TRADE_AMOUNTS', 'true').lower() in ['true', '1', 'yes']
    amount_variation_percent: float = float(os.getenv('AMOUNT_VARIATION_PERCENT', '15'))  # ¬±15%

    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–∫—É–ø–∫–∞–º–∏
    initial_delay_seconds: float = float(os.getenv('INITIAL_TRADING_DELAY', '15'))  # 15 —Å–µ–∫ –∑–∞–¥–µ—Ä–∂–∫–∞
    inter_trade_delay: tuple = (0.25, 0.6)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏ —Ä–∞–∑–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤

    # –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏
    wallets: List[MultiWalletInfo] = None

    def __post_init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if self.use_multi_wallet and self.private_keys_str:
            self.wallets = self._load_wallets()
        else:
            self.wallets = []

    def _load_wallets(self) -> List[MultiWalletInfo]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—à–µ–ª—å–∫–æ–≤ –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π"""
        if not CRYPTO_LIBS_AVAILABLE:
            logger.error("‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return []

        wallets = []
        private_keys = [key.strip() for key in self.private_keys_str.split(',') if key.strip()]

        logger.info(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ {len(private_keys)} –∫–æ—à–µ–ª—å–∫–æ–≤...")

        for i, private_key in enumerate(private_keys):
            try:
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
                private_key_bytes = base58.b58decode(private_key)
                keypair = Keypair.from_bytes(private_key_bytes)

                wallet = MultiWalletInfo(
                    index=i + 1,
                    address=str(keypair.pubkey()),
                    keypair=keypair,
                    reserved_gas=self.gas_reserve
                )

                wallets.append(wallet)
                logger.debug(f"‚úÖ –ö–æ—à–µ–ª–µ–∫ {i + 1}: {wallet.address}")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—à–µ–ª—å–∫–∞ {i + 1}: {e}")
                continue

        logger.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(wallets)} –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏")
        return wallets

    def is_enabled(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ —Å–∏—Å—Ç–µ–º–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤"""
        return self.use_multi_wallet and len(self.wallets) > 0

    def get_available_wallets(self, min_amount: float = 0) -> List[MultiWalletInfo]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º"""
        if not self.wallets:
            return []

        available = []
        for wallet in self.wallets:
            if (wallet.balance_sol >= self.min_balance and
                    wallet.can_trade(min_amount) and
                    wallet.trades_count < self.max_trades_per_wallet):
                available.append(wallet)

        return available

    def get_total_available_balance(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤"""
        if not self.wallets:
            return 0.0

        return sum(wallet.available_balance for wallet in self.wallets)

    def select_wallet_for_trade(self, amount: float) -> Optional[MultiWalletInfo]:
        """
        –í—ã–±–æ—Ä –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è —Å–¥–µ–ª–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è

        Args:
            amount: –°—É–º–º–∞ —Å–¥–µ–ª–∫–∏ –≤ SOL

        Returns:
            MultiWalletInfo: –í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –∏–ª–∏ None
        """
        available_wallets = self.get_available_wallets(amount)

        if not available_wallets:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è —Å–¥–µ–ª–∫–∏ –Ω–∞ {amount} SOL")
            return None

        if self.distribution_strategy == 'random':
            return random.choice(available_wallets)

        elif self.distribution_strategy == 'sequential':
            # –í—ã–±–∏—Ä–∞–µ–º –∫–æ—à–µ–ª–µ–∫ —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–¥–µ–ª–æ–∫
            return min(available_wallets, key=lambda w: w.trades_count)

        elif self.distribution_strategy == 'balanced':
            # –í—ã–±–∏—Ä–∞–µ–º –∫–æ—à–µ–ª–µ–∫ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
            return max(available_wallets, key=lambda w: w.available_balance)

        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä
            return random.choice(available_wallets)

    def get_max_trade_amount_for_wallet(self, wallet: MultiWalletInfo) -> float:
        """
        –ü–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å –∫–æ—à–µ–ª—å–∫–∞

        Returns:
            float: –°—É–º–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ (–±–∞–ª–∞–Ω—Å - —Ä–µ–∑–µ—Ä–≤ –Ω–∞ –≥–∞–∑)
        """
        if not self.use_max_available_balance:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É
            try:
                from config.settings import settings
                return settings.trading.trade_amount_sol
            except ImportError:
                # Fallback –µ—Å–ª–∏ settings –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
                return 0.1

        # –¢—Ä–∞—Ç–∏–º –≤–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å
        max_amount = wallet.available_balance

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞
        try:
            from config.settings import settings
            max_allowed = settings.trading.max_trade_amount_sol
        except ImportError:
            # Fallback –∑–∞—â–∏—Ç–∞
            max_allowed = 1.0

        return min(max_amount, max_allowed)

    def select_wallet_for_max_trade(self) -> Optional[MultiWalletInfo]:
        """
        –í—ã–±—Ä–∞—Ç—å –∫–æ—à–µ–ª–µ–∫ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
        """
        available_wallets = self.get_available_wallets()

        if not available_wallets:
            return None

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—à–µ–ª–µ–∫ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
        return max(available_wallets, key=lambda w: w.available_balance)

    def randomize_trade_amount(self, base_amount: float) -> float:
        """
        –†–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—è —Å—É–º–º—ã —Å–¥–µ–ª–∫–∏ –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏

        Args:
            base_amount: –ë–∞–∑–æ–≤–∞—è —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏

        Returns:
            float: –†–∞–Ω–¥–æ–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞
        """
        if not self.randomize_amounts:
            return base_amount

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≤–∞—Ä–∏–∞—Ü–∏—é ¬±15% (–∏–ª–∏ –¥—Ä—É–≥–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç)
        variation = random.uniform(
            -self.amount_variation_percent / 100,
            self.amount_variation_percent / 100
        )

        randomized_amount = base_amount * (1 + variation)

        # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 4 –∑–Ω–∞–∫–æ–≤ –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
        randomized_amount = round(randomized_amount, 4)

        logger.debug(f"üí´ –†–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—è: {base_amount} SOL ‚Üí {randomized_amount} SOL ({variation * 100:+.1f}%)")
        return randomized_amount

    def get_inter_trade_delay(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏"""
        return random.uniform(*self.inter_trade_delay)

    def get_stats(self) -> dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤"""
        if not self.wallets:
            return {"multi_wallet_enabled": False}

        total_balance = sum(w.balance_sol for w in self.wallets)
        total_available = sum(w.available_balance for w in self.wallets)
        total_trades = sum(w.trades_count for w in self.wallets)

        available_wallets = len(self.get_available_wallets())

        return {
            "multi_wallet_enabled": True,
            "use_max_available_balance": self.use_max_available_balance,
            "total_wallets": len(self.wallets),
            "available_wallets": available_wallets,
            "total_balance_sol": total_balance,
            "total_available_sol": total_available,
            "total_trades_executed": total_trades,
            "distribution_strategy": self.distribution_strategy,
            "randomization_enabled": self.randomize_amounts,
            "initial_delay_seconds": self.initial_delay_seconds,
            "wallets_summary": [
                {
                    "index": w.index,
                    "address": w.address[:8] + "..." + w.address[-8:],  # –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
                    "balance": w.balance_sol,
                    "available": w.available_balance,
                    "trades": w.trades_count
                } for w in self.wallets
            ]
        }

    def reset_trades_count(self):
        """–°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ —Å–¥–µ–ª–æ–∫ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–æ–≤)"""
        if self.wallets:
            for wallet in self.wallets:
                wallet.trades_count = 0
            logger.info("üìä –°—á–µ—Ç—á–∏–∫ —Å–¥–µ–ª–æ–∫ —Å–±—Ä–æ—à–µ–Ω –¥–ª—è –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤")