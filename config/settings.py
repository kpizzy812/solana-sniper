"""
üéØ MORI Sniper Bot - –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ –≤ –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
"""

from .base import DatabaseConfig, LoggingConfig, AlertConfig, RateLimitConfig, validate_critical_settings
from .solana import SolanaConfig
from .trading import TradingConfig, JupiterConfig
from .security import SecurityConfig
from .monitoring import MonitoringConfig
from .ai import AIConfig
from .multi_wallet import MultiWalletConfig


class Settings:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∏–π –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""

    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.solana = SolanaConfig()
        self.trading = TradingConfig()
        self.security = SecurityConfig()
        self.monitoring = MonitoringConfig()
        self.ai = AIConfig()
        self.jupiter = JupiterConfig()
        self.database = DatabaseConfig()
        self.logging = LoggingConfig()
        self.alerts = AlertConfig()
        self.rate_limits = RateLimitConfig()
        self.multi_wallet = MultiWalletConfig()

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.validate()

    def validate(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        validate_critical_settings(
            self.solana,
            self.monitoring,
            self.trading,
            self.ai
        )

    @property
    def is_production(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ–º –≤ production (mainnet)"""
        return self.solana.is_production

    @property
    def total_investment(self) -> float:
        """–û–±—â–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –∑–∞ –æ–¥–∏–Ω —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª"""
        return self.trading.total_investment

    def get_summary(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        return {
            'network': self.solana.network,
            'rpc_url': self.solana.rpc_url,
            'trade_amount': self.trading.trade_amount_sol,
            'num_purchases': self.trading.num_purchases,
            'total_investment': self.total_investment,
            'telegram_user_bot': self.monitoring.use_user_bot,
            'telegram_bot_api': self.monitoring.use_bot_api,
            'twitter_enabled': bool(self.monitoring.twitter_bearer_token),
            'ai_enabled': self.ai.use_ai_confirmation,
            'security_checks': self.security.enable_security_checks,
            'min_liquidity': self.security.min_liquidity_sol,
            'max_price_impact': self.security.max_price_impact,
        }


# –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ò–ú–ü–û–†–¢–´ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ –∏ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
try:
    from utils.addresses import (
        is_valid_solana_address,
        extract_addresses_fast as utils_extract_addresses_fast,
        extract_jupiter_swap_addresses,
        is_wrapped_sol,
        filter_trading_targets
    )
    UTILS_AVAILABLE = True
except ImportError:
    UTILS_AVAILABLE = False
    from loguru import logger
    logger.warning("‚ö†Ô∏è utils.addresses –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏")

    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π
    def is_valid_solana_address(address: str) -> bool:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥—Ä–µ—Å–∞"""
        if not address or not isinstance(address, str):
            return False
        return len(address) >= 32 and len(address) <= 44

    def utils_extract_addresses_fast(text: str, ai_config=None):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤"""
        import re
        # –ü—Ä–æ—Å—Ç–æ–π regex –¥–ª—è Solana –∞–¥—Ä–µ—Å–æ–≤
        pattern = r'\b[1-9A-HJ-NP-Za-km-z]{32,44}\b'
        addresses = re.findall(pattern, text)
        return [addr for addr in addresses if is_valid_solana_address(addr)]

    def extract_jupiter_swap_addresses(text: str):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è Jupiter –∞–¥—Ä–µ—Å–æ–≤"""
        import re
        if 'jup.ag/swap/' not in text.lower():
            return []
        # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–æ–≤ –≤ Jupiter —Å—Å—ã–ª–∫–∞—Ö
        pattern = r'jup\.ag/swap/[^-\s]*-([1-9A-HJ-NP-Za-km-z]{32,44})'
        matches = re.findall(pattern, text, re.IGNORECASE)
        return [addr for addr in matches if is_valid_solana_address(addr)]

    def is_wrapped_sol(address: str) -> bool:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è Wrapped SOL"""
        return address == 'So11111111111111111111111111111111111111112'

    def filter_trading_targets(addresses):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
        base_tokens = {
            'So11111111111111111111111111111111111111112',  # Wrapped SOL
            'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',  # USDC
            'Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB',  # USDT
        }
        return [addr for addr in addresses if addr not in base_tokens]


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ - —Å–æ–∑–¥–∞–µ–º –ü–û–°–õ–ï –∏–º–ø–æ—Ä—Ç–æ–≤
settings = Settings()


# –û–±–µ—Ä—Ç–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º API
def has_urgent_keywords(text: str) -> bool:
    """–ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
    return settings.ai.has_urgent_keywords(text)


def is_admin_message(username: str, user_id: int = None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞"""
    return settings.monitoring.is_admin_message(username, user_id)


# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è extract_addresses_fast —Å –ø–µ—Ä–µ–¥–∞—á–µ–π ai_config
def extract_addresses_fast(text: str):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è extract_addresses_fast —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–µ–¥–∞—á–µ–π AI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    if UTILS_AVAILABLE:
        return utils_extract_addresses_fast(text, settings.ai)
    else:
        return utils_extract_addresses_fast(text)


# –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
__all__ = [
    'settings',
    'is_valid_solana_address',
    'extract_addresses_fast',
    'has_urgent_keywords',
    'is_admin_message',
    'extract_jupiter_swap_addresses',
    'is_wrapped_sol',
    'filter_trading_targets'
]