import os
import re
from typing import List, Dict, Optional
from dataclasses import dataclass
from dotenv import load_dotenv
from loguru import logger

load_dotenv()

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ seed phrase
try:
    from mnemonic import Mnemonic
    from solders.keypair import Keypair
    import base58

    CRYPTO_LIBS_AVAILABLE = True
except ImportError:
    CRYPTO_LIBS_AVAILABLE = False
    logger.warning("‚ö†Ô∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è seed phrase –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: pip install mnemonic")


def convert_seed_to_private_key(seed_phrase: str) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç seed phrase –≤ base58 –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á"""
    if not CRYPTO_LIBS_AVAILABLE:
        raise ImportError("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install mnemonic solders")

    try:
        mnemo = Mnemonic("english")
        clean_phrase = seed_phrase.strip()

        if not mnemo.check(clean_phrase):
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–∞—è seed phrase")

        seed = mnemo.to_seed(clean_phrase)
        keypair = Keypair.from_seed(seed[:32])
        private_key = base58.b58encode(bytes(keypair)).decode('utf-8')

        logger.info(f"‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏–∑ seed phrase")
        logger.info(f"üè¶ –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {keypair.pubkey()}")

        return private_key
    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ seed phrase: {e}")


@dataclass
class SolanaConfig:
    rpc_url: str = os.getenv('SOLANA_RPC_URL', 'https://api.devnet.solana.com')
    network: str = 'mainnet'  # devnet –¥–ª—è —Ç–µ—Å—Ç–æ–≤, mainnet-beta –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
    private_key: str = ''
    commitment: str = 'confirmed'

    def __post_init__(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è seed phrase –≤ private key"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ç–æ–≤—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
        direct_key = os.getenv('SOLANA_PRIVATE_KEY', '')

        if direct_key:
            self.private_key = direct_key
            logger.debug("üîë –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–æ—Ç–æ–≤—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á")
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –≥–æ—Ç–æ–≤–æ–≥–æ –∫–ª—é—á–∞, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ seed phrase
            seed_phrase = os.getenv('SOLANA_SEED_PHRASE', '')

            if seed_phrase:
                try:
                    self.private_key = convert_seed_to_private_key(seed_phrase)
                    logger.success("üîÑ Seed phrase —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ seed phrase: {e}")
                    raise
            else:
                logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ SOLANA_PRIVATE_KEY, –Ω–∏ SOLANA_SEED_PHRASE")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ç—å –∏–∑ RPC URL
        if 'mainnet' in self.rpc_url:
            self.network = 'mainnet-beta'
        elif 'devnet' in self.rpc_url:
            self.network = 'devnet'


@dataclass
class TradingConfig:
    target_token: str = os.getenv('TARGET_TOKEN', '')
    base_token: str = 'So11111111111111111111111111111111111111112'  # Wrapped SOL
    trade_amount_sol: float = float(os.getenv('TRADE_AMOUNT_SOL', '0.1'))
    num_purchases: int = int(os.getenv('NUM_PURCHASES', '1'))
    slippage_bps: int = int(os.getenv('SLIPPAGE_BPS', '500'))  # 5%
    priority_fee: int = int(os.getenv('PRIORITY_FEE', '100000'))  # microlamports
    max_retries: int = 3
    retry_delay: float = 0.5  # —Å–µ–∫—É–Ω–¥—ã - –±—ã—Å—Ç—Ä—ã–µ –ø–æ–≤—Ç–æ—Ä—ã
    concurrent_trades: bool = True  # –í—ã–ø–æ–ª–Ω—è—Ç—å –≤—Å–µ –ø–æ–∫—É–ø–∫–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    smart_split: bool = True  # –£–º–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Å–¥–µ–ª–æ–∫
    max_trade_amount_sol: float = float(os.getenv('MAX_TRADE_AMOUNT_SOL', '1.0'))  # –ú–∞–∫—Å–∏–º—É–º –Ω–∞ –æ–¥–Ω—É —Å–¥–µ–ª–∫—É


@dataclass
class SecurityConfig:
    enable_security_checks: bool = True
    min_liquidity_sol: float = float(os.getenv('MIN_LIQUIDITY', '5'))
    max_buy_tax: int = int(os.getenv('MAX_BUY_TAX', '10'))
    max_sell_tax: int = int(os.getenv('MAX_SELL_TAX', '10'))
    max_price_impact: float = float(os.getenv('MAX_PRICE_IMPACT', '15.0'))  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ %
    check_honeypot: bool = True
    check_mint_authority: bool = True
    check_freeze_authority: bool = True
    min_holders: int = int(os.getenv('MIN_HOLDERS', '10'))
    security_timeout: float = 2.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    blacklisted_tokens: List[str] = None  # –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤

    def __post_init__(self):
        if self.blacklisted_tokens is None:
            self.blacklisted_tokens = []


@dataclass
class MonitoringConfig:
    # –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    telegram_interval: float = 1.0  # –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    twitter_interval: float = 2.0  # Twitter –∏–º–µ–µ—Ç –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –ª–∏–º–∏—Ç—ã
    website_interval: float = 5.0

    # Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    telegram_bot_token: str = os.getenv('TELEGRAM_BOT_TOKEN', '')
    telegram_channels: List[str] = None
    telegram_groups: List[str] = None
    telegram_admin_usernames: List[str] = None  # –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏

    # Twitter/X –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    twitter_bearer_token: str = os.getenv('TWITTER_BEARER_TOKEN', '')
    twitter_usernames: List[str] = None

    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∞–π—Ç–æ–≤
    website_urls: List[str] = None
    website_selectors: List[str] = None

    def __post_init__(self):
        if self.telegram_channels is None:
            self.telegram_channels = [
                os.getenv('TELEGRAM_CHANNEL_1', ''),
                os.getenv('TELEGRAM_CHANNEL_2', '')
            ]

        if self.telegram_groups is None:
            self.telegram_groups = [
                os.getenv('TELEGRAM_GROUP_1', ''),
                os.getenv('TELEGRAM_GROUP_2', '')
            ]

        if self.telegram_admin_usernames is None:
            self.telegram_admin_usernames = [
                os.getenv('TELEGRAM_ADMIN_1', ''),
                os.getenv('TELEGRAM_ADMIN_2', '')
            ]

        if self.twitter_usernames is None:
            self.twitter_usernames = [
                os.getenv('TWITTER_USERNAME_1', ''),
                os.getenv('TWITTER_USERNAME_2', '')
            ]

        if self.website_urls is None:
            self.website_urls = [
                os.getenv('WEBSITE_URL_1', ''),
                os.getenv('WEBSITE_URL_2', '')
            ]

        if self.website_selectors is None:
            self.website_selectors = [
                '.contract-address',
                '.token-address',
                '#contract',
                '[data-contract]',
                '.address',
                '[data-address]'
            ]


@dataclass
class AIConfig:
    openai_api_key: str = os.getenv('OPENAI_API_KEY', '')
    model: str = 'gpt-4o-mini'  # –ë–æ–ª–µ–µ –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å
    max_tokens: int = 100  # –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    temperature: float = 0.1

    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    use_fast_analysis: bool = True  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å regex –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
    use_ai_confirmation: bool = False  # AI –∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª—é—á–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    ai_timeout: float = 3.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞
    cache_ai_results: bool = True

    # –ö–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ regex –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    _solana_address_patterns = None
    urgent_keywords: List[str] = None

    def __post_init__(self):
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º AI –µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á
        if self.openai_api_key and not self.use_ai_confirmation:
            self.use_ai_confirmation = True
            logger.info("‚úÖ AI –∞–Ω–∞–ª–∏–∑ –≤–∫–ª—é—á–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (–Ω–∞–π–¥–µ–Ω OpenAI –∫–ª—é—á)")

        if self._solana_address_patterns is None:
            self._solana_address_patterns = [
                re.compile(r'\b[1-9A-HJ-NP-Za-km-z]{32,44}\b'),  # Solana –∞–¥—Ä–µ—Å
                re.compile(r'contract[:\s]*([1-9A-HJ-NP-Za-km-z]{32,44})', re.IGNORECASE),
                re.compile(r'mint[:\s]*([1-9A-HJ-NP-Za-km-z]{32,44})', re.IGNORECASE),
                re.compile(r'address[:\s]*([1-9A-HJ-NP-Za-km-z]{32,44})', re.IGNORECASE),
                re.compile(r'ca[:\s]*([1-9A-HJ-NP-Za-km-z]{32,44})', re.IGNORECASE),
                re.compile(r'—Ç–æ–∫–µ–Ω[:\s]*([1-9A-HJ-NP-Za-km-z]{32,44})', re.IGNORECASE),
                re.compile(r'–∫–æ–Ω—Ç—Ä–∞–∫—Ç[:\s]*([1-9A-HJ-NP-Za-km-z]{32,44})', re.IGNORECASE),
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è URL (Jupiter, DEX —Å—Å—ã–ª–∫–∏)
                re.compile(r'jup\.ag/swap/[^-]*-([1-9A-HJ-NP-Za-km-z]{32,44})', re.IGNORECASE),
                re.compile(r'raydium\.io/.*?([1-9A-HJ-NP-Za-km-z]{32,44})', re.IGNORECASE),
                re.compile(r'dexscreener\.com/solana/([1-9A-HJ-NP-Za-km-z]{32,44})', re.IGNORECASE),
                re.compile(r'birdeye\.so/token/([1-9A-HJ-NP-Za-km-z]{32,44})', re.IGNORECASE),
                # –û–±—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                re.compile(r'[?&]token=([1-9A-HJ-NP-Za-km-z]{32,44})', re.IGNORECASE),
                re.compile(r'[?&]mint=([1-9A-HJ-NP-Za-km-z]{32,44})', re.IGNORECASE),
                re.compile(r'[?&]address=([1-9A-HJ-NP-Za-km-z]{32,44})', re.IGNORECASE),
                # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å –∞–¥—Ä–µ—Å–æ–≤ (–∫–∞–∫ –≤ Jupiter)
                re.compile(r'[/-]([1-9A-HJ-NP-Za-km-z]{32,44})(?:[?&#/]|$)', re.IGNORECASE)
            ]

        if self.urgent_keywords is None:
            self.urgent_keywords = [
                '$mori', 'contract', 'launch', 'live', 'now', 'urgent',
                'ca:', 'mint:', 'address:', 'buy now', 'launching',
                '–∫–æ–Ω—Ç—Ä–∞–∫—Ç', '–∑–∞–ø—É—Å–∫', '—Ç–æ–∫–µ–Ω', '–∞–¥—Ä–µ—Å', '–ø–æ–∫—É–ø–∞–π'
            ]

    @property
    def solana_address_patterns(self):
        return self._solana_address_patterns


@dataclass
class JupiterConfig:
    api_url: str = 'https://quote-api.jup.ag/v6'
    swap_api_url: str = 'https://quote-api.jup.ag/v6/swap'
    price_api_url: str = 'https://price.jup.ag/v4/price'
    timeout: float = 5.0  # –¢–∞–π–º–∞—É—Ç API
    max_concurrent_requests: int = 20  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫


@dataclass
class DatabaseConfig:
    db_path: str = os.getenv('DB_PATH', 'data/sniper.db')
    backup_interval: int = 3600  # –ë—ç–∫–∞–ø –∫–∞–∂–¥—ã–π —á–∞—Å
    cleanup_days: int = 30  # –•—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ 30 –¥–Ω–µ–π


@dataclass
class LoggingConfig:
    level: str = os.getenv('LOG_LEVEL', 'INFO')
    file_path: str = os.getenv('LOG_FILE', 'logs/sniper.log')
    max_size: str = '100 MB'
    retention: str = '7 days'
    format: str = "{time:YYYY-MM-DD HH:mm:ss} | {level} | {name} | {message}"


@dataclass
class AlertConfig:
    telegram_alerts_chat_id: str = os.getenv('TELEGRAM_ALERTS_CHAT_ID', '')
    discord_webhook: str = os.getenv('DISCORD_WEBHOOK_URL', '')
    email_alerts: bool = False


@dataclass
class RateLimitConfig:
    telegram_per_second: int = 30
    twitter_per_15min: int = 75
    jupiter_per_second: int = 50  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
    solana_rpc_per_second: int = 200  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —Å–¥–µ–ª–æ–∫


class Settings:
    def __init__(self):
        self.solana = SolanaConfig()
        self.trading = TradingConfig()
        self.security = SecurityConfig()
        self.monitoring = MonitoringConfig()
        self.ai = AIConfig()
        self.jupiter = JupiterConfig()
        self.database = DatabaseConfig()
        self.logging = LoggingConfig()
        self.alerts = AlertConfig()
        self.rate_limits = RateLimitConfig()

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.validate()

    def validate(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        errors = []

        if not self.solana.private_key:
            errors.append("–ù—É–∂–µ–Ω SOLANA_PRIVATE_KEY –∏–ª–∏ SOLANA_SEED_PHRASE")

        if not any([
            self.monitoring.telegram_bot_token,
            self.monitoring.twitter_bearer_token,
            any(self.monitoring.website_urls)
        ]):
            errors.append("–ù—É–∂–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–æ–∫–µ–Ω API —Å–æ—Ü—Å–µ—Ç–µ–π –∏–ª–∏ URL —Å–∞–π—Ç–∞")

        if self.ai.use_ai_confirmation and not self.ai.openai_api_key:
            logger.warning("‚ö†Ô∏è AI –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ - –Ω–µ—Ç OPENAI_API_KEY")
            self.ai.use_ai_confirmation = False

        if self.trading.trade_amount_sol <= 0:
            errors.append("TRADE_AMOUNT_SOL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")

        if self.trading.num_purchases <= 0:
            errors.append("NUM_PURCHASES –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")

        if self.trading.trade_amount_sol > self.trading.max_trade_amount_sol:
            errors.append("TRADE_AMOUNT_SOL –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ MAX_TRADE_AMOUNT_SOL")

        if errors:
            raise ValueError(f"–û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n" + "\n".join(errors))

    @property
    def is_production(self) -> bool:
        return self.solana.network == 'mainnet-beta'

    @property
    def total_investment(self) -> float:
        return self.trading.trade_amount_sol * self.trading.num_purchases


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
settings = Settings()


# –ë—ã—Å—Ç—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–æ–≤
def is_valid_solana_address(address: str) -> bool:
    """–ë—ã—Å—Ç—Ä–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ Solana –∞–¥—Ä–µ—Å–∞"""
    if len(address) < 32 or len(address) > 44:
        return False

    # –ù–∞–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤ Base58
    base58_chars = set('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz')
    if not all(c in base58_chars for c in address):
        return False

    # –ò—Å–∫–ª—é—á–∞–µ–º –æ—á–µ–≤–∏–¥–Ω—ã–µ –ª–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
    if address == '1' * len(address):  # –í—Å–µ –µ–¥–∏–Ω–∏—Ü—ã
        return False
    if address.isupper() or address.islower():  # –í—Å–µ –≤ –æ–¥–Ω–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
        return False

    return True


def extract_addresses_fast(text: str) -> List[str]:
    """–£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ —á–µ—Ä–µ–∑ regex"""
    addresses = set()

    for pattern in settings.ai.solana_address_patterns:
        matches = pattern.findall(text)
        for match in matches:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã tuple –∏–∑ –≥—Ä—É–ø–ø
            addr = match if isinstance(match, str) else match[0] if match else ''
            if addr and is_valid_solana_address(addr):
                addresses.add(addr)

    return list(addresses)


def has_urgent_keywords(text: str) -> bool:
    """–ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
    text_lower = text.lower()
    return any(keyword.lower() in text_lower for keyword in settings.ai.urgent_keywords)


def is_admin_message(username: str, user_id: int = None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞"""
    if not username:
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    admin_usernames = [admin.lower() for admin in settings.monitoring.telegram_admin_usernames if admin]
    return username.lower() in admin_usernames


# –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
__all__ = [
    'settings', 'is_valid_solana_address', 'extract_addresses_fast',
    'has_urgent_keywords', 'is_admin_message'
]