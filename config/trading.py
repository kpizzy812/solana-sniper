import os
from dataclasses import dataclass
import random
from typing import List
from loguru import logger


@dataclass
class TradingConfig:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    target_token: str = os.getenv('TARGET_TOKEN', '')
    base_token: str = 'So11111111111111111111111111111111111111112'  # Wrapped SOL
    trade_amount_sol: float = float(os.getenv('TRADE_AMOUNT_SOL', '0.1'))
    num_purchases: int = int(os.getenv('NUM_PURCHASES', '1'))
    slippage_bps: int = int(os.getenv('SLIPPAGE_BPS', '500'))  # 5%
    priority_fee: int = int(os.getenv('PRIORITY_FEE', '100000'))  # microlamports
    max_retries: int = 3
    retry_delay: float = 0.5  # —Å–µ–∫—É–Ω–¥—ã - –±—ã—Å—Ç—Ä—ã–µ –ø–æ–≤—Ç–æ—Ä—ã

    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ß–∏—Ç–∞–µ–º –∏–∑ .env
    concurrent_trades: bool = os.getenv('CONCURRENT_TRADES', 'true').lower() in ['true', '1', 'yes']

    smart_split: bool = True  # –£–º–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Å–¥–µ–ª–æ–∫
    max_trade_amount_sol: float = float(os.getenv('MAX_TRADE_AMOUNT_SOL', '1.0'))  # –ú–∞–∫—Å–∏–º—É–º –Ω–∞ –æ–¥–Ω—É —Å–¥–µ–ª–∫—É

    # –ù–û–í–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –¥–ª—è —Ç—Ä–∞—Ç –≤—Å–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    use_max_available_balance: bool = os.getenv('USE_MAX_AVAILABLE_BALANCE', 'false').lower() in ['true', '1', 'yes']

    # –°–ø–∏—Å–∫–∏ –¥–ª—è —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    priority_fee_list: List[int] = None
    slippage_bps_list: List[int] = None

    def __post_init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏"""
        # –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–∫–∏ –∏–∑ .env
        priority_fee_str = os.getenv('PRIORITY_FEE_LIST', '')
        slippage_bps_str = os.getenv('SLIPPAGE_BPS_LIST', '')

        # –ü–∞—Ä—Å–∏–º priority fees
        if priority_fee_str:
            try:
                self.priority_fee_list = [int(x.strip()) for x in priority_fee_str.split(',') if x.strip()]
            except ValueError:
                logger.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ PRIORITY_FEE_LIST, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
                self.priority_fee_list = [self.priority_fee]
        else:
            self.priority_fee_list = [self.priority_fee]

        # –ü–∞—Ä—Å–∏–º slippage
        if slippage_bps_str:
            try:
                self.slippage_bps_list = [int(x.strip()) for x in slippage_bps_str.split(',') if x.strip()]
            except ValueError:
                logger.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ SLIPPAGE_BPS_LIST, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
                self.slippage_bps_list = [self.slippage_bps]
        else:
            self.slippage_bps_list = [self.slippage_bps]

        logger.debug(f"üé≤ Priority fees: {self.priority_fee_list}")
        logger.debug(f"üé≤ Slippage values: {self.slippage_bps_list}")

    def get_random_priority_fee(self) -> int:
        """–°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞"""
        return random.choice(self.priority_fee_list)

    def get_random_slippage(self) -> int:
        """–°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞"""
        return random.choice(self.slippage_bps_list)

    @property
    def total_investment(self) -> float:
        """–û–±—â–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –∑–∞ –æ–¥–∏–Ω —Å–∏–≥–Ω–∞–ª"""
        return self.trade_amount_sol * self.num_purchases


@dataclass
class JupiterConfig:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Jupiter DEX API"""
    # –ü–†–ê–í–ò–õ–¨–ù–´–ï Jupiter API endpoints (—è–Ω–≤–∞—Ä—å 2025)
    lite_api_url: str = 'https://lite-api.jup.ag/swap/v1'  # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π endpoint
    api_url: str = 'https://api.jup.ag/swap/v1'  # –ü–ª–∞—Ç–Ω—ã–π endpoint (—Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á–∏)
    price_api_url: str = 'https://lite-api.jup.ag/price/v2'  # Price API v2 (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)
    timeout: float = 5.0  # –¢–∞–π–º–∞—É—Ç API

    # ‚úÖ –£–í–ï–õ–ò–ß–ï–ù–û –¥–ª—è 59 –∫–æ—à–µ–ª—å–∫–æ–≤ —Å –ø–ª–∞—Ç–Ω—ã–º API:
    max_concurrent_requests: int = int(os.getenv('JUPITER_MAX_CONCURRENT_REQUESTS', '100'))

    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ß–∏—Ç–∞–µ–º –∏–∑ .env
    use_lite_api: bool = os.getenv('JUPITER_USE_LITE_API', 'true').lower() in ['true', '1', 'yes']

    api_key: str = os.getenv('JUPITER_API_KEY', '')  # API –∫–ª—é—á –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤

    def __post_init__(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Jupiter API"""
        if self.api_key and not self.use_lite_api:
            logger.info(f"üöÄ Jupiter API: –ø–ª–∞—Ç–Ω—ã–π —Ä–µ–∂–∏–º (api.jup.ag)")
        else:
            logger.info(f"üåê Jupiter API: –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–µ–∂–∏–º (lite-api.jup.ag)")

        logger.debug(f"‚ö° Max concurrent requests: {self.max_concurrent_requests}")


@dataclass
class SolanaConfig:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Solana RPC —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤"""

    # ‚úÖ –ù–û–í–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ RPC:
    max_rpc_requests_per_second: int = int(os.getenv('SOLANA_RPC_MAX_REQUESTS_PER_SEC', '45'))

    # –ë–∞—Ç—á–∏–Ω–≥ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤:
    wallet_batch_size: int = int(os.getenv('WALLET_BATCH_SIZE', '15'))  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ 15 –∫–æ—à–µ–ª—å–∫–æ–≤ –∑–∞ —Ä–∞–∑
    batch_delay_ms: int = int(os.getenv('WALLET_BATCH_DELAY_MS', '50'))  # 50ms –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏

    # –¢–∞–π–º–∞—É—Ç—ã –∏ —Ä–µ—Ç—Ä–∞–∏:
    rpc_timeout_seconds: float = float(os.getenv('SOLANA_RPC_TIMEOUT', '1.0'))
    max_retries: int = int(os.getenv('SOLANA_RPC_MAX_RETRIES', '2'))
    retry_delay_seconds: float = float(os.getenv('SOLANA_RPC_RETRY_DELAY', '0.1'))

    def __post_init__(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Solana RPC"""
        logger.info(f"üåê Solana RPC: {self.max_rpc_requests_per_second} req/s max")
        logger.debug(f"üì¶ Wallet batching: {self.wallet_batch_size} –∫–æ—à–µ–ª—å–∫–æ–≤, {self.batch_delay_ms}ms –∑–∞–¥–µ—Ä–∂–∫–∞")


@dataclass
class PerformanceConfig:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–Ω–∞–π–ø–µ—Ä –±–æ—Ç–∞"""

    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å
    max_concurrent_monitors: int = int(os.getenv('MAX_CONCURRENT_MONITORS', '10'))
    max_concurrent_trades: int = int(os.getenv('MAX_CONCURRENT_TRADES', '5'))

    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏
    enable_cache_cleanup: bool = os.getenv('ENABLE_CACHE_CLEANUP', 'true').lower() in ['true', '1', 'yes']
    cache_cleanup_interval: int = int(os.getenv('CACHE_CLEANUP_INTERVAL_SEC', '300'))  # 5 –º–∏–Ω—É—Ç

    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    enable_performance_logging: bool = os.getenv('ENABLE_PERFORMANCE_LOGGING', 'false').lower() in ['true', '1', 'yes']
    performance_log_interval: int = int(os.getenv('PERFORMANCE_LOG_INTERVAL_SEC', '60'))  # 1 –º–∏–Ω—É—Ç–∞

    def __post_init__(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if self.enable_performance_logging:
            logger.info(f"üìä Performance monitoring: –∫–∞–∂–¥—ã–µ {self.performance_log_interval}s")

        logger.debug(f"‚ö° Max concurrent trades: {self.max_concurrent_trades}")
        logger.debug(f"üñ•Ô∏è Cache cleanup: {'–≤–∫–ª—é—á–µ–Ω' if self.enable_cache_cleanup else '–æ—Ç–∫–ª—é—á–µ–Ω'}")


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def validate_trading_config(config: TradingConfig) -> List[str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    errors = []

    if config.trade_amount_sol <= 0:
        errors.append("TRADE_AMOUNT_SOL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")

    if config.num_purchases <= 0:
        errors.append("NUM_PURCHASES –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")

    if config.trade_amount_sol > config.max_trade_amount_sol:
        errors.append("TRADE_AMOUNT_SOL –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ MAX_TRADE_AMOUNT_SOL")

    if not config.priority_fee_list or all(fee <= 0 for fee in config.priority_fee_list):
        errors.append("–í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ PRIORITY_FEE_LIST –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏")

    if not config.slippage_bps_list or all(slippage <= 0 for slippage in config.slippage_bps_list):
        errors.append("–í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ SLIPPAGE_BPS_LIST –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏")

    return errors


def validate_jupiter_config(config: JupiterConfig) -> List[str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ Jupiter API"""
    errors = []

    if config.max_concurrent_requests <= 0:
        errors.append("JUPITER_MAX_CONCURRENT_REQUESTS –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")

    if config.timeout <= 0:
        errors.append("–¢–∞–π–º–∞—É—Ç Jupiter API –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")

    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ª–∏–º–∏—Ç–∞—Ö –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ API
    if (not config.api_key or config.use_lite_api) and config.max_concurrent_requests > 10:
        logger.warning("‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π concurrent_requests —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º Jupiter API –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å 429 –æ—à–∏–±–∫–∏")

    return errors


def validate_solana_config(config: SolanaConfig) -> List[str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ Solana RPC"""
    errors = []

    if config.max_rpc_requests_per_second <= 0:
        errors.append("SOLANA_RPC_MAX_REQUESTS_PER_SEC –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")

    if config.wallet_batch_size <= 0:
        errors.append("WALLET_BATCH_SIZE –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")

    if config.batch_delay_ms < 0:
        errors.append("WALLET_BATCH_DELAY_MS –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")

    if config.rpc_timeout_seconds <= 0:
        errors.append("SOLANA_RPC_TIMEOUT –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")

    return errors


def validate_all_configs(trading: TradingConfig, jupiter: JupiterConfig, solana: SolanaConfig) -> None:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∏ –≤—ã–≤–æ–¥ –æ—à–∏–±–æ–∫"""
    all_errors = []

    all_errors.extend(validate_trading_config(trading))
    all_errors.extend(validate_jupiter_config(jupiter))
    all_errors.extend(validate_solana_config(solana))

    if all_errors:
        error_msg = "‚ùå –û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏:\n" + "\n".join(f"  ‚Ä¢ {error}" for error in all_errors)
        logger.error(error_msg)
        raise ValueError(error_msg)
    else:
        logger.success("‚úÖ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤–∞–ª–∏–¥–Ω—ã")